
NTI_STM_Interfacing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004654  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  080047e4  080047e4  000147e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080048b4  080048b4  000148b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080048b8  080048b8  000148b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000018  20000000  080048bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
  7 .bss          00003e00  20000018  20000018  00020018  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20003e18  20003e18  00020018  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001079a  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002cd5  00000000  00000000  000307e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000c40  00000000  00000000  000334b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000ab8  00000000  00000000  000340f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000061da  00000000  00000000  00034bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003ac8  00000000  00000000  0003ad8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003e852  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002fa8  00000000  00000000  0003e8d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00041878  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000018 	.word	0x20000018
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080047cc 	.word	0x080047cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000001c 	.word	0x2000001c
 80001cc:	080047cc 	.word	0x080047cc

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800030e:	f1a4 0401 	sub.w	r4, r4, #1
 8000312:	d1e9      	bne.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f092 0f00 	teq	r2, #0
 80004ba:	bf14      	ite	ne
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e720      	b.n	8000314 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aedc 	beq.w	80002c2 <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6c1      	b.n	80002c2 <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <getPassword>:
#include <Task.h>

char g_myPassword[ PASS_LEN ];

void getPassword( char * password )
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b084      	sub	sp, #16
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
	uint8_t i;
	for( i = 0 ; i<PASS_LEN; i++ )
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	73fb      	strb	r3, [r7, #15]
 8000a10:	e016      	b.n	8000a40 <getPassword+0x3c>
	{
		xQueueReceive(Q_keypad,&password[i],portMAX_DELAY);
 8000a12:	4b0f      	ldr	r3, [pc, #60]	; (8000a50 <getPassword+0x4c>)
 8000a14:	6818      	ldr	r0, [r3, #0]
 8000a16:	7bfb      	ldrb	r3, [r7, #15]
 8000a18:	687a      	ldr	r2, [r7, #4]
 8000a1a:	18d1      	adds	r1, r2, r3
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	f04f 32ff 	mov.w	r2, #4294967295
 8000a22:	f002 fa61 	bl	8002ee8 <xQueueGenericReceive>
		vTaskDelay(1000);
 8000a26:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a2a:	f002 fda9 	bl	8003580 <vTaskDelay>
		LCD_DispCharXY(1,i,'*');
 8000a2e:	7bfb      	ldrb	r3, [r7, #15]
 8000a30:	222a      	movs	r2, #42	; 0x2a
 8000a32:	4619      	mov	r1, r3
 8000a34:	2001      	movs	r0, #1
 8000a36:	f000 fc64 	bl	8001302 <LCD_DispCharXY>
	for( i = 0 ; i<PASS_LEN; i++ )
 8000a3a:	7bfb      	ldrb	r3, [r7, #15]
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	73fb      	strb	r3, [r7, #15]
 8000a40:	7bfb      	ldrb	r3, [r7, #15]
 8000a42:	2b04      	cmp	r3, #4
 8000a44:	d9e5      	bls.n	8000a12 <getPassword+0xe>
	}
}
 8000a46:	bf00      	nop
 8000a48:	3710      	adds	r7, #16
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	20003dfc 	.word	0x20003dfc

08000a54 <confirmPassword>:

uint8_t confirmPassword( char const * password )
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b084      	sub	sp, #16
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	73fb      	strb	r3, [r7, #15]
	uint8_t result = CONFIRM_SUCCESS;
 8000a60:	2301      	movs	r3, #1
 8000a62:	73bb      	strb	r3, [r7, #14]
	uint8_t new_key;

	for( i = 0; i<PASS_LEN; i++ )
 8000a64:	2300      	movs	r3, #0
 8000a66:	73fb      	strb	r3, [r7, #15]
 8000a68:	e01e      	b.n	8000aa8 <confirmPassword+0x54>
	{
		xQueueReceive(Q_keypad,&new_key,portMAX_DELAY);
 8000a6a:	4b13      	ldr	r3, [pc, #76]	; (8000ab8 <confirmPassword+0x64>)
 8000a6c:	6818      	ldr	r0, [r3, #0]
 8000a6e:	f107 010d 	add.w	r1, r7, #13
 8000a72:	2300      	movs	r3, #0
 8000a74:	f04f 32ff 	mov.w	r2, #4294967295
 8000a78:	f002 fa36 	bl	8002ee8 <xQueueGenericReceive>
		vTaskDelay(1000);
 8000a7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a80:	f002 fd7e 	bl	8003580 <vTaskDelay>
		LCD_DispCharXY(1,i,'*');
 8000a84:	7bfb      	ldrb	r3, [r7, #15]
 8000a86:	222a      	movs	r2, #42	; 0x2a
 8000a88:	4619      	mov	r1, r3
 8000a8a:	2001      	movs	r0, #1
 8000a8c:	f000 fc39 	bl	8001302 <LCD_DispCharXY>
		if( new_key != password[i] )
 8000a90:	7bfb      	ldrb	r3, [r7, #15]
 8000a92:	687a      	ldr	r2, [r7, #4]
 8000a94:	4413      	add	r3, r2
 8000a96:	781a      	ldrb	r2, [r3, #0]
 8000a98:	7b7b      	ldrb	r3, [r7, #13]
 8000a9a:	429a      	cmp	r2, r3
 8000a9c:	d001      	beq.n	8000aa2 <confirmPassword+0x4e>
		{
			result = CONFIRM_FAIL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	73bb      	strb	r3, [r7, #14]
	for( i = 0; i<PASS_LEN; i++ )
 8000aa2:	7bfb      	ldrb	r3, [r7, #15]
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	73fb      	strb	r3, [r7, #15]
 8000aa8:	7bfb      	ldrb	r3, [r7, #15]
 8000aaa:	2b04      	cmp	r3, #4
 8000aac:	d9dd      	bls.n	8000a6a <confirmPassword+0x16>
		}
	}
	return result;
 8000aae:	7bbb      	ldrb	r3, [r7, #14]
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3710      	adds	r7, #16
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	20003dfc 	.word	0x20003dfc

08000abc <FirstTimePassword>:


void FirstTimePassword(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	71fb      	strb	r3, [r7, #7]
	do
	{
		LCD_Clear();
 8000ac6:	f000 fb7b 	bl	80011c0 <LCD_Clear>
		LCD_DispStrXY(0,0,"Enter pass: ");
 8000aca:	4a1d      	ldr	r2, [pc, #116]	; (8000b40 <FirstTimePassword+0x84>)
 8000acc:	2100      	movs	r1, #0
 8000ace:	2000      	movs	r0, #0
 8000ad0:	f000 fc49 	bl	8001366 <LCD_DispStrXY>
		getPassword( g_myPassword );
 8000ad4:	481b      	ldr	r0, [pc, #108]	; (8000b44 <FirstTimePassword+0x88>)
 8000ad6:	f7ff ff95 	bl	8000a04 <getPassword>
		LCD_Clear();
 8000ada:	f000 fb71 	bl	80011c0 <LCD_Clear>
		LCD_DispStrXY(0,0,"Confirm pass: ");
 8000ade:	4a1a      	ldr	r2, [pc, #104]	; (8000b48 <FirstTimePassword+0x8c>)
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	2000      	movs	r0, #0
 8000ae4:	f000 fc3f 	bl	8001366 <LCD_DispStrXY>
	}
	while( confirmPassword( g_myPassword ) != CONFIRM_SUCCESS );
 8000ae8:	4816      	ldr	r0, [pc, #88]	; (8000b44 <FirstTimePassword+0x88>)
 8000aea:	f7ff ffb3 	bl	8000a54 <confirmPassword>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b01      	cmp	r3, #1
 8000af2:	d1e8      	bne.n	8000ac6 <FirstTimePassword+0xa>

	LCD_Clear();
 8000af4:	f000 fb64 	bl	80011c0 <LCD_Clear>
	LCD_DispStrXY(0,0,"Success ");
 8000af8:	4a14      	ldr	r2, [pc, #80]	; (8000b4c <FirstTimePassword+0x90>)
 8000afa:	2100      	movs	r1, #0
 8000afc:	2000      	movs	r0, #0
 8000afe:	f000 fc32 	bl	8001366 <LCD_DispStrXY>
	delayMs(2000);
 8000b02:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000b06:	f003 fb9d 	bl	8004244 <delayMs>
	EEPROM_WriteByte(0xFF, PASSWORD_SAVED );
 8000b0a:	2152      	movs	r1, #82	; 0x52
 8000b0c:	20ff      	movs	r0, #255	; 0xff
 8000b0e:	f000 fa8b 	bl	8001028 <EEPROM_WriteByte>
	/* Add the new password to the EEPROM */
	for(i=0; i<PASS_LEN; i++)
 8000b12:	2300      	movs	r3, #0
 8000b14:	71fb      	strb	r3, [r7, #7]
 8000b16:	e00c      	b.n	8000b32 <FirstTimePassword+0x76>
	{
		EEPROM_WriteByte(0xF0+i,g_myPassword[i]);
 8000b18:	79fb      	ldrb	r3, [r7, #7]
 8000b1a:	b29b      	uxth	r3, r3
 8000b1c:	33f0      	adds	r3, #240	; 0xf0
 8000b1e:	b298      	uxth	r0, r3
 8000b20:	79fb      	ldrb	r3, [r7, #7]
 8000b22:	4a08      	ldr	r2, [pc, #32]	; (8000b44 <FirstTimePassword+0x88>)
 8000b24:	5cd3      	ldrb	r3, [r2, r3]
 8000b26:	4619      	mov	r1, r3
 8000b28:	f000 fa7e 	bl	8001028 <EEPROM_WriteByte>
	for(i=0; i<PASS_LEN; i++)
 8000b2c:	79fb      	ldrb	r3, [r7, #7]
 8000b2e:	3301      	adds	r3, #1
 8000b30:	71fb      	strb	r3, [r7, #7]
 8000b32:	79fb      	ldrb	r3, [r7, #7]
 8000b34:	2b04      	cmp	r3, #4
 8000b36:	d9ef      	bls.n	8000b18 <FirstTimePassword+0x5c>
	}
}
 8000b38:	bf00      	nop
 8000b3a:	3708      	adds	r7, #8
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	080047e4 	.word	0x080047e4
 8000b44:	20003dec 	.word	0x20003dec
 8000b48:	080047f4 	.word	0x080047f4
 8000b4c:	08004804 	.word	0x08004804

08000b50 <SavedPassword>:


void SavedPassword(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
	uint8_t i = 0;
 8000b56:	2300      	movs	r3, #0
 8000b58:	71bb      	strb	r3, [r7, #6]
	uint8_t Password_count = 0;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	71fb      	strb	r3, [r7, #7]
	for(i=0; i<PASS_LEN; i++)
	{
		EEPROM_ReadByte(0xF0+i,&g_myPassword[i]);
	}
	*/
	LCD_Clear();
 8000b5e:	f000 fb2f 	bl	80011c0 <LCD_Clear>
	LCD_DispStrXY(0,0,"Check pass: ");
 8000b62:	4a1c      	ldr	r2, [pc, #112]	; (8000bd4 <SavedPassword+0x84>)
 8000b64:	2100      	movs	r1, #0
 8000b66:	2000      	movs	r0, #0
 8000b68:	f000 fbfd 	bl	8001366 <LCD_DispStrXY>
	while( (confirmPassword(g_myPassword) != CONFIRM_SUCCESS ) )
 8000b6c:	e01d      	b.n	8000baa <SavedPassword+0x5a>
	{
		/* Check if the user entered it incorrectly or not in 3 times */
		if( Password_count >=3 )
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	2b02      	cmp	r3, #2
 8000b72:	d910      	bls.n	8000b96 <SavedPassword+0x46>
		{
			LCD_Clear();
 8000b74:	f000 fb24 	bl	80011c0 <LCD_Clear>
			LCD_DispStrXY(0,0,"Unauthorized ");
 8000b78:	4a17      	ldr	r2, [pc, #92]	; (8000bd8 <SavedPassword+0x88>)
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	2000      	movs	r0, #0
 8000b7e:	f000 fbf2 	bl	8001366 <LCD_DispStrXY>
			Buz_On();
 8000b82:	f000 fc21 	bl	80013c8 <Buz_On>
			vTaskDelay(5000);
 8000b86:	f241 3088 	movw	r0, #5000	; 0x1388
 8000b8a:	f002 fcf9 	bl	8003580 <vTaskDelay>
			Buz_Off();
 8000b8e:	f000 fc2b 	bl	80013e8 <Buz_Off>
			Password_count = 0;
 8000b92:	2300      	movs	r3, #0
 8000b94:	71fb      	strb	r3, [r7, #7]
		}
		Password_count++;
 8000b96:	79fb      	ldrb	r3, [r7, #7]
 8000b98:	3301      	adds	r3, #1
 8000b9a:	71fb      	strb	r3, [r7, #7]
		LCD_Clear();
 8000b9c:	f000 fb10 	bl	80011c0 <LCD_Clear>
		LCD_DispStrXY(0,0,"Check pass: ");
 8000ba0:	4a0c      	ldr	r2, [pc, #48]	; (8000bd4 <SavedPassword+0x84>)
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	2000      	movs	r0, #0
 8000ba6:	f000 fbde 	bl	8001366 <LCD_DispStrXY>
	while( (confirmPassword(g_myPassword) != CONFIRM_SUCCESS ) )
 8000baa:	480c      	ldr	r0, [pc, #48]	; (8000bdc <SavedPassword+0x8c>)
 8000bac:	f7ff ff52 	bl	8000a54 <confirmPassword>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b01      	cmp	r3, #1
 8000bb4:	d1db      	bne.n	8000b6e <SavedPassword+0x1e>
	}
	LCD_Clear();
 8000bb6:	f000 fb03 	bl	80011c0 <LCD_Clear>
	LCD_DispStrXY(0,0,"Confirmed ");
 8000bba:	4a09      	ldr	r2, [pc, #36]	; (8000be0 <SavedPassword+0x90>)
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	2000      	movs	r0, #0
 8000bc0:	f000 fbd1 	bl	8001366 <LCD_DispStrXY>
	vTaskDelay(2000);
 8000bc4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000bc8:	f002 fcda 	bl	8003580 <vTaskDelay>

}
 8000bcc:	bf00      	nop
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	08004810 	.word	0x08004810
 8000bd8:	08004820 	.word	0x08004820
 8000bdc:	20003dec 	.word	0x20003dec
 8000be0:	08004830 	.word	0x08004830

08000be4 <ChangePassword>:

void ChangePassword(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
	SavedPassword();
 8000be8:	f7ff ffb2 	bl	8000b50 <SavedPassword>
	FirstTimePassword();
 8000bec:	f7ff ff66 	bl	8000abc <FirstTimePassword>
}
 8000bf0:	bf00      	nop
 8000bf2:	bd80      	pop	{r7, pc}

08000bf4 <DoorLock>:

void DoorLock(void){
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
	uint8_t key = 0;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	71fb      	strb	r3, [r7, #7]

	/*LCD_displayXY(0,0,"1. Enter pw");
	 * LCD_dispalyXY(1,0,"2. Change pw");
	 *
	 */
	LCD_Clear();
 8000bfe:	f000 fadf 	bl	80011c0 <LCD_Clear>
	LCD_DispStrXY(0,0,"4. Enter PW");
 8000c02:	4a23      	ldr	r2, [pc, #140]	; (8000c90 <DoorLock+0x9c>)
 8000c04:	2100      	movs	r1, #0
 8000c06:	2000      	movs	r0, #0
 8000c08:	f000 fbad 	bl	8001366 <LCD_DispStrXY>
	LCD_DispStrXY(1,0,"5. Change PW");
 8000c0c:	4a21      	ldr	r2, [pc, #132]	; (8000c94 <DoorLock+0xa0>)
 8000c0e:	2100      	movs	r1, #0
 8000c10:	2001      	movs	r0, #1
 8000c12:	f000 fba8 	bl	8001366 <LCD_DispStrXY>

	xQueueReceive(Q_keypad,&key,portMAX_DELAY);
 8000c16:	4b20      	ldr	r3, [pc, #128]	; (8000c98 <DoorLock+0xa4>)
 8000c18:	6818      	ldr	r0, [r3, #0]
 8000c1a:	1df9      	adds	r1, r7, #7
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	f04f 32ff 	mov.w	r2, #4294967295
 8000c22:	f002 f961 	bl	8002ee8 <xQueueGenericReceive>
	vTaskDelay(1000);
 8000c26:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c2a:	f002 fca9 	bl	8003580 <vTaskDelay>
	switch(key)
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	2b04      	cmp	r3, #4
 8000c32:	d002      	beq.n	8000c3a <DoorLock+0x46>
 8000c34:	2b05      	cmp	r3, #5
 8000c36:	d023      	beq.n	8000c80 <DoorLock+0x8c>

	break;
	case 5: ChangePassword();
	break;
	default:
		break;
 8000c38:	e025      	b.n	8000c86 <DoorLock+0x92>
	case 4: SavedPassword();
 8000c3a:	f7ff ff89 	bl	8000b50 <SavedPassword>
	xEventGroupSetBits(egOutput,E_RELAY);
 8000c3e:	4b17      	ldr	r3, [pc, #92]	; (8000c9c <DoorLock+0xa8>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	2180      	movs	r1, #128	; 0x80
 8000c44:	4618      	mov	r0, r3
 8000c46:	f001 fa8b 	bl	8002160 <xEventGroupSetBits>
	LCD_Clear();
 8000c4a:	f000 fab9 	bl	80011c0 <LCD_Clear>
	LCD_DispStr("House is opened");
 8000c4e:	4814      	ldr	r0, [pc, #80]	; (8000ca0 <DoorLock+0xac>)
 8000c50:	f000 fb6e 	bl	8001330 <LCD_DispStr>
	vTaskDelay(2000);
 8000c54:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000c58:	f002 fc92 	bl	8003580 <vTaskDelay>
	xEventGroupSetBits(egOutput,E_RELAY);
 8000c5c:	4b0f      	ldr	r3, [pc, #60]	; (8000c9c <DoorLock+0xa8>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	2180      	movs	r1, #128	; 0x80
 8000c62:	4618      	mov	r0, r3
 8000c64:	f001 fa7c 	bl	8002160 <xEventGroupSetBits>
	LCD_Clear();
 8000c68:	f000 faaa 	bl	80011c0 <LCD_Clear>
	LCD_DispStr("House is closed");
 8000c6c:	480d      	ldr	r0, [pc, #52]	; (8000ca4 <DoorLock+0xb0>)
 8000c6e:	f000 fb5f 	bl	8001330 <LCD_DispStr>
	xEventGroupSetBits(egOutput,E_REC_LED);
 8000c72:	4b0a      	ldr	r3, [pc, #40]	; (8000c9c <DoorLock+0xa8>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	2110      	movs	r1, #16
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f001 fa71 	bl	8002160 <xEventGroupSetBits>
	break;
 8000c7e:	e002      	b.n	8000c86 <DoorLock+0x92>
	case 5: ChangePassword();
 8000c80:	f7ff ffb0 	bl	8000be4 <ChangePassword>
	break;
 8000c84:	bf00      	nop
	}

	/* get the password from EEPROM */


}
 8000c86:	bf00      	nop
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	0800483c 	.word	0x0800483c
 8000c94:	08004848 	.word	0x08004848
 8000c98:	20003dfc 	.word	0x20003dfc
 8000c9c:	20003df4 	.word	0x20003df4
 8000ca0:	08004858 	.word	0x08004858
 8000ca4:	08004868 	.word	0x08004868

08000ca8 <Temp_Sensor>:
//////////////////////////////////////////////////////////////////////////////////////////////////////
void Temp_Sensor(void){
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08a      	sub	sp, #40	; 0x28
 8000cac:	af00      	add	r7, sp, #0
	uint32_t adcValue = 0;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t str[30];
	ADC1_SelectChannel(CH1);
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	f000 fe44 	bl	8001940 <ADC1_SelectChannel>

	/* 4096 > 3.3v
	 * adc_read > x
	 * 3300 mv / 10
	 */
	adcValue = ADC1_Read();
 8000cb8:	f000 fe80 	bl	80019bc <ADC1_Read>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	627b      	str	r3, [r7, #36]	; 0x24
	adcValue = adcValue*(330)/4096;
 8000cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc2:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8000cc6:	fb02 f303 	mul.w	r3, r2, r3
 8000cca:	0b1b      	lsrs	r3, r3, #12
 8000ccc:	627b      	str	r3, [r7, #36]	; 0x24

	sprintf(str,"Room Temp = %d\n ",adcValue);
 8000cce:	1d3b      	adds	r3, r7, #4
 8000cd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cd2:	4915      	ldr	r1, [pc, #84]	; (8000d28 <Temp_Sensor+0x80>)
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f003 fd33 	bl	8004740 <siprintf>
	Uart_SendString(USART2,str);
 8000cda:	1d3b      	adds	r3, r7, #4
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4813      	ldr	r0, [pc, #76]	; (8000d2c <Temp_Sensor+0x84>)
 8000ce0:	f001 f900 	bl	8001ee4 <Uart_SendString>

	if(adcValue>TEMP_THRESH){
 8000ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce6:	2b19      	cmp	r3, #25
 8000ce8:	d913      	bls.n	8000d12 <Temp_Sensor+0x6a>
		Buz_On();
 8000cea:	f000 fb6d 	bl	80013c8 <Buz_On>
		//if(WIFI_SendCmd("AT+CIPSEND=29\r\n","OK",1000)){
			sprintf(str,"The Temp. is too high  %d  C\n",adcValue);
 8000cee:	1d3b      	adds	r3, r7, #4
 8000cf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cf2:	490f      	ldr	r1, [pc, #60]	; (8000d30 <Temp_Sensor+0x88>)
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f003 fd23 	bl	8004740 <siprintf>
			Uart_SendString(USART2,str);
 8000cfa:	1d3b      	adds	r3, r7, #4
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	480b      	ldr	r0, [pc, #44]	; (8000d2c <Temp_Sensor+0x84>)
 8000d00:	f001 f8f0 	bl	8001ee4 <Uart_SendString>
		//}
		vTaskDelay(3000);
 8000d04:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000d08:	f002 fc3a 	bl	8003580 <vTaskDelay>
		Buz_Off();
 8000d0c:	f000 fb6c 	bl	80013e8 <Buz_Off>
 8000d10:	e001      	b.n	8000d16 <Temp_Sensor+0x6e>
	}else{
		Buz_Off();
 8000d12:	f000 fb69 	bl	80013e8 <Buz_Off>
	}
	vTaskDelay(5000);
 8000d16:	f241 3088 	movw	r0, #5000	; 0x1388
 8000d1a:	f002 fc31 	bl	8003580 <vTaskDelay>

}
 8000d1e:	bf00      	nop
 8000d20:	3728      	adds	r7, #40	; 0x28
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	08004878 	.word	0x08004878
 8000d2c:	40004400 	.word	0x40004400
 8000d30:	0800488c 	.word	0x0800488c

08000d34 <System_Init>:
/////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////
void System_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0


	RCC_DeInit();				/* Adapt PLL to the internal 16 MHz RC oscillator */
 8000d38:	f000 fdb6 	bl	80018a8 <RCC_DeInit>
	SystemCoreClockUpdate();	/* Update SystemCoreClock */
 8000d3c:	f003 fb28 	bl	8004390 <SystemCoreClockUpdate>
	LCD_Init();
 8000d40:	f000 fa90 	bl	8001264 <LCD_Init>
	Keypad_Init();
 8000d44:	f000 fd12 	bl	800176c <Keypad_Init>
	EEPROM_Init();
 8000d48:	f000 f968 	bl	800101c <EEPROM_Init>
	Buz_Init();
 8000d4c:	f000 fb20 	bl	8001390 <Buz_Init>
	ADC1_Init();
 8000d50:	f000 fdd8 	bl	8001904 <ADC1_Init>
	Relay_Init();
 8000d54:	f000 fb58 	bl	8001408 <Relay_Init>
	Leds_Init(0xFF);
 8000d58:	20ff      	movs	r0, #255	; 0xff
 8000d5a:	f000 fb91 	bl	8001480 <Leds_Init>
	Uart_Init(USART2,9600);
 8000d5e:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8000d62:	4808      	ldr	r0, [pc, #32]	; (8000d84 <System_Init+0x50>)
 8000d64:	f000 ff82 	bl	8001c6c <Uart_Init>
	Btn_Init(BTN_RIGHT);
 8000d68:	2001      	movs	r0, #1
 8000d6a:	f000 fbef 	bl	800154c <Btn_Init>
	Btn_Init(BTN_LEFT);
 8000d6e:	2002      	movs	r0, #2
 8000d70:	f000 fbec 	bl	800154c <Btn_Init>
	Btn_Init(BTN_UP);
 8000d74:	2003      	movs	r0, #3
 8000d76:	f000 fbe9 	bl	800154c <Btn_Init>
	Btn_Init(BTN_DOWN);
 8000d7a:	2004      	movs	r0, #4
 8000d7c:	f000 fbe6 	bl	800154c <Btn_Init>
}
 8000d80:	bf00      	nop
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	40004400 	.word	0x40004400

08000d88 <Task_Init>:
EventGroupHandle_t	egOutput;
EventBits_t			eOut_Bits;

QueueHandle_t		Q_keypad;

void Task_Init(void){
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af02      	add	r7, sp, #8

	/*	Objects Initialization	*/
	egOutput = xEventGroupCreate();
 8000d8e:	f001 f8d1 	bl	8001f34 <xEventGroupCreate>
 8000d92:	4602      	mov	r2, r0
 8000d94:	4b1b      	ldr	r3, [pc, #108]	; (8000e04 <Task_Init+0x7c>)
 8000d96:	601a      	str	r2, [r3, #0]
	Q_keypad = xQueueCreate(PASS_LEN , sizeof(char));
 8000d98:	2200      	movs	r2, #0
 8000d9a:	2101      	movs	r1, #1
 8000d9c:	2005      	movs	r0, #5
 8000d9e:	f001 ff51 	bl	8002c44 <xQueueGenericCreate>
 8000da2:	4602      	mov	r2, r0
 8000da4:	4b18      	ldr	r3, [pc, #96]	; (8000e08 <Task_Init+0x80>)
 8000da6:	601a      	str	r2, [r3, #0]

	/* Task Creation */
	xTaskCreate(T_Input,NULL,100,NULL,1,NULL);
 8000da8:	2300      	movs	r3, #0
 8000daa:	9301      	str	r3, [sp, #4]
 8000dac:	2301      	movs	r3, #1
 8000dae:	9300      	str	r3, [sp, #0]
 8000db0:	2300      	movs	r3, #0
 8000db2:	2264      	movs	r2, #100	; 0x64
 8000db4:	2100      	movs	r1, #0
 8000db6:	4815      	ldr	r0, [pc, #84]	; (8000e0c <Task_Init+0x84>)
 8000db8:	f002 fab8 	bl	800332c <xTaskCreate>
	xTaskCreate(T_Temp,NULL,100,NULL,6,NULL);
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	9301      	str	r3, [sp, #4]
 8000dc0:	2306      	movs	r3, #6
 8000dc2:	9300      	str	r3, [sp, #0]
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	2264      	movs	r2, #100	; 0x64
 8000dc8:	2100      	movs	r1, #0
 8000dca:	4811      	ldr	r0, [pc, #68]	; (8000e10 <Task_Init+0x88>)
 8000dcc:	f002 faae 	bl	800332c <xTaskCreate>
	xTaskCreate(T_Door_Lock,NULL,100,NULL,5,NULL);
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	9301      	str	r3, [sp, #4]
 8000dd4:	2305      	movs	r3, #5
 8000dd6:	9300      	str	r3, [sp, #0]
 8000dd8:	2300      	movs	r3, #0
 8000dda:	2264      	movs	r2, #100	; 0x64
 8000ddc:	2100      	movs	r1, #0
 8000dde:	480d      	ldr	r0, [pc, #52]	; (8000e14 <Task_Init+0x8c>)
 8000de0:	f002 faa4 	bl	800332c <xTaskCreate>
	xTaskCreate(T_Lights,NULL,100,NULL,4,NULL);
 8000de4:	2300      	movs	r3, #0
 8000de6:	9301      	str	r3, [sp, #4]
 8000de8:	2304      	movs	r3, #4
 8000dea:	9300      	str	r3, [sp, #0]
 8000dec:	2300      	movs	r3, #0
 8000dee:	2264      	movs	r2, #100	; 0x64
 8000df0:	2100      	movs	r1, #0
 8000df2:	4809      	ldr	r0, [pc, #36]	; (8000e18 <Task_Init+0x90>)
 8000df4:	f002 fa9a 	bl	800332c <xTaskCreate>
	//xTaskCreate(T_Network,NULL,100,NULL,3,NULL);
	//xTaskCreate(T_Memory,NULL,100,NULL,2,NULL);


	/*	Start Scheduler	*/
	vTaskStartScheduler();
 8000df8:	f002 fbf6 	bl	80035e8 <vTaskStartScheduler>
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	20003df4 	.word	0x20003df4
 8000e08:	20003dfc 	.word	0x20003dfc
 8000e0c:	08000e1d 	.word	0x08000e1d
 8000e10:	08000edd 	.word	0x08000edd
 8000e14:	08000eed 	.word	0x08000eed
 8000e18:	08000f75 	.word	0x08000f75

08000e1c <T_Input>:

void T_Input (void* pvData)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b084      	sub	sp, #16
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
	uint8_t key ;
	while(1)
	{
		if( Keypad_GetKey() != 0){
 8000e24:	f000 fcda 	bl	80017dc <Keypad_GetKey>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d00c      	beq.n	8000e48 <T_Input+0x2c>

			key = Keypad_GetKey();
 8000e2e:	f000 fcd5 	bl	80017dc <Keypad_GetKey>
 8000e32:	4603      	mov	r3, r0
 8000e34:	73fb      	strb	r3, [r7, #15]
			xQueueSend(Q_keypad,&key,1000);
 8000e36:	4b27      	ldr	r3, [pc, #156]	; (8000ed4 <T_Input+0xb8>)
 8000e38:	6818      	ldr	r0, [r3, #0]
 8000e3a:	f107 010f 	add.w	r1, r7, #15
 8000e3e:	2300      	movs	r3, #0
 8000e40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e44:	f001 ff56 	bl	8002cf4 <xQueueGenericSend>
		}
		if(Btn_isPressed(BTN_RIGHT))
 8000e48:	2001      	movs	r0, #1
 8000e4a:	f000 fc21 	bl	8001690 <Btn_isPressed>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d00f      	beq.n	8000e74 <T_Input+0x58>
			{
				xEventGroupSetBits(egOutput,E_BTN_RIGHT);
 8000e54:	4b20      	ldr	r3, [pc, #128]	; (8000ed8 <T_Input+0xbc>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2101      	movs	r1, #1
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f001 f980 	bl	8002160 <xEventGroupSetBits>
				while(Btn_isPressed(BTN_RIGHT))
 8000e60:	e002      	b.n	8000e68 <T_Input+0x4c>
				{
					vTaskDelay(10);
 8000e62:	200a      	movs	r0, #10
 8000e64:	f002 fb8c 	bl	8003580 <vTaskDelay>
				while(Btn_isPressed(BTN_RIGHT))
 8000e68:	2001      	movs	r0, #1
 8000e6a:	f000 fc11 	bl	8001690 <Btn_isPressed>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d1f6      	bne.n	8000e62 <T_Input+0x46>
				}
			}
		if(Btn_isPressed(BTN_LEFT))
 8000e74:	2002      	movs	r0, #2
 8000e76:	f000 fc0b 	bl	8001690 <Btn_isPressed>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d00f      	beq.n	8000ea0 <T_Input+0x84>
			{
				xEventGroupSetBits(egOutput,E_BTN_LEFT);
 8000e80:	4b15      	ldr	r3, [pc, #84]	; (8000ed8 <T_Input+0xbc>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	2102      	movs	r1, #2
 8000e86:	4618      	mov	r0, r3
 8000e88:	f001 f96a 	bl	8002160 <xEventGroupSetBits>
				while(Btn_isPressed(BTN_LEFT))
 8000e8c:	e002      	b.n	8000e94 <T_Input+0x78>
				{
					vTaskDelay(10);
 8000e8e:	200a      	movs	r0, #10
 8000e90:	f002 fb76 	bl	8003580 <vTaskDelay>
				while(Btn_isPressed(BTN_LEFT))
 8000e94:	2002      	movs	r0, #2
 8000e96:	f000 fbfb 	bl	8001690 <Btn_isPressed>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d1f6      	bne.n	8000e8e <T_Input+0x72>
				}
			}
		if(Btn_isPressed(BTN_UP))
 8000ea0:	2003      	movs	r0, #3
 8000ea2:	f000 fbf5 	bl	8001690 <Btn_isPressed>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d00f      	beq.n	8000ecc <T_Input+0xb0>
			{
				xEventGroupSetBits(egOutput,E_BTN_UP);
 8000eac:	4b0a      	ldr	r3, [pc, #40]	; (8000ed8 <T_Input+0xbc>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	2104      	movs	r1, #4
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f001 f954 	bl	8002160 <xEventGroupSetBits>
				while(Btn_isPressed(BTN_UP))
 8000eb8:	e002      	b.n	8000ec0 <T_Input+0xa4>
				{
					vTaskDelay(10);
 8000eba:	200a      	movs	r0, #10
 8000ebc:	f002 fb60 	bl	8003580 <vTaskDelay>
				while(Btn_isPressed(BTN_UP))
 8000ec0:	2003      	movs	r0, #3
 8000ec2:	f000 fbe5 	bl	8001690 <Btn_isPressed>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d1f6      	bne.n	8000eba <T_Input+0x9e>
				}
			}

		vTaskDelay(100);
 8000ecc:	2064      	movs	r0, #100	; 0x64
 8000ece:	f002 fb57 	bl	8003580 <vTaskDelay>
		if( Keypad_GetKey() != 0){
 8000ed2:	e7a7      	b.n	8000e24 <T_Input+0x8>
 8000ed4:	20003dfc 	.word	0x20003dfc
 8000ed8:	20003df4 	.word	0x20003df4

08000edc <T_Temp>:

	}
}

void T_Temp (void* pvData)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
	while(1)
	{
		Temp_Sensor();
 8000ee4:	f7ff fee0 	bl	8000ca8 <Temp_Sensor>
 8000ee8:	e7fc      	b.n	8000ee4 <T_Temp+0x8>
	...

08000eec <T_Door_Lock>:
	}
}

void T_Door_Lock (void* pvData)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b086      	sub	sp, #24
 8000ef0:	af02      	add	r7, sp, #8
 8000ef2:	6078      	str	r0, [r7, #4]
	uint8_t EEPROM_checkByte = 0;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	73bb      	strb	r3, [r7, #14]
	EEPROM_ReadByte(0xFF,&EEPROM_checkByte);
 8000ef8:	f107 030e 	add.w	r3, r7, #14
 8000efc:	4619      	mov	r1, r3
 8000efe:	20ff      	movs	r0, #255	; 0xff
 8000f00:	f000 f8c0 	bl	8001084 <EEPROM_ReadByte>
	/* If its first time initializing the system, ask the user for a new password */
	if( EEPROM_checkByte != PASSWORD_SAVED )
 8000f04:	7bbb      	ldrb	r3, [r7, #14]
 8000f06:	2b52      	cmp	r3, #82	; 0x52
 8000f08:	d002      	beq.n	8000f10 <T_Door_Lock+0x24>
	{
		FirstTimePassword();
 8000f0a:	f7ff fdd7 	bl	8000abc <FirstTimePassword>
 8000f0e:	e012      	b.n	8000f36 <T_Door_Lock+0x4a>
	}
	else{
		for(uint8_t i=0; i<PASS_LEN; i++)
 8000f10:	2300      	movs	r3, #0
 8000f12:	73fb      	strb	r3, [r7, #15]
 8000f14:	e00c      	b.n	8000f30 <T_Door_Lock+0x44>
			{
				EEPROM_ReadByte(0xF0+i,&g_myPassword[i]);
 8000f16:	7bfb      	ldrb	r3, [r7, #15]
 8000f18:	b29b      	uxth	r3, r3
 8000f1a:	33f0      	adds	r3, #240	; 0xf0
 8000f1c:	b298      	uxth	r0, r3
 8000f1e:	7bfb      	ldrb	r3, [r7, #15]
 8000f20:	4a11      	ldr	r2, [pc, #68]	; (8000f68 <T_Door_Lock+0x7c>)
 8000f22:	4413      	add	r3, r2
 8000f24:	4619      	mov	r1, r3
 8000f26:	f000 f8ad 	bl	8001084 <EEPROM_ReadByte>
		for(uint8_t i=0; i<PASS_LEN; i++)
 8000f2a:	7bfb      	ldrb	r3, [r7, #15]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	73fb      	strb	r3, [r7, #15]
 8000f30:	7bfb      	ldrb	r3, [r7, #15]
 8000f32:	2b04      	cmp	r3, #4
 8000f34:	d9ef      	bls.n	8000f16 <T_Door_Lock+0x2a>
			}
	}

	while(1)
	{
		eOut_Bits = xEventGroupWaitBits(
 8000f36:	4b0d      	ldr	r3, [pc, #52]	; (8000f6c <T_Door_Lock+0x80>)
 8000f38:	6818      	ldr	r0, [r3, #0]
 8000f3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f3e:	9300      	str	r3, [sp, #0]
 8000f40:	2301      	movs	r3, #1
 8000f42:	2201      	movs	r2, #1
 8000f44:	2104      	movs	r1, #4
 8000f46:	f001 f80d 	bl	8001f64 <xEventGroupWaitBits>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	4b08      	ldr	r3, [pc, #32]	; (8000f70 <T_Door_Lock+0x84>)
 8000f4e:	601a      	str	r2, [r3, #0]
						1,
						1,
						1000
				);

		if(eOut_Bits & (E_BTN_UP))
 8000f50:	4b07      	ldr	r3, [pc, #28]	; (8000f70 <T_Door_Lock+0x84>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f003 0304 	and.w	r3, r3, #4
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <T_Door_Lock+0x74>
		{
			DoorLock();
 8000f5c:	f7ff fe4a 	bl	8000bf4 <DoorLock>
		}

		vTaskDelay(50);
 8000f60:	2032      	movs	r0, #50	; 0x32
 8000f62:	f002 fb0d 	bl	8003580 <vTaskDelay>
		eOut_Bits = xEventGroupWaitBits(
 8000f66:	e7e6      	b.n	8000f36 <T_Door_Lock+0x4a>
 8000f68:	20003dec 	.word	0x20003dec
 8000f6c:	20003df4 	.word	0x20003df4
 8000f70:	20003df8 	.word	0x20003df8

08000f74 <T_Lights>:

	}
}

void T_Lights (void* pvData)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af02      	add	r7, sp, #8
 8000f7a:	6078      	str	r0, [r7, #4]
	while(1)
	{

		eOut_Bits = xEventGroupWaitBits(
 8000f7c:	4b25      	ldr	r3, [pc, #148]	; (8001014 <T_Lights+0xa0>)
 8000f7e:	6818      	ldr	r0, [r3, #0]
 8000f80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f84:	9300      	str	r3, [sp, #0]
 8000f86:	2300      	movs	r3, #0
 8000f88:	2200      	movs	r2, #0
 8000f8a:	21fb      	movs	r1, #251	; 0xfb
 8000f8c:	f000 ffea 	bl	8001f64 <xEventGroupWaitBits>
 8000f90:	4602      	mov	r2, r0
 8000f92:	4b21      	ldr	r3, [pc, #132]	; (8001018 <T_Lights+0xa4>)
 8000f94:	601a      	str	r2, [r3, #0]
					0,
					0,
					1000
			);

			if(eOut_Bits & (E_BTN_RIGHT))
 8000f96:	4b20      	ldr	r3, [pc, #128]	; (8001018 <T_Lights+0xa4>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d008      	beq.n	8000fb4 <T_Lights+0x40>
				{
					Leds_Toggle(0x01);
 8000fa2:	2001      	movs	r0, #1
 8000fa4:	f000 fabe 	bl	8001524 <Leds_Toggle>
					xEventGroupClearBits(egOutput,E_BTN_RIGHT);
 8000fa8:	4b1a      	ldr	r3, [pc, #104]	; (8001014 <T_Lights+0xa0>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2101      	movs	r1, #1
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f001 f8a0 	bl	80020f4 <xEventGroupClearBits>
				}
			if(eOut_Bits & (E_BTN_LEFT))
 8000fb4:	4b18      	ldr	r3, [pc, #96]	; (8001018 <T_Lights+0xa4>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f003 0302 	and.w	r3, r3, #2
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d008      	beq.n	8000fd2 <T_Lights+0x5e>
				{
					Leds_Toggle(0x02);
 8000fc0:	2002      	movs	r0, #2
 8000fc2:	f000 faaf 	bl	8001524 <Leds_Toggle>
					xEventGroupClearBits(egOutput,E_BTN_LEFT);
 8000fc6:	4b13      	ldr	r3, [pc, #76]	; (8001014 <T_Lights+0xa0>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	2102      	movs	r1, #2
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f001 f891 	bl	80020f4 <xEventGroupClearBits>
				}

			if(eOut_Bits & (E_REC_LED))
 8000fd2:	4b11      	ldr	r3, [pc, #68]	; (8001018 <T_Lights+0xa4>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f003 0310 	and.w	r3, r3, #16
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d008      	beq.n	8000ff0 <T_Lights+0x7c>
			{
				Leds_On(0x01);
 8000fde:	2001      	movs	r0, #1
 8000fe0:	f000 fa76 	bl	80014d0 <Leds_On>
				xEventGroupClearBits(egOutput,E_REC_LED);
 8000fe4:	4b0b      	ldr	r3, [pc, #44]	; (8001014 <T_Lights+0xa0>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2110      	movs	r1, #16
 8000fea:	4618      	mov	r0, r3
 8000fec:	f001 f882 	bl	80020f4 <xEventGroupClearBits>
			}
			if(eOut_Bits & (E_RELAY))
 8000ff0:	4b09      	ldr	r3, [pc, #36]	; (8001018 <T_Lights+0xa4>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d007      	beq.n	800100c <T_Lights+0x98>
				{
					Relay_Toggle();
 8000ffc:	f000 fa30 	bl	8001460 <Relay_Toggle>
					xEventGroupClearBits(egOutput,E_RELAY);
 8001000:	4b04      	ldr	r3, [pc, #16]	; (8001014 <T_Lights+0xa0>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2180      	movs	r1, #128	; 0x80
 8001006:	4618      	mov	r0, r3
 8001008:	f001 f874 	bl	80020f4 <xEventGroupClearBits>
				}

			vTaskDelay(100);
 800100c:	2064      	movs	r0, #100	; 0x64
 800100e:	f002 fab7 	bl	8003580 <vTaskDelay>
		eOut_Bits = xEventGroupWaitBits(
 8001012:	e7b3      	b.n	8000f7c <T_Lights+0x8>
 8001014:	20003df4 	.word	0x20003df4
 8001018:	20003df8 	.word	0x20003df8

0800101c <EEPROM_Init>:
 *      Author: MahmoudH
 */

#include "EEPROM.h"

void EEPROM_Init(void){
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
	//I2C1_Init();
	TWI_Init();
 8001020:	f000 fce6 	bl	80019f0 <TWI_Init>
}
 8001024:	bf00      	nop
 8001026:	bd80      	pop	{r7, pc}

08001028 <EEPROM_WriteByte>:
void EEPROM_WriteByte(uint16_t romAddr, uint8_t dataByte){
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	460a      	mov	r2, r1
 8001032:	80fb      	strh	r3, [r7, #6]
 8001034:	4613      	mov	r3, r2
 8001036:	717b      	strb	r3, [r7, #5]
	/* Calculate: page:3, romAddr byte:8, slave byte */
	uint8_t page 			= ((romAddr&0x7FF)>>8);
 8001038:	88fb      	ldrh	r3, [r7, #6]
 800103a:	121b      	asrs	r3, r3, #8
 800103c:	b2db      	uxtb	r3, r3
 800103e:	f003 0307 	and.w	r3, r3, #7
 8001042:	73fb      	strb	r3, [r7, #15]
	uint8_t romAddrByte		= (uint8_t)romAddr;
 8001044:	88fb      	ldrh	r3, [r7, #6]
 8001046:	73bb      	strb	r3, [r7, #14]
	uint8_t slaveByte		= (0xA0) | (page<<1); /* default write */
 8001048:	7bfb      	ldrb	r3, [r7, #15]
 800104a:	005b      	lsls	r3, r3, #1
 800104c:	b25b      	sxtb	r3, r3
 800104e:	f063 035f 	orn	r3, r3, #95	; 0x5f
 8001052:	b25b      	sxtb	r3, r3
 8001054:	737b      	strb	r3, [r7, #13]
	I2C1_Start();
 8001056:	f000 fd43 	bl	8001ae0 <I2C1_Start>
	I2C1_WriteAddress(slaveByte);
 800105a:	7b7b      	ldrb	r3, [r7, #13]
 800105c:	4618      	mov	r0, r3
 800105e:	f000 fd85 	bl	8001b6c <I2C1_WriteAddress>
	I2C1_WriteData(romAddrByte);
 8001062:	7bbb      	ldrb	r3, [r7, #14]
 8001064:	4618      	mov	r0, r3
 8001066:	f000 fd67 	bl	8001b38 <I2C1_WriteData>
	I2C1_WriteData(dataByte);
 800106a:	797b      	ldrb	r3, [r7, #5]
 800106c:	4618      	mov	r0, r3
 800106e:	f000 fd63 	bl	8001b38 <I2C1_WriteData>
	I2C1_Stop();
 8001072:	f000 fd4f 	bl	8001b14 <I2C1_Stop>
	delayMs(15);
 8001076:	200f      	movs	r0, #15
 8001078:	f003 f8e4 	bl	8004244 <delayMs>
}
 800107c:	bf00      	nop
 800107e:	3710      	adds	r7, #16
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}

08001084 <EEPROM_ReadByte>:
void EEPROM_ReadByte(uint16_t romAddr, uint8_t* pDataByte){
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	6039      	str	r1, [r7, #0]
 800108e:	80fb      	strh	r3, [r7, #6]
	/* Calculate: page:3, romAddr byte:8, slave byte */
	uint8_t page 			= ((romAddr&0x7FF)>>8);
 8001090:	88fb      	ldrh	r3, [r7, #6]
 8001092:	121b      	asrs	r3, r3, #8
 8001094:	b2db      	uxtb	r3, r3
 8001096:	f003 0307 	and.w	r3, r3, #7
 800109a:	73fb      	strb	r3, [r7, #15]
	uint8_t romAddrByte		= (uint8_t)romAddr;
 800109c:	88fb      	ldrh	r3, [r7, #6]
 800109e:	73bb      	strb	r3, [r7, #14]
	uint8_t slaveByte		= (0xA0) | (page<<1); /* default write */
 80010a0:	7bfb      	ldrb	r3, [r7, #15]
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	b25b      	sxtb	r3, r3
 80010a6:	f063 035f 	orn	r3, r3, #95	; 0x5f
 80010aa:	b25b      	sxtb	r3, r3
 80010ac:	737b      	strb	r3, [r7, #13]
	I2C1_Start();
 80010ae:	f000 fd17 	bl	8001ae0 <I2C1_Start>
	I2C1_WriteAddress(slaveByte);
 80010b2:	7b7b      	ldrb	r3, [r7, #13]
 80010b4:	4618      	mov	r0, r3
 80010b6:	f000 fd59 	bl	8001b6c <I2C1_WriteAddress>
	I2C1_WriteData(romAddrByte);
 80010ba:	7bbb      	ldrb	r3, [r7, #14]
 80010bc:	4618      	mov	r0, r3
 80010be:	f000 fd3b 	bl	8001b38 <I2C1_WriteData>
	I2C1_Start();
 80010c2:	f000 fd0d 	bl	8001ae0 <I2C1_Start>
	I2C1_WriteAddress(slaveByte|1);
 80010c6:	7b7b      	ldrb	r3, [r7, #13]
 80010c8:	f043 0301 	orr.w	r3, r3, #1
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	4618      	mov	r0, r3
 80010d0:	f000 fd4c 	bl	8001b6c <I2C1_WriteAddress>
	(*pDataByte) = I2C1_ReadData();
 80010d4:	f000 fd66 	bl	8001ba4 <I2C1_ReadData>
 80010d8:	4603      	mov	r3, r0
 80010da:	461a      	mov	r2, r3
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	701a      	strb	r2, [r3, #0]
	I2C1_Stop();
 80010e0:	f000 fd18 	bl	8001b14 <I2C1_Stop>
	delayMs(15);
 80010e4:	200f      	movs	r0, #15
 80010e6:	f003 f8ad 	bl	8004244 <delayMs>
}
 80010ea:	bf00      	nop
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <LCD_GotoXY>:
/* Static Declarations */
static void LCD_GotoXY(uint8_t line, uint8_t col);
static void LCD_SendCMD(uint8_t cmd);
static void LCD_SendData(uint8_t data);

static void LCD_GotoXY(uint8_t line, uint8_t col){
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b082      	sub	sp, #8
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	4603      	mov	r3, r0
 80010fa:	460a      	mov	r2, r1
 80010fc:	71fb      	strb	r3, [r7, #7]
 80010fe:	4613      	mov	r3, r2
 8001100:	71bb      	strb	r3, [r7, #6]
	/* send command of DDRAM Address
	 * First Line: 	0x00
	 * Second Line: 0x40
	 * */
	if (line ==0){
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d106      	bne.n	8001116 <LCD_GotoXY+0x24>
		LCD_SendCMD(LCD_CMD_DDRAM + LCD_L1_ADDR +col );
 8001108:	79bb      	ldrb	r3, [r7, #6]
 800110a:	3b80      	subs	r3, #128	; 0x80
 800110c:	b2db      	uxtb	r3, r3
 800110e:	4618      	mov	r0, r3
 8001110:	f000 f80e 	bl	8001130 <LCD_SendCMD>
	}else if(line == 1){
		LCD_SendCMD(LCD_CMD_DDRAM + LCD_L2_ADDR +col );
	}
}
 8001114:	e008      	b.n	8001128 <LCD_GotoXY+0x36>
	}else if(line == 1){
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	2b01      	cmp	r3, #1
 800111a:	d105      	bne.n	8001128 <LCD_GotoXY+0x36>
		LCD_SendCMD(LCD_CMD_DDRAM + LCD_L2_ADDR +col );
 800111c:	79bb      	ldrb	r3, [r7, #6]
 800111e:	3b40      	subs	r3, #64	; 0x40
 8001120:	b2db      	uxtb	r3, r3
 8001122:	4618      	mov	r0, r3
 8001124:	f000 f804 	bl	8001130 <LCD_SendCMD>
}
 8001128:	bf00      	nop
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}

08001130 <LCD_SendCMD>:
static void LCD_SendCMD(uint8_t cmd){
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	71fb      	strb	r3, [r7, #7]
	 * Send low nibble cmd
	 * Start latching
	 * Delay for 40 micro sec
	 */
	/* Command Mode */
	LCD_GPIO->ODR			&= ~(1<<LCD_CTRL_RS);
 800113a:	4a20      	ldr	r2, [pc, #128]	; (80011bc <LCD_SendCMD+0x8c>)
 800113c:	4b1f      	ldr	r3, [pc, #124]	; (80011bc <LCD_SendCMD+0x8c>)
 800113e:	695b      	ldr	r3, [r3, #20]
 8001140:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001144:	6153      	str	r3, [r2, #20]
	/* Send Most 4 bits */
	LCD_GPIO->ODR			&= ~LCD_DATA_ODR_MASK;
 8001146:	4a1d      	ldr	r2, [pc, #116]	; (80011bc <LCD_SendCMD+0x8c>)
 8001148:	4b1c      	ldr	r3, [pc, #112]	; (80011bc <LCD_SendCMD+0x8c>)
 800114a:	695b      	ldr	r3, [r3, #20]
 800114c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001150:	6153      	str	r3, [r2, #20]
	LCD_GPIO->ODR			|=  ( (cmd >> 4) << LCD_DATA_SHIFT );
 8001152:	491a      	ldr	r1, [pc, #104]	; (80011bc <LCD_SendCMD+0x8c>)
 8001154:	4b19      	ldr	r3, [pc, #100]	; (80011bc <LCD_SendCMD+0x8c>)
 8001156:	695b      	ldr	r3, [r3, #20]
 8001158:	79fa      	ldrb	r2, [r7, #7]
 800115a:	0912      	lsrs	r2, r2, #4
 800115c:	b2d2      	uxtb	r2, r2
 800115e:	0312      	lsls	r2, r2, #12
 8001160:	4313      	orrs	r3, r2
 8001162:	614b      	str	r3, [r1, #20]

	LCD_GPIO->ODR			|=  (1<<LCD_CTRL_EN);
 8001164:	4a15      	ldr	r2, [pc, #84]	; (80011bc <LCD_SendCMD+0x8c>)
 8001166:	4b15      	ldr	r3, [pc, #84]	; (80011bc <LCD_SendCMD+0x8c>)
 8001168:	695b      	ldr	r3, [r3, #20]
 800116a:	f043 0320 	orr.w	r3, r3, #32
 800116e:	6153      	str	r3, [r2, #20]
	LCD_GPIO->ODR			&= ~(1<<LCD_CTRL_EN);
 8001170:	4a12      	ldr	r2, [pc, #72]	; (80011bc <LCD_SendCMD+0x8c>)
 8001172:	4b12      	ldr	r3, [pc, #72]	; (80011bc <LCD_SendCMD+0x8c>)
 8001174:	695b      	ldr	r3, [r3, #20]
 8001176:	f023 0320 	bic.w	r3, r3, #32
 800117a:	6153      	str	r3, [r2, #20]
	/* Send Least 4 bits */
	LCD_GPIO->ODR			&= ~LCD_DATA_ODR_MASK;
 800117c:	4a0f      	ldr	r2, [pc, #60]	; (80011bc <LCD_SendCMD+0x8c>)
 800117e:	4b0f      	ldr	r3, [pc, #60]	; (80011bc <LCD_SendCMD+0x8c>)
 8001180:	695b      	ldr	r3, [r3, #20]
 8001182:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001186:	6153      	str	r3, [r2, #20]
	LCD_GPIO->ODR			|=  ( (cmd) << LCD_DATA_SHIFT );
 8001188:	490c      	ldr	r1, [pc, #48]	; (80011bc <LCD_SendCMD+0x8c>)
 800118a:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <LCD_SendCMD+0x8c>)
 800118c:	695b      	ldr	r3, [r3, #20]
 800118e:	79fa      	ldrb	r2, [r7, #7]
 8001190:	0312      	lsls	r2, r2, #12
 8001192:	4313      	orrs	r3, r2
 8001194:	614b      	str	r3, [r1, #20]

	LCD_GPIO->ODR			|=  (1<<LCD_CTRL_EN);
 8001196:	4a09      	ldr	r2, [pc, #36]	; (80011bc <LCD_SendCMD+0x8c>)
 8001198:	4b08      	ldr	r3, [pc, #32]	; (80011bc <LCD_SendCMD+0x8c>)
 800119a:	695b      	ldr	r3, [r3, #20]
 800119c:	f043 0320 	orr.w	r3, r3, #32
 80011a0:	6153      	str	r3, [r2, #20]
	LCD_GPIO->ODR			&= ~(1<<LCD_CTRL_EN);
 80011a2:	4a06      	ldr	r2, [pc, #24]	; (80011bc <LCD_SendCMD+0x8c>)
 80011a4:	4b05      	ldr	r3, [pc, #20]	; (80011bc <LCD_SendCMD+0x8c>)
 80011a6:	695b      	ldr	r3, [r3, #20]
 80011a8:	f023 0320 	bic.w	r3, r3, #32
 80011ac:	6153      	str	r3, [r2, #20]
	/* wait for command to be executed */
	delayMs(1);
 80011ae:	2001      	movs	r0, #1
 80011b0:	f003 f848 	bl	8004244 <delayMs>
}
 80011b4:	bf00      	nop
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40020400 	.word	0x40020400

080011c0 <LCD_Clear>:
void LCD_Clear(void){
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
	LCD_SendCMD(LCD_CMD_CLEAR);
 80011c4:	2001      	movs	r0, #1
 80011c6:	f7ff ffb3 	bl	8001130 <LCD_SendCMD>
	delayMs(5);
 80011ca:	2005      	movs	r0, #5
 80011cc:	f003 f83a 	bl	8004244 <delayMs>
}
 80011d0:	bf00      	nop
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <LCD_SendData>:

static void LCD_SendData(uint8_t data){
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	71fb      	strb	r3, [r7, #7]
	 * Send low nibble data
	 * Start latching
	 * Delay for 40 micro sec
	 */
	/* Command Mode */
	LCD_GPIO->ODR			|=  (1<<LCD_CTRL_RS);
 80011de:	4a20      	ldr	r2, [pc, #128]	; (8001260 <LCD_SendData+0x8c>)
 80011e0:	4b1f      	ldr	r3, [pc, #124]	; (8001260 <LCD_SendData+0x8c>)
 80011e2:	695b      	ldr	r3, [r3, #20]
 80011e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011e8:	6153      	str	r3, [r2, #20]
	/* Send Most 4 bits */
	LCD_GPIO->ODR			&= ~LCD_DATA_ODR_MASK;
 80011ea:	4a1d      	ldr	r2, [pc, #116]	; (8001260 <LCD_SendData+0x8c>)
 80011ec:	4b1c      	ldr	r3, [pc, #112]	; (8001260 <LCD_SendData+0x8c>)
 80011ee:	695b      	ldr	r3, [r3, #20]
 80011f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80011f4:	6153      	str	r3, [r2, #20]
	LCD_GPIO->ODR			|=  ( (data >> 4) << LCD_DATA_SHIFT );
 80011f6:	491a      	ldr	r1, [pc, #104]	; (8001260 <LCD_SendData+0x8c>)
 80011f8:	4b19      	ldr	r3, [pc, #100]	; (8001260 <LCD_SendData+0x8c>)
 80011fa:	695b      	ldr	r3, [r3, #20]
 80011fc:	79fa      	ldrb	r2, [r7, #7]
 80011fe:	0912      	lsrs	r2, r2, #4
 8001200:	b2d2      	uxtb	r2, r2
 8001202:	0312      	lsls	r2, r2, #12
 8001204:	4313      	orrs	r3, r2
 8001206:	614b      	str	r3, [r1, #20]

	LCD_GPIO->ODR			|=  (1<<LCD_CTRL_EN);
 8001208:	4a15      	ldr	r2, [pc, #84]	; (8001260 <LCD_SendData+0x8c>)
 800120a:	4b15      	ldr	r3, [pc, #84]	; (8001260 <LCD_SendData+0x8c>)
 800120c:	695b      	ldr	r3, [r3, #20]
 800120e:	f043 0320 	orr.w	r3, r3, #32
 8001212:	6153      	str	r3, [r2, #20]
	LCD_GPIO->ODR			&= ~(1<<LCD_CTRL_EN);
 8001214:	4a12      	ldr	r2, [pc, #72]	; (8001260 <LCD_SendData+0x8c>)
 8001216:	4b12      	ldr	r3, [pc, #72]	; (8001260 <LCD_SendData+0x8c>)
 8001218:	695b      	ldr	r3, [r3, #20]
 800121a:	f023 0320 	bic.w	r3, r3, #32
 800121e:	6153      	str	r3, [r2, #20]
	/* Send Least 4 bits */
	LCD_GPIO->ODR			&= ~LCD_DATA_ODR_MASK;
 8001220:	4a0f      	ldr	r2, [pc, #60]	; (8001260 <LCD_SendData+0x8c>)
 8001222:	4b0f      	ldr	r3, [pc, #60]	; (8001260 <LCD_SendData+0x8c>)
 8001224:	695b      	ldr	r3, [r3, #20]
 8001226:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800122a:	6153      	str	r3, [r2, #20]
	LCD_GPIO->ODR			|=  ( (data) << LCD_DATA_SHIFT );
 800122c:	490c      	ldr	r1, [pc, #48]	; (8001260 <LCD_SendData+0x8c>)
 800122e:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <LCD_SendData+0x8c>)
 8001230:	695b      	ldr	r3, [r3, #20]
 8001232:	79fa      	ldrb	r2, [r7, #7]
 8001234:	0312      	lsls	r2, r2, #12
 8001236:	4313      	orrs	r3, r2
 8001238:	614b      	str	r3, [r1, #20]

	LCD_GPIO->ODR			|=  (1<<LCD_CTRL_EN);
 800123a:	4a09      	ldr	r2, [pc, #36]	; (8001260 <LCD_SendData+0x8c>)
 800123c:	4b08      	ldr	r3, [pc, #32]	; (8001260 <LCD_SendData+0x8c>)
 800123e:	695b      	ldr	r3, [r3, #20]
 8001240:	f043 0320 	orr.w	r3, r3, #32
 8001244:	6153      	str	r3, [r2, #20]
	LCD_GPIO->ODR			&= ~(1<<LCD_CTRL_EN);
 8001246:	4a06      	ldr	r2, [pc, #24]	; (8001260 <LCD_SendData+0x8c>)
 8001248:	4b05      	ldr	r3, [pc, #20]	; (8001260 <LCD_SendData+0x8c>)
 800124a:	695b      	ldr	r3, [r3, #20]
 800124c:	f023 0320 	bic.w	r3, r3, #32
 8001250:	6153      	str	r3, [r2, #20]
	/* wait for command to be executed */
	delayMs(1);
 8001252:	2001      	movs	r0, #1
 8001254:	f002 fff6 	bl	8004244 <delayMs>
}
 8001258:	bf00      	nop
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40020400 	.word	0x40020400

08001264 <LCD_Init>:
void LCD_Init(void){
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
	 * Select 4 Bit, 5*7,2 lines (Function Set)
	 * No cursor, Blink (Display CMD)
	 * Auto Inc with no Shift (Entry )
	 * Clear LCD
	 */
	RCC->AHB1ENR 			|=  LCD_RCC;
 8001268:	4a1d      	ldr	r2, [pc, #116]	; (80012e0 <LCD_Init+0x7c>)
 800126a:	4b1d      	ldr	r3, [pc, #116]	; (80012e0 <LCD_Init+0x7c>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	f043 0302 	orr.w	r3, r3, #2
 8001272:	6313      	str	r3, [r2, #48]	; 0x30

	LCD_GPIO->MODER			&= ~LCD_DATA_MODER_MASK;
 8001274:	4a1b      	ldr	r2, [pc, #108]	; (80012e4 <LCD_Init+0x80>)
 8001276:	4b1b      	ldr	r3, [pc, #108]	; (80012e4 <LCD_Init+0x80>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800127e:	6013      	str	r3, [r2, #0]
	LCD_GPIO->MODER			|=  LCD_DATA_MODER_OUT_MASK;
 8001280:	4a18      	ldr	r2, [pc, #96]	; (80012e4 <LCD_Init+0x80>)
 8001282:	4b18      	ldr	r3, [pc, #96]	; (80012e4 <LCD_Init+0x80>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 800128a:	6013      	str	r3, [r2, #0]
	LCD_GPIO->ODR			&= ~LCD_DATA_ODR_MASK;
 800128c:	4a15      	ldr	r2, [pc, #84]	; (80012e4 <LCD_Init+0x80>)
 800128e:	4b15      	ldr	r3, [pc, #84]	; (80012e4 <LCD_Init+0x80>)
 8001290:	695b      	ldr	r3, [r3, #20]
 8001292:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001296:	6153      	str	r3, [r2, #20]

	LCD_GPIO->MODER			&= ~LCD_CTRL_MODER_MASK;
 8001298:	4a12      	ldr	r2, [pc, #72]	; (80012e4 <LCD_Init+0x80>)
 800129a:	4b12      	ldr	r3, [pc, #72]	; (80012e4 <LCD_Init+0x80>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f423 3343 	bic.w	r3, r3, #199680	; 0x30c00
 80012a2:	6013      	str	r3, [r2, #0]
	LCD_GPIO->MODER			|=  LCD_CTRL_MODER_OUT_MASK;
 80012a4:	4a0f      	ldr	r2, [pc, #60]	; (80012e4 <LCD_Init+0x80>)
 80012a6:	4b0f      	ldr	r3, [pc, #60]	; (80012e4 <LCD_Init+0x80>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f443 3382 	orr.w	r3, r3, #66560	; 0x10400
 80012ae:	6013      	str	r3, [r2, #0]
	LCD_GPIO->ODR			&= ~((1<<LCD_CTRL_EN)|(1<<LCD_CTRL_RS));
 80012b0:	4a0c      	ldr	r2, [pc, #48]	; (80012e4 <LCD_Init+0x80>)
 80012b2:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <LCD_Init+0x80>)
 80012b4:	695b      	ldr	r3, [r3, #20]
 80012b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80012ba:	6153      	str	r3, [r2, #20]



	delayMs(500);
 80012bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012c0:	f002 ffc0 	bl	8004244 <delayMs>
	LCD_SendCMD(LCD_CMD_FUN_SET);
 80012c4:	2028      	movs	r0, #40	; 0x28
 80012c6:	f7ff ff33 	bl	8001130 <LCD_SendCMD>
	LCD_SendCMD(LCD_CMD_DISP);
 80012ca:	200c      	movs	r0, #12
 80012cc:	f7ff ff30 	bl	8001130 <LCD_SendCMD>
	LCD_SendCMD(LCD_CMD_ENTRY_INC);
 80012d0:	2006      	movs	r0, #6
 80012d2:	f7ff ff2d 	bl	8001130 <LCD_SendCMD>
	LCD_Clear();
 80012d6:	f7ff ff73 	bl	80011c0 <LCD_Clear>

	//	LCD_SendCMD(0x01);
	//	delayMs(5);
}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40023800 	.word	0x40023800
 80012e4:	40020400 	.word	0x40020400

080012e8 <LCD_DispChar>:
void LCD_DispChar(uint8_t data){
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	71fb      	strb	r3, [r7, #7]
	LCD_SendData(data);
 80012f2:	79fb      	ldrb	r3, [r7, #7]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff ff6d 	bl	80011d4 <LCD_SendData>
}
 80012fa:	bf00      	nop
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <LCD_DispCharXY>:
void LCD_DispCharXY(uint8_t line, uint8_t col,uint8_t data){
 8001302:	b580      	push	{r7, lr}
 8001304:	b082      	sub	sp, #8
 8001306:	af00      	add	r7, sp, #0
 8001308:	4603      	mov	r3, r0
 800130a:	71fb      	strb	r3, [r7, #7]
 800130c:	460b      	mov	r3, r1
 800130e:	71bb      	strb	r3, [r7, #6]
 8001310:	4613      	mov	r3, r2
 8001312:	717b      	strb	r3, [r7, #5]
	LCD_GotoXY(line,col);
 8001314:	79ba      	ldrb	r2, [r7, #6]
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	4611      	mov	r1, r2
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff fee9 	bl	80010f2 <LCD_GotoXY>
	LCD_DispChar(data);
 8001320:	797b      	ldrb	r3, [r7, #5]
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff ffe0 	bl	80012e8 <LCD_DispChar>
}
 8001328:	bf00      	nop
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}

08001330 <LCD_DispStr>:
void LCD_DispStr(uint8_t* str){
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
	uint8_t	 ind = 0;
 8001338:	2300      	movs	r3, #0
 800133a:	73fb      	strb	r3, [r7, #15]
	while(str[ind]){
 800133c:	e009      	b.n	8001352 <LCD_DispStr+0x22>
		LCD_DispChar(str[ind]);
 800133e:	7bfb      	ldrb	r3, [r7, #15]
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	4413      	add	r3, r2
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff ffce 	bl	80012e8 <LCD_DispChar>
		ind++;
 800134c:	7bfb      	ldrb	r3, [r7, #15]
 800134e:	3301      	adds	r3, #1
 8001350:	73fb      	strb	r3, [r7, #15]
	while(str[ind]){
 8001352:	7bfb      	ldrb	r3, [r7, #15]
 8001354:	687a      	ldr	r2, [r7, #4]
 8001356:	4413      	add	r3, r2
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d1ef      	bne.n	800133e <LCD_DispStr+0xe>
	}
}
 800135e:	bf00      	nop
 8001360:	3710      	adds	r7, #16
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <LCD_DispStrXY>:
void LCD_DispStrXY(uint8_t line, uint8_t col,uint8_t* str){
 8001366:	b580      	push	{r7, lr}
 8001368:	b082      	sub	sp, #8
 800136a:	af00      	add	r7, sp, #0
 800136c:	4603      	mov	r3, r0
 800136e:	603a      	str	r2, [r7, #0]
 8001370:	71fb      	strb	r3, [r7, #7]
 8001372:	460b      	mov	r3, r1
 8001374:	71bb      	strb	r3, [r7, #6]
	LCD_GotoXY(line,col);
 8001376:	79ba      	ldrb	r2, [r7, #6]
 8001378:	79fb      	ldrb	r3, [r7, #7]
 800137a:	4611      	mov	r1, r2
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff feb8 	bl	80010f2 <LCD_GotoXY>
	LCD_DispStr(str);
 8001382:	6838      	ldr	r0, [r7, #0]
 8001384:	f7ff ffd4 	bl	8001330 <LCD_DispStr>
}
 8001388:	bf00      	nop
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <Buz_Init>:
 *  Relay	(PC13)
 *  Buttons	(PD2, PA11, PA12, PC0, PC1)
 * */

/* Buzzer */
void Buz_Init(void){
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
	/* RCC Clock GPIOC */
	RCC->AHB1ENR 	|= RCC_AHB1ENR_GPIOCEN;
 8001394:	4a0a      	ldr	r2, [pc, #40]	; (80013c0 <Buz_Init+0x30>)
 8001396:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <Buz_Init+0x30>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	f043 0304 	orr.w	r3, r3, #4
 800139e:	6313      	str	r3, [r2, #48]	; 0x30
	/* PC4 Out */
	GPIOC->MODER &= ~GPIO_MODER_MODER4;
 80013a0:	4a08      	ldr	r2, [pc, #32]	; (80013c4 <Buz_Init+0x34>)
 80013a2:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <Buz_Init+0x34>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80013aa:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |=  GPIO_MODER_MODER4_0;
 80013ac:	4a05      	ldr	r2, [pc, #20]	; (80013c4 <Buz_Init+0x34>)
 80013ae:	4b05      	ldr	r3, [pc, #20]	; (80013c4 <Buz_Init+0x34>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013b6:	6013      	str	r3, [r2, #0]
	Buz_Off();
 80013b8:	f000 f816 	bl	80013e8 <Buz_Off>
}
 80013bc:	bf00      	nop
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	40023800 	.word	0x40023800
 80013c4:	40020800 	.word	0x40020800

080013c8 <Buz_On>:
void Buz_On(void){
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
	GPIOC->ODR |= GPIO_ODR_ODR_4;
 80013cc:	4a05      	ldr	r2, [pc, #20]	; (80013e4 <Buz_On+0x1c>)
 80013ce:	4b05      	ldr	r3, [pc, #20]	; (80013e4 <Buz_On+0x1c>)
 80013d0:	695b      	ldr	r3, [r3, #20]
 80013d2:	f043 0310 	orr.w	r3, r3, #16
 80013d6:	6153      	str	r3, [r2, #20]
}
 80013d8:	bf00      	nop
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	40020800 	.word	0x40020800

080013e8 <Buz_Off>:
void Buz_Off(void){
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
	GPIOC->ODR &= ~GPIO_ODR_ODR_4;
 80013ec:	4a05      	ldr	r2, [pc, #20]	; (8001404 <Buz_Off+0x1c>)
 80013ee:	4b05      	ldr	r3, [pc, #20]	; (8001404 <Buz_Off+0x1c>)
 80013f0:	695b      	ldr	r3, [r3, #20]
 80013f2:	f023 0310 	bic.w	r3, r3, #16
 80013f6:	6153      	str	r3, [r2, #20]
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	40020800 	.word	0x40020800

08001408 <Relay_Init>:
void Buz_Toggle(void){
	GPIOC->ODR ^= GPIO_ODR_ODR_4;
}

/* Relay */
void Relay_Init(void){
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
	/* RCC Clock GPIOC */
	RCC->AHB1ENR 	|= RCC_AHB1ENR_GPIOCEN;
 800140c:	4a0a      	ldr	r2, [pc, #40]	; (8001438 <Relay_Init+0x30>)
 800140e:	4b0a      	ldr	r3, [pc, #40]	; (8001438 <Relay_Init+0x30>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	f043 0304 	orr.w	r3, r3, #4
 8001416:	6313      	str	r3, [r2, #48]	; 0x30
	/* PC13 Out */
	GPIOC->MODER &= ~GPIO_MODER_MODER13;
 8001418:	4a08      	ldr	r2, [pc, #32]	; (800143c <Relay_Init+0x34>)
 800141a:	4b08      	ldr	r3, [pc, #32]	; (800143c <Relay_Init+0x34>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001422:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |=  GPIO_MODER_MODER13_0;
 8001424:	4a05      	ldr	r2, [pc, #20]	; (800143c <Relay_Init+0x34>)
 8001426:	4b05      	ldr	r3, [pc, #20]	; (800143c <Relay_Init+0x34>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800142e:	6013      	str	r3, [r2, #0]
	Relay_Off();
 8001430:	f000 f806 	bl	8001440 <Relay_Off>
}
 8001434:	bf00      	nop
 8001436:	bd80      	pop	{r7, pc}
 8001438:	40023800 	.word	0x40023800
 800143c:	40020800 	.word	0x40020800

08001440 <Relay_Off>:
void Relay_On(void){
	GPIOC->ODR |= GPIO_ODR_ODR_13;
}
void Relay_Off(void){
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
	GPIOC->ODR &= ~GPIO_ODR_ODR_13;
 8001444:	4a05      	ldr	r2, [pc, #20]	; (800145c <Relay_Off+0x1c>)
 8001446:	4b05      	ldr	r3, [pc, #20]	; (800145c <Relay_Off+0x1c>)
 8001448:	695b      	ldr	r3, [r3, #20]
 800144a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800144e:	6153      	str	r3, [r2, #20]
}
 8001450:	bf00      	nop
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	40020800 	.word	0x40020800

08001460 <Relay_Toggle>:
void Relay_Toggle(void){
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
	GPIOC->ODR ^= GPIO_ODR_ODR_13;
 8001464:	4a05      	ldr	r2, [pc, #20]	; (800147c <Relay_Toggle+0x1c>)
 8001466:	4b05      	ldr	r3, [pc, #20]	; (800147c <Relay_Toggle+0x1c>)
 8001468:	695b      	ldr	r3, [r3, #20]
 800146a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800146e:	6153      	str	r3, [r2, #20]
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	40020800 	.word	0x40020800

08001480 <Leds_Init>:
}
void Led_Toggle(LED_Type ledNo){
	GPIOC->ODR ^= (1<<ledNo);
}
/* Group of leds */
void Leds_Init(uint8_t ledsMask){
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	71fb      	strb	r3, [r7, #7]
	/* RCC Clock GPIOC */
	RCC->AHB1ENR 	|= RCC_AHB1ENR_GPIOCEN;
 800148a:	4a0f      	ldr	r2, [pc, #60]	; (80014c8 <Leds_Init+0x48>)
 800148c:	4b0e      	ldr	r3, [pc, #56]	; (80014c8 <Leds_Init+0x48>)
 800148e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001490:	f043 0304 	orr.w	r3, r3, #4
 8001494:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOC->MODER &= ~(0xFFFF<<(5*2));
 8001496:	4a0d      	ldr	r2, [pc, #52]	; (80014cc <Leds_Init+0x4c>)
 8001498:	4b0c      	ldr	r3, [pc, #48]	; (80014cc <Leds_Init+0x4c>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f023 737f 	bic.w	r3, r3, #66846720	; 0x3fc0000
 80014a0:	f423 337f 	bic.w	r3, r3, #261120	; 0x3fc00
 80014a4:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |=  (0x5555<<(5*2));
 80014a6:	4a09      	ldr	r2, [pc, #36]	; (80014cc <Leds_Init+0x4c>)
 80014a8:	4b08      	ldr	r3, [pc, #32]	; (80014cc <Leds_Init+0x4c>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f043 73aa 	orr.w	r3, r3, #22282240	; 0x1540000
 80014b0:	f443 33aa 	orr.w	r3, r3, #87040	; 0x15400
 80014b4:	6013      	str	r3, [r2, #0]
	Leds_Off(ledsMask);
 80014b6:	79fb      	ldrb	r3, [r7, #7]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f000 f81d 	bl	80014f8 <Leds_Off>
}
 80014be:	bf00      	nop
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40023800 	.word	0x40023800
 80014cc:	40020800 	.word	0x40020800

080014d0 <Leds_On>:
void Leds_On(uint8_t ledsMask){
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	71fb      	strb	r3, [r7, #7]
	GPIOC->ODR |= (ledsMask<<5);
 80014da:	4906      	ldr	r1, [pc, #24]	; (80014f4 <Leds_On+0x24>)
 80014dc:	4b05      	ldr	r3, [pc, #20]	; (80014f4 <Leds_On+0x24>)
 80014de:	695b      	ldr	r3, [r3, #20]
 80014e0:	79fa      	ldrb	r2, [r7, #7]
 80014e2:	0152      	lsls	r2, r2, #5
 80014e4:	4313      	orrs	r3, r2
 80014e6:	614b      	str	r3, [r1, #20]
}
 80014e8:	bf00      	nop
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	40020800 	.word	0x40020800

080014f8 <Leds_Off>:
void Leds_Off(uint8_t ledsMask){
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	71fb      	strb	r3, [r7, #7]
	GPIOC->ODR &= ~(ledsMask<<5);
 8001502:	4907      	ldr	r1, [pc, #28]	; (8001520 <Leds_Off+0x28>)
 8001504:	4b06      	ldr	r3, [pc, #24]	; (8001520 <Leds_Off+0x28>)
 8001506:	695b      	ldr	r3, [r3, #20]
 8001508:	79fa      	ldrb	r2, [r7, #7]
 800150a:	0152      	lsls	r2, r2, #5
 800150c:	43d2      	mvns	r2, r2
 800150e:	4013      	ands	r3, r2
 8001510:	614b      	str	r3, [r1, #20]
}
 8001512:	bf00      	nop
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	40020800 	.word	0x40020800

08001524 <Leds_Toggle>:
void Leds_Toggle(uint8_t ledsMask){
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	71fb      	strb	r3, [r7, #7]
	GPIOC->ODR ^= (ledsMask<<5);
 800152e:	4906      	ldr	r1, [pc, #24]	; (8001548 <Leds_Toggle+0x24>)
 8001530:	4b05      	ldr	r3, [pc, #20]	; (8001548 <Leds_Toggle+0x24>)
 8001532:	695b      	ldr	r3, [r3, #20]
 8001534:	79fa      	ldrb	r2, [r7, #7]
 8001536:	0152      	lsls	r2, r2, #5
 8001538:	4053      	eors	r3, r2
 800153a:	614b      	str	r3, [r1, #20]
}
 800153c:	bf00      	nop
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr
 8001548:	40020800 	.word	0x40020800

0800154c <Btn_Init>:

/* Buttons	(PD2 C, PA11 R, PA12 L, PC0 D, PC1 U)*/
void Btn_Init(BTN_Type btnNo){
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	71fb      	strb	r3, [r7, #7]
	switch (btnNo) {
 8001556:	79fb      	ldrb	r3, [r7, #7]
 8001558:	2b04      	cmp	r3, #4
 800155a:	f200 808a 	bhi.w	8001672 <Btn_Init+0x126>
 800155e:	a201      	add	r2, pc, #4	; (adr r2, 8001564 <Btn_Init+0x18>)
 8001560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001564:	08001579 	.word	0x08001579
 8001568:	080015dd 	.word	0x080015dd
 800156c:	080015ab 	.word	0x080015ab
 8001570:	0800160f 	.word	0x0800160f
 8001574:	08001641 	.word	0x08001641
	case BTN_CENTER:
		RCC->AHB1ENR 	|= RCC_AHB1ENR_GPIODEN;
 8001578:	4a41      	ldr	r2, [pc, #260]	; (8001680 <Btn_Init+0x134>)
 800157a:	4b41      	ldr	r3, [pc, #260]	; (8001680 <Btn_Init+0x134>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	f043 0308 	orr.w	r3, r3, #8
 8001582:	6313      	str	r3, [r2, #48]	; 0x30
		GPIOD->MODER	&= ~GPIO_MODER_MODER2;
 8001584:	4a3f      	ldr	r2, [pc, #252]	; (8001684 <Btn_Init+0x138>)
 8001586:	4b3f      	ldr	r3, [pc, #252]	; (8001684 <Btn_Init+0x138>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800158e:	6013      	str	r3, [r2, #0]
		GPIOD->PUPDR	&= ~GPIO_PUPDR_PUPDR2;
 8001590:	4a3c      	ldr	r2, [pc, #240]	; (8001684 <Btn_Init+0x138>)
 8001592:	4b3c      	ldr	r3, [pc, #240]	; (8001684 <Btn_Init+0x138>)
 8001594:	68db      	ldr	r3, [r3, #12]
 8001596:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800159a:	60d3      	str	r3, [r2, #12]
		GPIOD->PUPDR	|=  GPIO_PUPDR_PUPDR2_0;
 800159c:	4a39      	ldr	r2, [pc, #228]	; (8001684 <Btn_Init+0x138>)
 800159e:	4b39      	ldr	r3, [pc, #228]	; (8001684 <Btn_Init+0x138>)
 80015a0:	68db      	ldr	r3, [r3, #12]
 80015a2:	f043 0310 	orr.w	r3, r3, #16
 80015a6:	60d3      	str	r3, [r2, #12]
		break;
 80015a8:	e064      	b.n	8001674 <Btn_Init+0x128>
	case BTN_LEFT:
		RCC->AHB1ENR 	|= RCC_AHB1ENR_GPIOAEN;
 80015aa:	4a35      	ldr	r2, [pc, #212]	; (8001680 <Btn_Init+0x134>)
 80015ac:	4b34      	ldr	r3, [pc, #208]	; (8001680 <Btn_Init+0x134>)
 80015ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b0:	f043 0301 	orr.w	r3, r3, #1
 80015b4:	6313      	str	r3, [r2, #48]	; 0x30
		GPIOA->MODER	&= ~GPIO_MODER_MODER12;
 80015b6:	4a34      	ldr	r2, [pc, #208]	; (8001688 <Btn_Init+0x13c>)
 80015b8:	4b33      	ldr	r3, [pc, #204]	; (8001688 <Btn_Init+0x13c>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80015c0:	6013      	str	r3, [r2, #0]
		GPIOA->PUPDR	&= ~GPIO_PUPDR_PUPDR12;
 80015c2:	4a31      	ldr	r2, [pc, #196]	; (8001688 <Btn_Init+0x13c>)
 80015c4:	4b30      	ldr	r3, [pc, #192]	; (8001688 <Btn_Init+0x13c>)
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80015cc:	60d3      	str	r3, [r2, #12]
		GPIOA->PUPDR	|=  GPIO_PUPDR_PUPDR12_0;
 80015ce:	4a2e      	ldr	r2, [pc, #184]	; (8001688 <Btn_Init+0x13c>)
 80015d0:	4b2d      	ldr	r3, [pc, #180]	; (8001688 <Btn_Init+0x13c>)
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015d8:	60d3      	str	r3, [r2, #12]
		break;
 80015da:	e04b      	b.n	8001674 <Btn_Init+0x128>
	case BTN_RIGHT:
		RCC->AHB1ENR 	|= RCC_AHB1ENR_GPIOAEN;
 80015dc:	4a28      	ldr	r2, [pc, #160]	; (8001680 <Btn_Init+0x134>)
 80015de:	4b28      	ldr	r3, [pc, #160]	; (8001680 <Btn_Init+0x134>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	f043 0301 	orr.w	r3, r3, #1
 80015e6:	6313      	str	r3, [r2, #48]	; 0x30
		GPIOA->MODER	&= ~GPIO_MODER_MODER11;
 80015e8:	4a27      	ldr	r2, [pc, #156]	; (8001688 <Btn_Init+0x13c>)
 80015ea:	4b27      	ldr	r3, [pc, #156]	; (8001688 <Btn_Init+0x13c>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80015f2:	6013      	str	r3, [r2, #0]
		GPIOA->PUPDR	&= ~GPIO_PUPDR_PUPDR11;
 80015f4:	4a24      	ldr	r2, [pc, #144]	; (8001688 <Btn_Init+0x13c>)
 80015f6:	4b24      	ldr	r3, [pc, #144]	; (8001688 <Btn_Init+0x13c>)
 80015f8:	68db      	ldr	r3, [r3, #12]
 80015fa:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80015fe:	60d3      	str	r3, [r2, #12]
		GPIOA->PUPDR	|=  GPIO_PUPDR_PUPDR11_0;
 8001600:	4a21      	ldr	r2, [pc, #132]	; (8001688 <Btn_Init+0x13c>)
 8001602:	4b21      	ldr	r3, [pc, #132]	; (8001688 <Btn_Init+0x13c>)
 8001604:	68db      	ldr	r3, [r3, #12]
 8001606:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800160a:	60d3      	str	r3, [r2, #12]
		break;
 800160c:	e032      	b.n	8001674 <Btn_Init+0x128>
	case BTN_UP:
		RCC->AHB1ENR 	|= RCC_AHB1ENR_GPIOCEN;
 800160e:	4a1c      	ldr	r2, [pc, #112]	; (8001680 <Btn_Init+0x134>)
 8001610:	4b1b      	ldr	r3, [pc, #108]	; (8001680 <Btn_Init+0x134>)
 8001612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001614:	f043 0304 	orr.w	r3, r3, #4
 8001618:	6313      	str	r3, [r2, #48]	; 0x30
		GPIOC->MODER	&= ~GPIO_MODER_MODER1;
 800161a:	4a1c      	ldr	r2, [pc, #112]	; (800168c <Btn_Init+0x140>)
 800161c:	4b1b      	ldr	r3, [pc, #108]	; (800168c <Btn_Init+0x140>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f023 030c 	bic.w	r3, r3, #12
 8001624:	6013      	str	r3, [r2, #0]
		GPIOC->PUPDR	&= ~GPIO_PUPDR_PUPDR1;
 8001626:	4a19      	ldr	r2, [pc, #100]	; (800168c <Btn_Init+0x140>)
 8001628:	4b18      	ldr	r3, [pc, #96]	; (800168c <Btn_Init+0x140>)
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	f023 030c 	bic.w	r3, r3, #12
 8001630:	60d3      	str	r3, [r2, #12]
		GPIOC->PUPDR	|=  GPIO_PUPDR_PUPDR1_0;
 8001632:	4a16      	ldr	r2, [pc, #88]	; (800168c <Btn_Init+0x140>)
 8001634:	4b15      	ldr	r3, [pc, #84]	; (800168c <Btn_Init+0x140>)
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	f043 0304 	orr.w	r3, r3, #4
 800163c:	60d3      	str	r3, [r2, #12]
		break;
 800163e:	e019      	b.n	8001674 <Btn_Init+0x128>
	case BTN_DOWN:
		RCC->AHB1ENR 	|= RCC_AHB1ENR_GPIOCEN;
 8001640:	4a0f      	ldr	r2, [pc, #60]	; (8001680 <Btn_Init+0x134>)
 8001642:	4b0f      	ldr	r3, [pc, #60]	; (8001680 <Btn_Init+0x134>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	f043 0304 	orr.w	r3, r3, #4
 800164a:	6313      	str	r3, [r2, #48]	; 0x30
		GPIOC->MODER	&= ~GPIO_MODER_MODER0;
 800164c:	4a0f      	ldr	r2, [pc, #60]	; (800168c <Btn_Init+0x140>)
 800164e:	4b0f      	ldr	r3, [pc, #60]	; (800168c <Btn_Init+0x140>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f023 0303 	bic.w	r3, r3, #3
 8001656:	6013      	str	r3, [r2, #0]
		GPIOC->PUPDR	&= ~GPIO_PUPDR_PUPDR0;
 8001658:	4a0c      	ldr	r2, [pc, #48]	; (800168c <Btn_Init+0x140>)
 800165a:	4b0c      	ldr	r3, [pc, #48]	; (800168c <Btn_Init+0x140>)
 800165c:	68db      	ldr	r3, [r3, #12]
 800165e:	f023 0303 	bic.w	r3, r3, #3
 8001662:	60d3      	str	r3, [r2, #12]
		GPIOC->PUPDR	|=  GPIO_PUPDR_PUPDR0_0;
 8001664:	4a09      	ldr	r2, [pc, #36]	; (800168c <Btn_Init+0x140>)
 8001666:	4b09      	ldr	r3, [pc, #36]	; (800168c <Btn_Init+0x140>)
 8001668:	68db      	ldr	r3, [r3, #12]
 800166a:	f043 0301 	orr.w	r3, r3, #1
 800166e:	60d3      	str	r3, [r2, #12]
		break;
 8001670:	e000      	b.n	8001674 <Btn_Init+0x128>
	default:
		break;
 8001672:	bf00      	nop
	}
}
 8001674:	bf00      	nop
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	40023800 	.word	0x40023800
 8001684:	40020c00 	.word	0x40020c00
 8001688:	40020000 	.word	0x40020000
 800168c:	40020800 	.word	0x40020800

08001690 <Btn_isPressed>:
		break;
	}
}
/* returns 1 if pressed */
/* Buttons	(PD2 C, PA11 R, PA12 L, PC0 D, PC1 U)*/
uint32_t Btn_isPressed(BTN_Type btnNo){
 8001690:	b480      	push	{r7}
 8001692:	b085      	sub	sp, #20
 8001694:	af00      	add	r7, sp, #0
 8001696:	4603      	mov	r3, r0
 8001698:	71fb      	strb	r3, [r7, #7]
	uint32_t result = 0;
 800169a:	2300      	movs	r3, #0
 800169c:	60fb      	str	r3, [r7, #12]
	switch (btnNo) {
 800169e:	79fb      	ldrb	r3, [r7, #7]
 80016a0:	2b04      	cmp	r3, #4
 80016a2:	d82b      	bhi.n	80016fc <Btn_isPressed+0x6c>
 80016a4:	a201      	add	r2, pc, #4	; (adr r2, 80016ac <Btn_isPressed+0x1c>)
 80016a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016aa:	bf00      	nop
 80016ac:	080016c1 	.word	0x080016c1
 80016b0:	080016d9 	.word	0x080016d9
 80016b4:	080016cd 	.word	0x080016cd
 80016b8:	080016e5 	.word	0x080016e5
 80016bc:	080016f1 	.word	0x080016f1
	case BTN_CENTER:
		result = (GPIOD->IDR & GPIO_IDR_IDR_2);
 80016c0:	4b15      	ldr	r3, [pc, #84]	; (8001718 <Btn_isPressed+0x88>)
 80016c2:	691b      	ldr	r3, [r3, #16]
 80016c4:	f003 0304 	and.w	r3, r3, #4
 80016c8:	60fb      	str	r3, [r7, #12]
		break;
 80016ca:	e018      	b.n	80016fe <Btn_isPressed+0x6e>
	case BTN_LEFT:
		result = (GPIOA->IDR & GPIO_IDR_IDR_12);
 80016cc:	4b13      	ldr	r3, [pc, #76]	; (800171c <Btn_isPressed+0x8c>)
 80016ce:	691b      	ldr	r3, [r3, #16]
 80016d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016d4:	60fb      	str	r3, [r7, #12]
		break;
 80016d6:	e012      	b.n	80016fe <Btn_isPressed+0x6e>
	case BTN_RIGHT:
		result = (GPIOA->IDR & GPIO_IDR_IDR_11);
 80016d8:	4b10      	ldr	r3, [pc, #64]	; (800171c <Btn_isPressed+0x8c>)
 80016da:	691b      	ldr	r3, [r3, #16]
 80016dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016e0:	60fb      	str	r3, [r7, #12]
		break;
 80016e2:	e00c      	b.n	80016fe <Btn_isPressed+0x6e>
	case BTN_UP:
		result = (GPIOC->IDR & GPIO_IDR_IDR_1);
 80016e4:	4b0e      	ldr	r3, [pc, #56]	; (8001720 <Btn_isPressed+0x90>)
 80016e6:	691b      	ldr	r3, [r3, #16]
 80016e8:	f003 0302 	and.w	r3, r3, #2
 80016ec:	60fb      	str	r3, [r7, #12]
		break;
 80016ee:	e006      	b.n	80016fe <Btn_isPressed+0x6e>
	case BTN_DOWN:
		result = (GPIOC->IDR & GPIO_IDR_IDR_0);
 80016f0:	4b0b      	ldr	r3, [pc, #44]	; (8001720 <Btn_isPressed+0x90>)
 80016f2:	691b      	ldr	r3, [r3, #16]
 80016f4:	f003 0301 	and.w	r3, r3, #1
 80016f8:	60fb      	str	r3, [r7, #12]
		break;
 80016fa:	e000      	b.n	80016fe <Btn_isPressed+0x6e>
	default:
		break;
 80016fc:	bf00      	nop
	}
	return (result == 0);
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	2b00      	cmp	r3, #0
 8001702:	bf0c      	ite	eq
 8001704:	2301      	moveq	r3, #1
 8001706:	2300      	movne	r3, #0
 8001708:	b2db      	uxtb	r3, r3
}
 800170a:	4618      	mov	r0, r3
 800170c:	3714      	adds	r7, #20
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	40020c00 	.word	0x40020c00
 800171c:	40020000 	.word	0x40020000
 8001720:	40020800 	.word	0x40020800

08001724 <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void){
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
	EXTI->PR	|=  EXTI_PR_PR0;
 8001728:	4a05      	ldr	r2, [pc, #20]	; (8001740 <EXTI0_IRQHandler+0x1c>)
 800172a:	4b05      	ldr	r3, [pc, #20]	; (8001740 <EXTI0_IRQHandler+0x1c>)
 800172c:	695b      	ldr	r3, [r3, #20]
 800172e:	f043 0301 	orr.w	r3, r3, #1
 8001732:	6153      	str	r3, [r2, #20]
	handler_down();
 8001734:	4b03      	ldr	r3, [pc, #12]	; (8001744 <EXTI0_IRQHandler+0x20>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4798      	blx	r3
}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40013c00 	.word	0x40013c00
 8001744:	20003e10 	.word	0x20003e10

08001748 <EXTI2_IRQHandler>:
void EXTI1_IRQHandler(void){
	EXTI->PR	|=  EXTI_PR_PR1;
	handler_up();
}
*/
void EXTI2_IRQHandler(void){
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
	EXTI->PR	|=  EXTI_PR_PR2;
 800174c:	4a05      	ldr	r2, [pc, #20]	; (8001764 <EXTI2_IRQHandler+0x1c>)
 800174e:	4b05      	ldr	r3, [pc, #20]	; (8001764 <EXTI2_IRQHandler+0x1c>)
 8001750:	695b      	ldr	r3, [r3, #20]
 8001752:	f043 0304 	orr.w	r3, r3, #4
 8001756:	6153      	str	r3, [r2, #20]
	handler_center();
 8001758:	4b03      	ldr	r3, [pc, #12]	; (8001768 <EXTI2_IRQHandler+0x20>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4798      	blx	r3
}
 800175e:	bf00      	nop
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	40013c00 	.word	0x40013c00
 8001768:	20003e08 	.word	0x20003e08

0800176c <Keypad_Init>:
 *  Created on: Nov 9, 2020
 *      Author: MahmoudH
 */
#include "keypad.h"

void 	Keypad_Init(void){
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
	/* RCC */
	RCC->AHB1ENR |= (KEY_ROWS_RCC|KEY_COLS_RCC);
 8001770:	4a17      	ldr	r2, [pc, #92]	; (80017d0 <Keypad_Init+0x64>)
 8001772:	4b17      	ldr	r3, [pc, #92]	; (80017d0 <Keypad_Init+0x64>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001776:	f043 0303 	orr.w	r3, r3, #3
 800177a:	6313      	str	r3, [r2, #48]	; 0x30
	/* Rows -> Out , default high*/
	KEY_ROWS_GPIO->MODER	&= ~KEY_ROWS_MODER_MASK;
 800177c:	4a15      	ldr	r2, [pc, #84]	; (80017d4 <Keypad_Init+0x68>)
 800177e:	4b15      	ldr	r3, [pc, #84]	; (80017d4 <Keypad_Init+0x68>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
 8001786:	6013      	str	r3, [r2, #0]
	KEY_ROWS_GPIO->MODER	|=  KEY_ROWS_MODER_OUT_MASK;
 8001788:	4a12      	ldr	r2, [pc, #72]	; (80017d4 <Keypad_Init+0x68>)
 800178a:	4b12      	ldr	r3, [pc, #72]	; (80017d4 <Keypad_Init+0x68>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f443 43a8 	orr.w	r3, r3, #21504	; 0x5400
 8001792:	6013      	str	r3, [r2, #0]
	KEY_ROWS_GPIO->ODR		|=  KEY_ROWS_ODR_MASK;
 8001794:	4a0f      	ldr	r2, [pc, #60]	; (80017d4 <Keypad_Init+0x68>)
 8001796:	4b0f      	ldr	r3, [pc, #60]	; (80017d4 <Keypad_Init+0x68>)
 8001798:	695b      	ldr	r3, [r3, #20]
 800179a:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800179e:	6153      	str	r3, [r2, #20]
	/* Cols -> In , pullup*/
	KEY_COLS_GPIO->MODER	&= ~KEY_COLS_MODER_MASK;
 80017a0:	4a0d      	ldr	r2, [pc, #52]	; (80017d8 <Keypad_Init+0x6c>)
 80017a2:	4b0d      	ldr	r3, [pc, #52]	; (80017d8 <Keypad_Init+0x6c>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80017aa:	6013      	str	r3, [r2, #0]
	KEY_COLS_GPIO->PUPDR	&= ~KEY_COLS_PUPDR_MASK;
 80017ac:	4a0a      	ldr	r2, [pc, #40]	; (80017d8 <Keypad_Init+0x6c>)
 80017ae:	4b0a      	ldr	r3, [pc, #40]	; (80017d8 <Keypad_Init+0x6c>)
 80017b0:	68db      	ldr	r3, [r3, #12]
 80017b2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80017b6:	60d3      	str	r3, [r2, #12]
	KEY_COLS_GPIO->PUPDR	|=  KEY_COLS_PUPDR_UP_MASK;
 80017b8:	4a07      	ldr	r2, [pc, #28]	; (80017d8 <Keypad_Init+0x6c>)
 80017ba:	4b07      	ldr	r3, [pc, #28]	; (80017d8 <Keypad_Init+0x6c>)
 80017bc:	68db      	ldr	r3, [r3, #12]
 80017be:	f043 0315 	orr.w	r3, r3, #21
 80017c2:	60d3      	str	r3, [r2, #12]
}
 80017c4:	bf00      	nop
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	40023800 	.word	0x40023800
 80017d4:	40020000 	.word	0x40020000
 80017d8:	40020400 	.word	0x40020400

080017dc <Keypad_GetKey>:
/* Key -> 1:9
 * Key 1 -> R1 and C1
 * 0 -> No pressed key
 *  */
uint8_t	Keypad_GetKey(void){
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
	 *		de-activate this row
	 *  endfor
	 *
	 *	return 0
	 * */
	uint8_t key = 0;
 80017e2:	2300      	movs	r3, #0
 80017e4:	717b      	strb	r3, [r7, #5]
	uint8_t rowInd = 0;
 80017e6:	2300      	movs	r3, #0
 80017e8:	71fb      	strb	r3, [r7, #7]
	uint8_t colInd = 0;
 80017ea:	2300      	movs	r3, #0
 80017ec:	71bb      	strb	r3, [r7, #6]
	for (rowInd = 0; rowInd < 3; ++rowInd) {
 80017ee:	2300      	movs	r3, #0
 80017f0:	71fb      	strb	r3, [r7, #7]
 80017f2:	e04c      	b.n	800188e <Keypad_GetKey+0xb2>
		KEY_ROWS_GPIO->ODR &= ~(1<<(rowInd + KEY_ROWS_SHIFT));
 80017f4:	492a      	ldr	r1, [pc, #168]	; (80018a0 <Keypad_GetKey+0xc4>)
 80017f6:	4b2a      	ldr	r3, [pc, #168]	; (80018a0 <Keypad_GetKey+0xc4>)
 80017f8:	695b      	ldr	r3, [r3, #20]
 80017fa:	79fa      	ldrb	r2, [r7, #7]
 80017fc:	3205      	adds	r2, #5
 80017fe:	2001      	movs	r0, #1
 8001800:	fa00 f202 	lsl.w	r2, r0, r2
 8001804:	43d2      	mvns	r2, r2
 8001806:	4013      	ands	r3, r2
 8001808:	614b      	str	r3, [r1, #20]
		delayMs(1);
 800180a:	2001      	movs	r0, #1
 800180c:	f002 fd1a 	bl	8004244 <delayMs>
		for (colInd = 0; colInd < 3; ++colInd) {
 8001810:	2300      	movs	r3, #0
 8001812:	71bb      	strb	r3, [r7, #6]
 8001814:	e02b      	b.n	800186e <Keypad_GetKey+0x92>
			if( !((KEY_COLS_GPIO->IDR) & (1<<(colInd + KEY_COLS_SHIFT)) ) ){
 8001816:	4b23      	ldr	r3, [pc, #140]	; (80018a4 <Keypad_GetKey+0xc8>)
 8001818:	691b      	ldr	r3, [r3, #16]
 800181a:	79ba      	ldrb	r2, [r7, #6]
 800181c:	2101      	movs	r1, #1
 800181e:	fa01 f202 	lsl.w	r2, r1, r2
 8001822:	4013      	ands	r3, r2
 8001824:	2b00      	cmp	r3, #0
 8001826:	d11f      	bne.n	8001868 <Keypad_GetKey+0x8c>
				key = colInd*1 + rowInd*3 + 1;
 8001828:	79fb      	ldrb	r3, [r7, #7]
 800182a:	461a      	mov	r2, r3
 800182c:	0052      	lsls	r2, r2, #1
 800182e:	4413      	add	r3, r2
 8001830:	b2da      	uxtb	r2, r3
 8001832:	79bb      	ldrb	r3, [r7, #6]
 8001834:	4413      	add	r3, r2
 8001836:	b2db      	uxtb	r3, r3
 8001838:	3301      	adds	r3, #1
 800183a:	717b      	strb	r3, [r7, #5]
				KEY_ROWS_GPIO->ODR |= (1<<(rowInd + KEY_ROWS_SHIFT));
 800183c:	4918      	ldr	r1, [pc, #96]	; (80018a0 <Keypad_GetKey+0xc4>)
 800183e:	4b18      	ldr	r3, [pc, #96]	; (80018a0 <Keypad_GetKey+0xc4>)
 8001840:	695b      	ldr	r3, [r3, #20]
 8001842:	79fa      	ldrb	r2, [r7, #7]
 8001844:	3205      	adds	r2, #5
 8001846:	2001      	movs	r0, #1
 8001848:	fa00 f202 	lsl.w	r2, r0, r2
 800184c:	4313      	orrs	r3, r2
 800184e:	614b      	str	r3, [r1, #20]
				while( !((KEY_COLS_GPIO->IDR) & (1<<(colInd + KEY_COLS_SHIFT)) ) );
 8001850:	bf00      	nop
 8001852:	4b14      	ldr	r3, [pc, #80]	; (80018a4 <Keypad_GetKey+0xc8>)
 8001854:	691b      	ldr	r3, [r3, #16]
 8001856:	79ba      	ldrb	r2, [r7, #6]
 8001858:	2101      	movs	r1, #1
 800185a:	fa01 f202 	lsl.w	r2, r1, r2
 800185e:	4013      	ands	r3, r2
 8001860:	2b00      	cmp	r3, #0
 8001862:	d0f6      	beq.n	8001852 <Keypad_GetKey+0x76>
				return key;
 8001864:	797b      	ldrb	r3, [r7, #5]
 8001866:	e016      	b.n	8001896 <Keypad_GetKey+0xba>
		for (colInd = 0; colInd < 3; ++colInd) {
 8001868:	79bb      	ldrb	r3, [r7, #6]
 800186a:	3301      	adds	r3, #1
 800186c:	71bb      	strb	r3, [r7, #6]
 800186e:	79bb      	ldrb	r3, [r7, #6]
 8001870:	2b02      	cmp	r3, #2
 8001872:	d9d0      	bls.n	8001816 <Keypad_GetKey+0x3a>
			}
		}
		KEY_ROWS_GPIO->ODR |= (1<<(rowInd + KEY_ROWS_SHIFT));
 8001874:	490a      	ldr	r1, [pc, #40]	; (80018a0 <Keypad_GetKey+0xc4>)
 8001876:	4b0a      	ldr	r3, [pc, #40]	; (80018a0 <Keypad_GetKey+0xc4>)
 8001878:	695b      	ldr	r3, [r3, #20]
 800187a:	79fa      	ldrb	r2, [r7, #7]
 800187c:	3205      	adds	r2, #5
 800187e:	2001      	movs	r0, #1
 8001880:	fa00 f202 	lsl.w	r2, r0, r2
 8001884:	4313      	orrs	r3, r2
 8001886:	614b      	str	r3, [r1, #20]
	for (rowInd = 0; rowInd < 3; ++rowInd) {
 8001888:	79fb      	ldrb	r3, [r7, #7]
 800188a:	3301      	adds	r3, #1
 800188c:	71fb      	strb	r3, [r7, #7]
 800188e:	79fb      	ldrb	r3, [r7, #7]
 8001890:	2b02      	cmp	r3, #2
 8001892:	d9af      	bls.n	80017f4 <Keypad_GetKey+0x18>
	}
	return 0;
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	40020000 	.word	0x40020000
 80018a4:	40020400 	.word	0x40020400

080018a8 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80018ac:	4a12      	ldr	r2, [pc, #72]	; (80018f8 <RCC_DeInit+0x50>)
 80018ae:	4b12      	ldr	r3, [pc, #72]	; (80018f8 <RCC_DeInit+0x50>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f043 0301 	orr.w	r3, r3, #1
 80018b6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80018b8:	4b0f      	ldr	r3, [pc, #60]	; (80018f8 <RCC_DeInit+0x50>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON and PLLI2S bits */
  RCC->CR &= (uint32_t)0xFAF6FFFF;
 80018be:	4a0e      	ldr	r2, [pc, #56]	; (80018f8 <RCC_DeInit+0x50>)
 80018c0:	4b0d      	ldr	r3, [pc, #52]	; (80018f8 <RCC_DeInit+0x50>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f023 63a1 	bic.w	r3, r3, #84410368	; 0x5080000
 80018c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018cc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80018ce:	4b0a      	ldr	r3, [pc, #40]	; (80018f8 <RCC_DeInit+0x50>)
 80018d0:	4a0a      	ldr	r2, [pc, #40]	; (80018fc <RCC_DeInit+0x54>)
 80018d2:	605a      	str	r2, [r3, #4]

  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 80018d4:	4b08      	ldr	r3, [pc, #32]	; (80018f8 <RCC_DeInit+0x50>)
 80018d6:	4a0a      	ldr	r2, [pc, #40]	; (8001900 <RCC_DeInit+0x58>)
 80018d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80018dc:	4a06      	ldr	r2, [pc, #24]	; (80018f8 <RCC_DeInit+0x50>)
 80018de:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <RCC_DeInit+0x50>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018e6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80018e8:	4b03      	ldr	r3, [pc, #12]	; (80018f8 <RCC_DeInit+0x50>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	60da      	str	r2, [r3, #12]
#ifdef STM32F427X 
  /* Disable Timers clock prescalers selection */
  RCC->DCKCFGR = 0x00000000;
#endif /* STM32F427X */ 

}
 80018ee:	bf00      	nop
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr
 80018f8:	40023800 	.word	0x40023800
 80018fc:	24003010 	.word	0x24003010
 8001900:	20003000 	.word	0x20003000

08001904 <ADC1_Init>:
 *      Author: MahmoudH
 */

#include "ADC.h"

void ADC1_Init(void){
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
	/* ADC1 RCC */
	RCC->APB2ENR	|=	RCC_APB2ENR_ADC1EN;
 8001908:	4a0b      	ldr	r2, [pc, #44]	; (8001938 <ADC1_Init+0x34>)
 800190a:	4b0b      	ldr	r3, [pc, #44]	; (8001938 <ADC1_Init+0x34>)
 800190c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001912:	6453      	str	r3, [r2, #68]	; 0x44
	/* ADC ON */
	ADC1->CR2		|=	ADC_CR2_ADON;
 8001914:	4a09      	ldr	r2, [pc, #36]	; (800193c <ADC1_Init+0x38>)
 8001916:	4b09      	ldr	r3, [pc, #36]	; (800193c <ADC1_Init+0x38>)
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	f043 0301 	orr.w	r3, r3, #1
 800191e:	6093      	str	r3, [r2, #8]
	/* SQR1 -> Number of total conversions  = 1 */
	ADC1->SQR1		&= ~ADC_SQR1_L;
 8001920:	4a06      	ldr	r2, [pc, #24]	; (800193c <ADC1_Init+0x38>)
 8001922:	4b06      	ldr	r3, [pc, #24]	; (800193c <ADC1_Init+0x38>)
 8001924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001926:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800192a:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 800192c:	bf00      	nop
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	40023800 	.word	0x40023800
 800193c:	40012000 	.word	0x40012000

08001940 <ADC1_SelectChannel>:
void ADC1_SelectChannel(ADC_CH channel){
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	4603      	mov	r3, r0
 8001948:	71fb      	strb	r3, [r7, #7]
	switch (channel) {
 800194a:	79fb      	ldrb	r3, [r7, #7]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d002      	beq.n	8001956 <ADC1_SelectChannel+0x16>
 8001950:	2b01      	cmp	r3, #1
 8001952:	d00d      	beq.n	8001970 <ADC1_SelectChannel+0x30>
		RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
		/* Analog */
		GPIOA->MODER	|=  GPIO_MODER_MODER1;
		break;
	default:
		break;
 8001954:	e019      	b.n	800198a <ADC1_SelectChannel+0x4a>
		RCC->AHB1ENR 	|=  RCC_AHB1ENR_GPIOAEN;
 8001956:	4a16      	ldr	r2, [pc, #88]	; (80019b0 <ADC1_SelectChannel+0x70>)
 8001958:	4b15      	ldr	r3, [pc, #84]	; (80019b0 <ADC1_SelectChannel+0x70>)
 800195a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195c:	f043 0301 	orr.w	r3, r3, #1
 8001960:	6313      	str	r3, [r2, #48]	; 0x30
		GPIOA->MODER	|=  GPIO_MODER_MODER0;
 8001962:	4a14      	ldr	r2, [pc, #80]	; (80019b4 <ADC1_SelectChannel+0x74>)
 8001964:	4b13      	ldr	r3, [pc, #76]	; (80019b4 <ADC1_SelectChannel+0x74>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f043 0303 	orr.w	r3, r3, #3
 800196c:	6013      	str	r3, [r2, #0]
		break;
 800196e:	e00c      	b.n	800198a <ADC1_SelectChannel+0x4a>
		RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8001970:	4a0f      	ldr	r2, [pc, #60]	; (80019b0 <ADC1_SelectChannel+0x70>)
 8001972:	4b0f      	ldr	r3, [pc, #60]	; (80019b0 <ADC1_SelectChannel+0x70>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	f043 0301 	orr.w	r3, r3, #1
 800197a:	6313      	str	r3, [r2, #48]	; 0x30
		GPIOA->MODER	|=  GPIO_MODER_MODER1;
 800197c:	4a0d      	ldr	r2, [pc, #52]	; (80019b4 <ADC1_SelectChannel+0x74>)
 800197e:	4b0d      	ldr	r3, [pc, #52]	; (80019b4 <ADC1_SelectChannel+0x74>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f043 030c 	orr.w	r3, r3, #12
 8001986:	6013      	str	r3, [r2, #0]
		break;
 8001988:	bf00      	nop
	}
	ADC1->SQR3		&= ~ADC_SQR3_SQ1;
 800198a:	4a0b      	ldr	r2, [pc, #44]	; (80019b8 <ADC1_SelectChannel+0x78>)
 800198c:	4b0a      	ldr	r3, [pc, #40]	; (80019b8 <ADC1_SelectChannel+0x78>)
 800198e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001990:	f023 031f 	bic.w	r3, r3, #31
 8001994:	6353      	str	r3, [r2, #52]	; 0x34
	ADC1->SQR3		|=  channel;
 8001996:	4908      	ldr	r1, [pc, #32]	; (80019b8 <ADC1_SelectChannel+0x78>)
 8001998:	4b07      	ldr	r3, [pc, #28]	; (80019b8 <ADC1_SelectChannel+0x78>)
 800199a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800199c:	79fb      	ldrb	r3, [r7, #7]
 800199e:	4313      	orrs	r3, r2
 80019a0:	634b      	str	r3, [r1, #52]	; 0x34
}
 80019a2:	bf00      	nop
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	40023800 	.word	0x40023800
 80019b4:	40020000 	.word	0x40020000
 80019b8:	40012000 	.word	0x40012000

080019bc <ADC1_Read>:
uint16_t ADC1_Read(void){
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
	/* Start Conversion */
	ADC1->CR2		|=	ADC_CR2_SWSTART;
 80019c0:	4a0a      	ldr	r2, [pc, #40]	; (80019ec <ADC1_Read+0x30>)
 80019c2:	4b0a      	ldr	r3, [pc, #40]	; (80019ec <ADC1_Read+0x30>)
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80019ca:	6093      	str	r3, [r2, #8]
	/* Wait until conversion is completed */
	while( !(ADC1->SR & ADC_SR_EOC) );
 80019cc:	bf00      	nop
 80019ce:	4b07      	ldr	r3, [pc, #28]	; (80019ec <ADC1_Read+0x30>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0302 	and.w	r3, r3, #2
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d0f9      	beq.n	80019ce <ADC1_Read+0x12>
	/* return the conversion result */
	return ADC1->DR;
 80019da:	4b04      	ldr	r3, [pc, #16]	; (80019ec <ADC1_Read+0x30>)
 80019dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019de:	b29b      	uxth	r3, r3
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	40012000 	.word	0x40012000

080019f0 <TWI_Init>:
/* I2C1:
 * SCK: PB6
 * SDA: PB7
 * EEPROM AT24C16
 *  */
void TWI_Init(void){
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
	RCC->AHB1ENR 	|= 	RCC_AHB1ENR_GPIOBEN;
 80019f4:	4a37      	ldr	r2, [pc, #220]	; (8001ad4 <TWI_Init+0xe4>)
 80019f6:	4b37      	ldr	r3, [pc, #220]	; (8001ad4 <TWI_Init+0xe4>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	f043 0302 	orr.w	r3, r3, #2
 80019fe:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->APB1ENR 	|= 	RCC_APB1ENR_I2C1EN;
 8001a00:	4a34      	ldr	r2, [pc, #208]	; (8001ad4 <TWI_Init+0xe4>)
 8001a02:	4b34      	ldr	r3, [pc, #208]	; (8001ad4 <TWI_Init+0xe4>)
 8001a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a06:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a0a:	6413      	str	r3, [r2, #64]	; 0x40

	GPIOB->MODER 	&= 	~(0xF << (6 * 2));
 8001a0c:	4a32      	ldr	r2, [pc, #200]	; (8001ad8 <TWI_Init+0xe8>)
 8001a0e:	4b32      	ldr	r3, [pc, #200]	; (8001ad8 <TWI_Init+0xe8>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001a16:	6013      	str	r3, [r2, #0]
	GPIOB->MODER 	|= 	 (0xA << (6 * 2));
 8001a18:	4a2f      	ldr	r2, [pc, #188]	; (8001ad8 <TWI_Init+0xe8>)
 8001a1a:	4b2f      	ldr	r3, [pc, #188]	; (8001ad8 <TWI_Init+0xe8>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f443 4320 	orr.w	r3, r3, #40960	; 0xa000
 8001a22:	6013      	str	r3, [r2, #0]

	GPIOB->OTYPER	|= 	(3<<6); /* Open drain */
 8001a24:	4a2c      	ldr	r2, [pc, #176]	; (8001ad8 <TWI_Init+0xe8>)
 8001a26:	4b2c      	ldr	r3, [pc, #176]	; (8001ad8 <TWI_Init+0xe8>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001a2e:	6053      	str	r3, [r2, #4]


	//GPIOB->AFR[0] |= 0x4<<(6*4);
	//GPIOB->AFR[0] |= 0x4<<(7*4);

	GPIOB->AFR[0] 	&= ~(0xFF << (6 * 4));
 8001a30:	4a29      	ldr	r2, [pc, #164]	; (8001ad8 <TWI_Init+0xe8>)
 8001a32:	4b29      	ldr	r3, [pc, #164]	; (8001ad8 <TWI_Init+0xe8>)
 8001a34:	6a1b      	ldr	r3, [r3, #32]
 8001a36:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001a3a:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] 	|=  (0x4 << (6 * 4));
 8001a3c:	4a26      	ldr	r2, [pc, #152]	; (8001ad8 <TWI_Init+0xe8>)
 8001a3e:	4b26      	ldr	r3, [pc, #152]	; (8001ad8 <TWI_Init+0xe8>)
 8001a40:	6a1b      	ldr	r3, [r3, #32]
 8001a42:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001a46:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] 	|=  (0x4 << (7 * 4));
 8001a48:	4a23      	ldr	r2, [pc, #140]	; (8001ad8 <TWI_Init+0xe8>)
 8001a4a:	4b23      	ldr	r3, [pc, #140]	; (8001ad8 <TWI_Init+0xe8>)
 8001a4c:	6a1b      	ldr	r3, [r3, #32]
 8001a4e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001a52:	6213      	str	r3, [r2, #32]

	I2C1->CR1		&=	~(I2C_CR1_PE);
 8001a54:	4a21      	ldr	r2, [pc, #132]	; (8001adc <TWI_Init+0xec>)
 8001a56:	4b21      	ldr	r3, [pc, #132]	; (8001adc <TWI_Init+0xec>)
 8001a58:	881b      	ldrh	r3, [r3, #0]
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	f023 0301 	bic.w	r3, r3, #1
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	8013      	strh	r3, [r2, #0]

	/* Frequency Setup */
	I2C1->CCR 		&=	~I2C_CCR_FS; 	/* standard mode */
 8001a64:	4a1d      	ldr	r2, [pc, #116]	; (8001adc <TWI_Init+0xec>)
 8001a66:	4b1d      	ldr	r3, [pc, #116]	; (8001adc <TWI_Init+0xec>)
 8001a68:	8b9b      	ldrh	r3, [r3, #28]
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001a70:	b29b      	uxth	r3, r3
 8001a72:	8393      	strh	r3, [r2, #28]

	I2C1->CR2		&=	~I2C_CR2_FREQ;	/* Fpclk1 = 2MHz */
 8001a74:	4a19      	ldr	r2, [pc, #100]	; (8001adc <TWI_Init+0xec>)
 8001a76:	4b19      	ldr	r3, [pc, #100]	; (8001adc <TWI_Init+0xec>)
 8001a78:	889b      	ldrh	r3, [r3, #4]
 8001a7a:	b29b      	uxth	r3, r3
 8001a7c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a80:	b29b      	uxth	r3, r3
 8001a82:	8093      	strh	r3, [r2, #4]
	I2C1->CR2		|=   (2<<0);
 8001a84:	4a15      	ldr	r2, [pc, #84]	; (8001adc <TWI_Init+0xec>)
 8001a86:	4b15      	ldr	r3, [pc, #84]	; (8001adc <TWI_Init+0xec>)
 8001a88:	889b      	ldrh	r3, [r3, #4]
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	f043 0302 	orr.w	r3, r3, #2
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	8093      	strh	r3, [r2, #4]
	 	 Tp = Th + TL = 2*CCR*Tpclk
		CCR = Tp/(2*Tpclk1)
		CCR = Fpclk1/(2*Fsm)
       	   	= 20/2 = 10
	 */
	I2C1->CCR		&=	~I2C_CCR_CCR;
 8001a94:	4a11      	ldr	r2, [pc, #68]	; (8001adc <TWI_Init+0xec>)
 8001a96:	4b11      	ldr	r3, [pc, #68]	; (8001adc <TWI_Init+0xec>)
 8001a98:	8b9b      	ldrh	r3, [r3, #28]
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001aa0:	f023 030f 	bic.w	r3, r3, #15
 8001aa4:	b29b      	uxth	r3, r3
 8001aa6:	8393      	strh	r3, [r2, #28]
	I2C1->CCR		|=   (10<<0);
 8001aa8:	4a0c      	ldr	r2, [pc, #48]	; (8001adc <TWI_Init+0xec>)
 8001aaa:	4b0c      	ldr	r3, [pc, #48]	; (8001adc <TWI_Init+0xec>)
 8001aac:	8b9b      	ldrh	r3, [r3, #28]
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	f043 030a 	orr.w	r3, r3, #10
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	8393      	strh	r3, [r2, #28]
	/* Enable I2C */
	I2C1->CR1		|=   (I2C_CR1_PE);
 8001ab8:	4a08      	ldr	r2, [pc, #32]	; (8001adc <TWI_Init+0xec>)
 8001aba:	4b08      	ldr	r3, [pc, #32]	; (8001adc <TWI_Init+0xec>)
 8001abc:	881b      	ldrh	r3, [r3, #0]
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	f043 0301 	orr.w	r3, r3, #1
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	8013      	strh	r3, [r2, #0]
	delayMs(100);
 8001ac8:	2064      	movs	r0, #100	; 0x64
 8001aca:	f002 fbbb 	bl	8004244 <delayMs>
}
 8001ace:	bf00      	nop
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	40020400 	.word	0x40020400
 8001adc:	40005400 	.word	0x40005400

08001ae0 <I2C1_Start>:
	I2C1->CCR		|=   (10<<0);
	/* Enable I2C */
	I2C1->CR1		|=   (I2C_CR1_PE);
	delayMs(100);
}
void 	I2C1_Start(void){
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
	I2C1->CR1		|= I2C_CR1_START;
 8001ae4:	4a0a      	ldr	r2, [pc, #40]	; (8001b10 <I2C1_Start+0x30>)
 8001ae6:	4b0a      	ldr	r3, [pc, #40]	; (8001b10 <I2C1_Start+0x30>)
 8001ae8:	881b      	ldrh	r3, [r3, #0]
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001af0:	b29b      	uxth	r3, r3
 8001af2:	8013      	strh	r3, [r2, #0]
	while(!( I2C1->SR1 & I2C_SR1_SB));
 8001af4:	bf00      	nop
 8001af6:	4b06      	ldr	r3, [pc, #24]	; (8001b10 <I2C1_Start+0x30>)
 8001af8:	8a9b      	ldrh	r3, [r3, #20]
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	f003 0301 	and.w	r3, r3, #1
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d0f8      	beq.n	8001af6 <I2C1_Start+0x16>
}
 8001b04:	bf00      	nop
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	40005400 	.word	0x40005400

08001b14 <I2C1_Stop>:
void 	I2C1_Stop(void){
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
	I2C1->CR1		|= I2C_CR1_STOP;
 8001b18:	4a06      	ldr	r2, [pc, #24]	; (8001b34 <I2C1_Stop+0x20>)
 8001b1a:	4b06      	ldr	r3, [pc, #24]	; (8001b34 <I2C1_Stop+0x20>)
 8001b1c:	881b      	ldrh	r3, [r3, #0]
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	8013      	strh	r3, [r2, #0]
}
 8001b28:	bf00      	nop
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	40005400 	.word	0x40005400

08001b38 <I2C1_WriteData>:

void 	I2C1_WriteData(uint8_t data){
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	71fb      	strb	r3, [r7, #7]
	I2C1->DR	 = data;
 8001b42:	4b09      	ldr	r3, [pc, #36]	; (8001b68 <I2C1_WriteData+0x30>)
 8001b44:	79fa      	ldrb	r2, [r7, #7]
 8001b46:	b292      	uxth	r2, r2
 8001b48:	821a      	strh	r2, [r3, #16]
	while(!( I2C1->SR1 & I2C_SR1_TXE));
 8001b4a:	bf00      	nop
 8001b4c:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <I2C1_WriteData+0x30>)
 8001b4e:	8a9b      	ldrh	r3, [r3, #20]
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d0f8      	beq.n	8001b4c <I2C1_WriteData+0x14>
}
 8001b5a:	bf00      	nop
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	40005400 	.word	0x40005400

08001b6c <I2C1_WriteAddress>:
void 	I2C1_WriteAddress(uint8_t addr){
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	4603      	mov	r3, r0
 8001b74:	71fb      	strb	r3, [r7, #7]
	I2C1->DR	 = addr;
 8001b76:	4b0a      	ldr	r3, [pc, #40]	; (8001ba0 <I2C1_WriteAddress+0x34>)
 8001b78:	79fa      	ldrb	r2, [r7, #7]
 8001b7a:	b292      	uxth	r2, r2
 8001b7c:	821a      	strh	r2, [r3, #16]
	while(!( I2C1->SR1 & I2C_SR1_ADDR));
 8001b7e:	bf00      	nop
 8001b80:	4b07      	ldr	r3, [pc, #28]	; (8001ba0 <I2C1_WriteAddress+0x34>)
 8001b82:	8a9b      	ldrh	r3, [r3, #20]
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d0f8      	beq.n	8001b80 <I2C1_WriteAddress+0x14>
	/* dummy read to SR2 register to clear the address flag */
	(uint32_t)I2C1->SR2;
 8001b8e:	4b04      	ldr	r3, [pc, #16]	; (8001ba0 <I2C1_WriteAddress+0x34>)
 8001b90:	8b1b      	ldrh	r3, [r3, #24]
}
 8001b92:	bf00      	nop
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	40005400 	.word	0x40005400

08001ba4 <I2C1_ReadData>:
uint8_t I2C1_ReadData(void){
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
	/* ACK
	 * CR1_ACK
	 *  */
	while(!( I2C1->SR1 & I2C_SR1_RXNE));
 8001ba8:	bf00      	nop
 8001baa:	4b08      	ldr	r3, [pc, #32]	; (8001bcc <I2C1_ReadData+0x28>)
 8001bac:	8a9b      	ldrh	r3, [r3, #20]
 8001bae:	b29b      	uxth	r3, r3
 8001bb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d0f8      	beq.n	8001baa <I2C1_ReadData+0x6>
	return I2C1->DR;
 8001bb8:	4b04      	ldr	r3, [pc, #16]	; (8001bcc <I2C1_ReadData+0x28>)
 8001bba:	8a1b      	ldrh	r3, [r3, #16]
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	b2db      	uxtb	r3, r3
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	40005400 	.word	0x40005400

08001bd0 <SysTick_Handler>:
uint32_t 	SysTick_GetTicks(void){
	return ticks;
}

void SysTick_Handler(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
	osSystickHandler();
 8001bd4:	f000 f9a3 	bl	8001f1e <osSystickHandler>
}
 8001bd8:	bf00      	nop
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <TIM1_CC_IRQHandler>:



volatile uint32_t pulse_width = 0;
static volatile uint8_t  edge_state  = 0; /* 0: Rising, 1: Falling */
void TIM1_CC_IRQHandler(void){
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
	TIM1->SR &= ~TIM_SR_CC1IF;
 8001be0:	4a12      	ldr	r2, [pc, #72]	; (8001c2c <TIM1_CC_IRQHandler+0x50>)
 8001be2:	4b12      	ldr	r3, [pc, #72]	; (8001c2c <TIM1_CC_IRQHandler+0x50>)
 8001be4:	8a1b      	ldrh	r3, [r3, #16]
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	f023 0302 	bic.w	r3, r3, #2
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	8213      	strh	r3, [r2, #16]
	if(edge_state == 0){
 8001bf0:	4b0f      	ldr	r3, [pc, #60]	; (8001c30 <TIM1_CC_IRQHandler+0x54>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d106      	bne.n	8001c08 <TIM1_CC_IRQHandler+0x2c>
		/* Rising */
		TIM1->CNT = 0;
 8001bfa:	4b0c      	ldr	r3, [pc, #48]	; (8001c2c <TIM1_CC_IRQHandler+0x50>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	625a      	str	r2, [r3, #36]	; 0x24
		edge_state = 1;
 8001c00:	4b0b      	ldr	r3, [pc, #44]	; (8001c30 <TIM1_CC_IRQHandler+0x54>)
 8001c02:	2201      	movs	r2, #1
 8001c04:	701a      	strb	r2, [r3, #0]
	}else if(edge_state == 1){
		/* Falling */
		pulse_width = TIM1->CCR1;
		edge_state = 0;
	}
}
 8001c06:	e00b      	b.n	8001c20 <TIM1_CC_IRQHandler+0x44>
	}else if(edge_state == 1){
 8001c08:	4b09      	ldr	r3, [pc, #36]	; (8001c30 <TIM1_CC_IRQHandler+0x54>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d106      	bne.n	8001c20 <TIM1_CC_IRQHandler+0x44>
		pulse_width = TIM1->CCR1;
 8001c12:	4b06      	ldr	r3, [pc, #24]	; (8001c2c <TIM1_CC_IRQHandler+0x50>)
 8001c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c16:	4a07      	ldr	r2, [pc, #28]	; (8001c34 <TIM1_CC_IRQHandler+0x58>)
 8001c18:	6013      	str	r3, [r2, #0]
		edge_state = 0;
 8001c1a:	4b05      	ldr	r3, [pc, #20]	; (8001c30 <TIM1_CC_IRQHandler+0x54>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	701a      	strb	r2, [r3, #0]
}
 8001c20:	bf00      	nop
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	40010000 	.word	0x40010000
 8001c30:	20000038 	.word	0x20000038
 8001c34:	20000034 	.word	0x20000034

08001c38 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void){
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
	if(TIM3->SR & TIM_SR_UIF){
 8001c3c:	4b09      	ldr	r3, [pc, #36]	; (8001c64 <TIM3_IRQHandler+0x2c>)
 8001c3e:	8a1b      	ldrh	r3, [r3, #16]
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d00a      	beq.n	8001c60 <TIM3_IRQHandler+0x28>
		TIM3->SR &= ~TIM_SR_UIF;
 8001c4a:	4a06      	ldr	r2, [pc, #24]	; (8001c64 <TIM3_IRQHandler+0x2c>)
 8001c4c:	4b05      	ldr	r3, [pc, #20]	; (8001c64 <TIM3_IRQHandler+0x2c>)
 8001c4e:	8a1b      	ldrh	r3, [r3, #16]
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	f023 0301 	bic.w	r3, r3, #1
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	8213      	strh	r3, [r2, #16]
		notifyHandle();
 8001c5a:	4b03      	ldr	r3, [pc, #12]	; (8001c68 <TIM3_IRQHandler+0x30>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4798      	blx	r3
		//TIM3->CR1	&= ~TIM_CR1_CEN;
	}
}
 8001c60:	bf00      	nop
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	40000400 	.word	0x40000400
 8001c68:	20003e14 	.word	0x20003e14

08001c6c <Uart_Init>:
 */

#include "uart.h"

/* UART2 */
void Uart_Init(USART_TypeDef* uart, uint32_t baudrate){
 8001c6c:	b5b0      	push	{r4, r5, r7, lr}
 8001c6e:	b086      	sub	sp, #24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
	uint8_t frac;
	uint16_t integ;
	float UARTDIV;

	if(uart == USART2){
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	4a87      	ldr	r2, [pc, #540]	; (8001e98 <Uart_Init+0x22c>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d13c      	bne.n	8001cf8 <Uart_Init+0x8c>
		RCC->AHB1ENR	|=RCC_AHB1ENR_GPIOAEN;
 8001c7e:	4a87      	ldr	r2, [pc, #540]	; (8001e9c <Uart_Init+0x230>)
 8001c80:	4b86      	ldr	r3, [pc, #536]	; (8001e9c <Uart_Init+0x230>)
 8001c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c84:	f043 0301 	orr.w	r3, r3, #1
 8001c88:	6313      	str	r3, [r2, #48]	; 0x30
		GPIOA->MODER	&= ~(3<<(2*2));
 8001c8a:	4a85      	ldr	r2, [pc, #532]	; (8001ea0 <Uart_Init+0x234>)
 8001c8c:	4b84      	ldr	r3, [pc, #528]	; (8001ea0 <Uart_Init+0x234>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001c94:	6013      	str	r3, [r2, #0]
		GPIOA->MODER	&= ~(3<<(3*2));
 8001c96:	4a82      	ldr	r2, [pc, #520]	; (8001ea0 <Uart_Init+0x234>)
 8001c98:	4b81      	ldr	r3, [pc, #516]	; (8001ea0 <Uart_Init+0x234>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001ca0:	6013      	str	r3, [r2, #0]
		GPIOA->MODER	|= (2<<(2*2));
 8001ca2:	4a7f      	ldr	r2, [pc, #508]	; (8001ea0 <Uart_Init+0x234>)
 8001ca4:	4b7e      	ldr	r3, [pc, #504]	; (8001ea0 <Uart_Init+0x234>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f043 0320 	orr.w	r3, r3, #32
 8001cac:	6013      	str	r3, [r2, #0]
		GPIOA->MODER	|= (2<<(3*2));
 8001cae:	4a7c      	ldr	r2, [pc, #496]	; (8001ea0 <Uart_Init+0x234>)
 8001cb0:	4b7b      	ldr	r3, [pc, #492]	; (8001ea0 <Uart_Init+0x234>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cb8:	6013      	str	r3, [r2, #0]

		GPIOA->AFR[0]	&= ~(0xF<<(2*4));
 8001cba:	4a79      	ldr	r2, [pc, #484]	; (8001ea0 <Uart_Init+0x234>)
 8001cbc:	4b78      	ldr	r3, [pc, #480]	; (8001ea0 <Uart_Init+0x234>)
 8001cbe:	6a1b      	ldr	r3, [r3, #32]
 8001cc0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001cc4:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0]	&= ~(0xF<<(3*4));
 8001cc6:	4a76      	ldr	r2, [pc, #472]	; (8001ea0 <Uart_Init+0x234>)
 8001cc8:	4b75      	ldr	r3, [pc, #468]	; (8001ea0 <Uart_Init+0x234>)
 8001cca:	6a1b      	ldr	r3, [r3, #32]
 8001ccc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001cd0:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0]	|= (0x7<<(2*4));
 8001cd2:	4a73      	ldr	r2, [pc, #460]	; (8001ea0 <Uart_Init+0x234>)
 8001cd4:	4b72      	ldr	r3, [pc, #456]	; (8001ea0 <Uart_Init+0x234>)
 8001cd6:	6a1b      	ldr	r3, [r3, #32]
 8001cd8:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001cdc:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0]	|= (0x7<<(3*4));
 8001cde:	4a70      	ldr	r2, [pc, #448]	; (8001ea0 <Uart_Init+0x234>)
 8001ce0:	4b6f      	ldr	r3, [pc, #444]	; (8001ea0 <Uart_Init+0x234>)
 8001ce2:	6a1b      	ldr	r3, [r3, #32]
 8001ce4:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8001ce8:	6213      	str	r3, [r2, #32]
		RCC->APB1ENR	|= RCC_APB1ENR_USART2EN;
 8001cea:	4a6c      	ldr	r2, [pc, #432]	; (8001e9c <Uart_Init+0x230>)
 8001cec:	4b6b      	ldr	r3, [pc, #428]	; (8001e9c <Uart_Init+0x230>)
 8001cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cf4:	6413      	str	r3, [r2, #64]	; 0x40
 8001cf6:	e080      	b.n	8001dfa <Uart_Init+0x18e>
	}else if(uart == USART1){
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	4a6a      	ldr	r2, [pc, #424]	; (8001ea4 <Uart_Init+0x238>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d13c      	bne.n	8001d7a <Uart_Init+0x10e>
		RCC->AHB1ENR	|=RCC_AHB1ENR_GPIOAEN;
 8001d00:	4a66      	ldr	r2, [pc, #408]	; (8001e9c <Uart_Init+0x230>)
 8001d02:	4b66      	ldr	r3, [pc, #408]	; (8001e9c <Uart_Init+0x230>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	f043 0301 	orr.w	r3, r3, #1
 8001d0a:	6313      	str	r3, [r2, #48]	; 0x30
		GPIOA->MODER	&= ~(3<<(9*2));
 8001d0c:	4a64      	ldr	r2, [pc, #400]	; (8001ea0 <Uart_Init+0x234>)
 8001d0e:	4b64      	ldr	r3, [pc, #400]	; (8001ea0 <Uart_Init+0x234>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8001d16:	6013      	str	r3, [r2, #0]
		GPIOA->MODER	&= ~(3<<(10*2));
 8001d18:	4a61      	ldr	r2, [pc, #388]	; (8001ea0 <Uart_Init+0x234>)
 8001d1a:	4b61      	ldr	r3, [pc, #388]	; (8001ea0 <Uart_Init+0x234>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001d22:	6013      	str	r3, [r2, #0]
		GPIOA->MODER	|= (2<<(9*2));
 8001d24:	4a5e      	ldr	r2, [pc, #376]	; (8001ea0 <Uart_Init+0x234>)
 8001d26:	4b5e      	ldr	r3, [pc, #376]	; (8001ea0 <Uart_Init+0x234>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001d2e:	6013      	str	r3, [r2, #0]
		GPIOA->MODER	|= (2<<(10*2));
 8001d30:	4a5b      	ldr	r2, [pc, #364]	; (8001ea0 <Uart_Init+0x234>)
 8001d32:	4b5b      	ldr	r3, [pc, #364]	; (8001ea0 <Uart_Init+0x234>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d3a:	6013      	str	r3, [r2, #0]

		GPIOA->AFR[1]	&= ~(0xF<<(1*4));
 8001d3c:	4a58      	ldr	r2, [pc, #352]	; (8001ea0 <Uart_Init+0x234>)
 8001d3e:	4b58      	ldr	r3, [pc, #352]	; (8001ea0 <Uart_Init+0x234>)
 8001d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d46:	6253      	str	r3, [r2, #36]	; 0x24
		GPIOA->AFR[1]	&= ~(0xF<<(2*4));
 8001d48:	4a55      	ldr	r2, [pc, #340]	; (8001ea0 <Uart_Init+0x234>)
 8001d4a:	4b55      	ldr	r3, [pc, #340]	; (8001ea0 <Uart_Init+0x234>)
 8001d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d52:	6253      	str	r3, [r2, #36]	; 0x24
		GPIOA->AFR[1]	|= (0x7<<(1*4));
 8001d54:	4a52      	ldr	r2, [pc, #328]	; (8001ea0 <Uart_Init+0x234>)
 8001d56:	4b52      	ldr	r3, [pc, #328]	; (8001ea0 <Uart_Init+0x234>)
 8001d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8001d5e:	6253      	str	r3, [r2, #36]	; 0x24
		GPIOA->AFR[1]	|= (0x7<<(2*4));
 8001d60:	4a4f      	ldr	r2, [pc, #316]	; (8001ea0 <Uart_Init+0x234>)
 8001d62:	4b4f      	ldr	r3, [pc, #316]	; (8001ea0 <Uart_Init+0x234>)
 8001d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d66:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001d6a:	6253      	str	r3, [r2, #36]	; 0x24
		RCC->APB2ENR	|= RCC_APB2ENR_USART1EN;
 8001d6c:	4a4b      	ldr	r2, [pc, #300]	; (8001e9c <Uart_Init+0x230>)
 8001d6e:	4b4b      	ldr	r3, [pc, #300]	; (8001e9c <Uart_Init+0x230>)
 8001d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d72:	f043 0310 	orr.w	r3, r3, #16
 8001d76:	6453      	str	r3, [r2, #68]	; 0x44
 8001d78:	e03f      	b.n	8001dfa <Uart_Init+0x18e>

	}else if(uart == USART6){
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	4a4a      	ldr	r2, [pc, #296]	; (8001ea8 <Uart_Init+0x23c>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d13b      	bne.n	8001dfa <Uart_Init+0x18e>
		RCC->AHB1ENR	|=RCC_AHB1ENR_GPIOCEN;
 8001d82:	4a46      	ldr	r2, [pc, #280]	; (8001e9c <Uart_Init+0x230>)
 8001d84:	4b45      	ldr	r3, [pc, #276]	; (8001e9c <Uart_Init+0x230>)
 8001d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d88:	f043 0304 	orr.w	r3, r3, #4
 8001d8c:	6313      	str	r3, [r2, #48]	; 0x30
		GPIOA->MODER	&= ~(3<<(6*2));
 8001d8e:	4a44      	ldr	r2, [pc, #272]	; (8001ea0 <Uart_Init+0x234>)
 8001d90:	4b43      	ldr	r3, [pc, #268]	; (8001ea0 <Uart_Init+0x234>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d98:	6013      	str	r3, [r2, #0]
		GPIOA->MODER	&= ~(3<<(7*2));
 8001d9a:	4a41      	ldr	r2, [pc, #260]	; (8001ea0 <Uart_Init+0x234>)
 8001d9c:	4b40      	ldr	r3, [pc, #256]	; (8001ea0 <Uart_Init+0x234>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001da4:	6013      	str	r3, [r2, #0]
		GPIOA->MODER	|= (2<<(6*2));
 8001da6:	4a3e      	ldr	r2, [pc, #248]	; (8001ea0 <Uart_Init+0x234>)
 8001da8:	4b3d      	ldr	r3, [pc, #244]	; (8001ea0 <Uart_Init+0x234>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001db0:	6013      	str	r3, [r2, #0]
		GPIOA->MODER	|= (2<<(7*2));
 8001db2:	4a3b      	ldr	r2, [pc, #236]	; (8001ea0 <Uart_Init+0x234>)
 8001db4:	4b3a      	ldr	r3, [pc, #232]	; (8001ea0 <Uart_Init+0x234>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dbc:	6013      	str	r3, [r2, #0]

		GPIOA->AFR[0]	&= ~(0xF<<(6*4));
 8001dbe:	4a38      	ldr	r2, [pc, #224]	; (8001ea0 <Uart_Init+0x234>)
 8001dc0:	4b37      	ldr	r3, [pc, #220]	; (8001ea0 <Uart_Init+0x234>)
 8001dc2:	6a1b      	ldr	r3, [r3, #32]
 8001dc4:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001dc8:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0]	&= ~(0xF<<(7*4));
 8001dca:	4a35      	ldr	r2, [pc, #212]	; (8001ea0 <Uart_Init+0x234>)
 8001dcc:	4b34      	ldr	r3, [pc, #208]	; (8001ea0 <Uart_Init+0x234>)
 8001dce:	6a1b      	ldr	r3, [r3, #32]
 8001dd0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001dd4:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0]	|= (0x8<<(6*4));
 8001dd6:	4a32      	ldr	r2, [pc, #200]	; (8001ea0 <Uart_Init+0x234>)
 8001dd8:	4b31      	ldr	r3, [pc, #196]	; (8001ea0 <Uart_Init+0x234>)
 8001dda:	6a1b      	ldr	r3, [r3, #32]
 8001ddc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001de0:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0]	|= (0x8<<(7*4));
 8001de2:	4a2f      	ldr	r2, [pc, #188]	; (8001ea0 <Uart_Init+0x234>)
 8001de4:	4b2e      	ldr	r3, [pc, #184]	; (8001ea0 <Uart_Init+0x234>)
 8001de6:	6a1b      	ldr	r3, [r3, #32]
 8001de8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001dec:	6213      	str	r3, [r2, #32]
		RCC->APB2ENR	|= RCC_APB2ENR_USART6EN;
 8001dee:	4a2b      	ldr	r2, [pc, #172]	; (8001e9c <Uart_Init+0x230>)
 8001df0:	4b2a      	ldr	r3, [pc, #168]	; (8001e9c <Uart_Init+0x230>)
 8001df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df4:	f043 0320 	orr.w	r3, r3, #32
 8001df8:	6453      	str	r3, [r2, #68]	; 0x44

	}

	UARTDIV			= (SystemCoreClock/(16.0*baudrate));
 8001dfa:	4b2c      	ldr	r3, [pc, #176]	; (8001eac <Uart_Init+0x240>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7fe fb28 	bl	8000454 <__aeabi_ui2d>
 8001e04:	4604      	mov	r4, r0
 8001e06:	460d      	mov	r5, r1
 8001e08:	68b8      	ldr	r0, [r7, #8]
 8001e0a:	f7fe fb23 	bl	8000454 <__aeabi_ui2d>
 8001e0e:	f04f 0200 	mov.w	r2, #0
 8001e12:	4b27      	ldr	r3, [pc, #156]	; (8001eb0 <Uart_Init+0x244>)
 8001e14:	f7fe fb94 	bl	8000540 <__aeabi_dmul>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	4620      	mov	r0, r4
 8001e1e:	4629      	mov	r1, r5
 8001e20:	f7fe fcb8 	bl	8000794 <__aeabi_ddiv>
 8001e24:	4603      	mov	r3, r0
 8001e26:	460c      	mov	r4, r1
 8001e28:	4618      	mov	r0, r3
 8001e2a:	4621      	mov	r1, r4
 8001e2c:	f7fe fd9a 	bl	8000964 <__aeabi_d2f>
 8001e30:	4603      	mov	r3, r0
 8001e32:	617b      	str	r3, [r7, #20]
	integ			= (uint16_t)UARTDIV;
 8001e34:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e3c:	edc7 7a01 	vstr	s15, [r7, #4]
 8001e40:	88bb      	ldrh	r3, [r7, #4]
 8001e42:	827b      	strh	r3, [r7, #18]
	frac			= (UARTDIV-integ)*16;
 8001e44:	8a7b      	ldrh	r3, [r7, #18]
 8001e46:	ee07 3a90 	vmov	s15, r3
 8001e4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e4e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001e52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e56:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8001e5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e62:	edc7 7a01 	vstr	s15, [r7, #4]
 8001e66:	793b      	ldrb	r3, [r7, #4]
 8001e68:	747b      	strb	r3, [r7, #17]
	uart->BRR		=(integ<<4)+frac;
 8001e6a:	8a7b      	ldrh	r3, [r7, #18]
 8001e6c:	011b      	lsls	r3, r3, #4
 8001e6e:	b29a      	uxth	r2, r3
 8001e70:	7c7b      	ldrb	r3, [r7, #17]
 8001e72:	b29b      	uxth	r3, r3
 8001e74:	4413      	add	r3, r2
 8001e76:	b29a      	uxth	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	811a      	strh	r2, [r3, #8]

	uart->CR1		|=((USART_CR1_TE)|(USART_CR1_RE)|(USART_CR1_UE));
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	899b      	ldrh	r3, [r3, #12]
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001e86:	f043 030c 	orr.w	r3, r3, #12
 8001e8a:	b29a      	uxth	r2, r3
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	819a      	strh	r2, [r3, #12]

}
 8001e90:	bf00      	nop
 8001e92:	3718      	adds	r7, #24
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bdb0      	pop	{r4, r5, r7, pc}
 8001e98:	40004400 	.word	0x40004400
 8001e9c:	40023800 	.word	0x40023800
 8001ea0:	40020000 	.word	0x40020000
 8001ea4:	40011000 	.word	0x40011000
 8001ea8:	40011400 	.word	0x40011400
 8001eac:	20000004 	.word	0x20000004
 8001eb0:	40300000 	.word	0x40300000

08001eb4 <Uart_SendByte>:
void Uart_SendByte(USART_TypeDef* uart, uint8_t data){
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	70fb      	strb	r3, [r7, #3]
	while(!(uart->SR &USART_SR_TXE));
 8001ec0:	bf00      	nop
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	881b      	ldrh	r3, [r3, #0]
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d0f8      	beq.n	8001ec2 <Uart_SendByte+0xe>
	uart->DR 		= data;
 8001ed0:	78fb      	ldrb	r3, [r7, #3]
 8001ed2:	b29a      	uxth	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	809a      	strh	r2, [r3, #4]
}
 8001ed8:	bf00      	nop
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <Uart_SendString>:
void Uart_SendString(USART_TypeDef* uart, uint8_t* str){
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]
	uint32_t i = 0;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	60fb      	str	r3, [r7, #12]
	while(str[i])
 8001ef2:	e00a      	b.n	8001f0a <Uart_SendString+0x26>
	{
		Uart_SendByte(uart,str[i]);
 8001ef4:	683a      	ldr	r2, [r7, #0]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	4413      	add	r3, r2
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	4619      	mov	r1, r3
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f7ff ffd8 	bl	8001eb4 <Uart_SendByte>
		i++;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	3301      	adds	r3, #1
 8001f08:	60fb      	str	r3, [r7, #12]
	while(str[i])
 8001f0a:	683a      	ldr	r2, [r7, #0]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	4413      	add	r3, r2
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d1ee      	bne.n	8001ef4 <Uart_SendString+0x10>
	}
}
 8001f16:	bf00      	nop
 8001f18:	3710      	adds	r7, #16
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001f22:	f001 ffe5 	bl	8003ef0 <xTaskGetSchedulerState>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d001      	beq.n	8001f30 <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 8001f2c:	f000 fddc 	bl	8002ae8 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8001f30:	bf00      	nop
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 8001f3a:	2018      	movs	r0, #24
 8001f3c:	f000 f9bc 	bl	80022b8 <pvPortMalloc>
 8001f40:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d007      	beq.n	8001f58 <xEventGroupCreate+0x24>
		{
			pxEventBits->uxEventBits = 0;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	3304      	adds	r3, #4
 8001f52:	4618      	mov	r0, r3
 8001f54:	f000 fb86 	bl	8002664 <vListInitialise>
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 8001f58:	687b      	ldr	r3, [r7, #4]
	}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
	...

08001f64 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b090      	sub	sp, #64	; 0x40
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	60f8      	str	r0, [r7, #12]
 8001f6c:	60b9      	str	r1, [r7, #8]
 8001f6e:	607a      	str	r2, [r7, #4]
 8001f70:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8001f76:	2300      	movs	r3, #0
 8001f78:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d109      	bne.n	8001f98 <xEventGroupWaitBits+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f88:	f383 8811 	msr	BASEPRI, r3
 8001f8c:	f3bf 8f6f 	isb	sy
 8001f90:	f3bf 8f4f 	dsb	sy
 8001f94:	623b      	str	r3, [r7, #32]
 8001f96:	e7fe      	b.n	8001f96 <xEventGroupWaitBits+0x32>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d009      	beq.n	8001fb6 <xEventGroupWaitBits+0x52>
 8001fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fa6:	f383 8811 	msr	BASEPRI, r3
 8001faa:	f3bf 8f6f 	isb	sy
 8001fae:	f3bf 8f4f 	dsb	sy
 8001fb2:	61fb      	str	r3, [r7, #28]
 8001fb4:	e7fe      	b.n	8001fb4 <xEventGroupWaitBits+0x50>
	configASSERT( uxBitsToWaitFor != 0 );
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d109      	bne.n	8001fd0 <xEventGroupWaitBits+0x6c>
 8001fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fc0:	f383 8811 	msr	BASEPRI, r3
 8001fc4:	f3bf 8f6f 	isb	sy
 8001fc8:	f3bf 8f4f 	dsb	sy
 8001fcc:	61bb      	str	r3, [r7, #24]
 8001fce:	e7fe      	b.n	8001fce <xEventGroupWaitBits+0x6a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001fd0:	f001 ff8e 	bl	8003ef0 <xTaskGetSchedulerState>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d102      	bne.n	8001fe0 <xEventGroupWaitBits+0x7c>
 8001fda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d101      	bne.n	8001fe4 <xEventGroupWaitBits+0x80>
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e000      	b.n	8001fe6 <xEventGroupWaitBits+0x82>
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d109      	bne.n	8001ffe <xEventGroupWaitBits+0x9a>
 8001fea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fee:	f383 8811 	msr	BASEPRI, r3
 8001ff2:	f3bf 8f6f 	isb	sy
 8001ff6:	f3bf 8f4f 	dsb	sy
 8001ffa:	617b      	str	r3, [r7, #20]
 8001ffc:	e7fe      	b.n	8001ffc <xEventGroupWaitBits+0x98>
	}
	#endif

	vTaskSuspendAll();
 8001ffe:	f001 fb39 	bl	8003674 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8002002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8002008:	683a      	ldr	r2, [r7, #0]
 800200a:	68b9      	ldr	r1, [r7, #8]
 800200c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800200e:	f000 f930 	bl	8002272 <prvTestWaitCondition>
 8002012:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8002014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002016:	2b00      	cmp	r3, #0
 8002018:	d00e      	beq.n	8002038 <xEventGroupWaitBits+0xd4>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800201a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800201c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800201e:	2300      	movs	r3, #0
 8002020:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d026      	beq.n	8002076 <xEventGroupWaitBits+0x112>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8002028:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	43db      	mvns	r3, r3
 8002030:	401a      	ands	r2, r3
 8002032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002034:	601a      	str	r2, [r3, #0]
 8002036:	e01e      	b.n	8002076 <xEventGroupWaitBits+0x112>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8002038:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800203a:	2b00      	cmp	r3, #0
 800203c:	d102      	bne.n	8002044 <xEventGroupWaitBits+0xe0>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800203e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002040:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002042:	e018      	b.n	8002076 <xEventGroupWaitBits+0x112>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d003      	beq.n	8002052 <xEventGroupWaitBits+0xee>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800204a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800204c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002050:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d003      	beq.n	8002060 <xEventGroupWaitBits+0xfc>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8002058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800205a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800205e:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8002060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002062:	1d18      	adds	r0, r3, #4
 8002064:	68ba      	ldr	r2, [r7, #8]
 8002066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002068:	4313      	orrs	r3, r2
 800206a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800206c:	4619      	mov	r1, r3
 800206e:	f001 fce5 	bl	8003a3c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8002072:	2300      	movs	r3, #0
 8002074:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8002076:	f001 fb0b 	bl	8003690 <xTaskResumeAll>
 800207a:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800207c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800207e:	2b00      	cmp	r3, #0
 8002080:	d031      	beq.n	80020e6 <xEventGroupWaitBits+0x182>
	{
		if( xAlreadyYielded == pdFALSE )
 8002082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002084:	2b00      	cmp	r3, #0
 8002086:	d107      	bne.n	8002098 <xEventGroupWaitBits+0x134>
		{
			portYIELD_WITHIN_API();
 8002088:	4b19      	ldr	r3, [pc, #100]	; (80020f0 <xEventGroupWaitBits+0x18c>)
 800208a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	f3bf 8f4f 	dsb	sy
 8002094:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8002098:	f002 f842 	bl	8004120 <uxTaskResetEventItemValue>
 800209c:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800209e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d11a      	bne.n	80020de <xEventGroupWaitBits+0x17a>
		{
			taskENTER_CRITICAL();
 80020a8:	f000 fc92 	bl	80029d0 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80020ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80020b2:	683a      	ldr	r2, [r7, #0]
 80020b4:	68b9      	ldr	r1, [r7, #8]
 80020b6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80020b8:	f000 f8db 	bl	8002272 <prvTestWaitCondition>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d009      	beq.n	80020d6 <xEventGroupWaitBits+0x172>
				{
					if( xClearOnExit != pdFALSE )
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d006      	beq.n	80020d6 <xEventGroupWaitBits+0x172>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80020c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	43db      	mvns	r3, r3
 80020d0:	401a      	ands	r2, r3
 80020d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020d4:	601a      	str	r2, [r3, #0]
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 80020d6:	f000 fca9 	bl	8002a2c <vPortExitCritical>

			/* Prevent compiler warnings when trace macros are not used. */
			xTimeoutOccurred = pdFALSE;
 80020da:	2300      	movs	r3, #0
 80020dc:	633b      	str	r3, [r7, #48]	; 0x30
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80020de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020e0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80020e4:	63fb      	str	r3, [r7, #60]	; 0x3c
	}
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	return uxReturn;
 80020e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3740      	adds	r7, #64	; 0x40
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	e000ed04 	.word	0xe000ed04

080020f4 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b086      	sub	sp, #24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d109      	bne.n	800211c <xEventGroupClearBits+0x28>
 8002108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800210c:	f383 8811 	msr	BASEPRI, r3
 8002110:	f3bf 8f6f 	isb	sy
 8002114:	f3bf 8f4f 	dsb	sy
 8002118:	60fb      	str	r3, [r7, #12]
 800211a:	e7fe      	b.n	800211a <xEventGroupClearBits+0x26>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d009      	beq.n	800213a <xEventGroupClearBits+0x46>
 8002126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800212a:	f383 8811 	msr	BASEPRI, r3
 800212e:	f3bf 8f6f 	isb	sy
 8002132:	f3bf 8f4f 	dsb	sy
 8002136:	60bb      	str	r3, [r7, #8]
 8002138:	e7fe      	b.n	8002138 <xEventGroupClearBits+0x44>

	taskENTER_CRITICAL();
 800213a:	f000 fc49 	bl	80029d0 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	43db      	mvns	r3, r3
 800214c:	401a      	ands	r2, r3
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8002152:	f000 fc6b 	bl	8002a2c <vPortExitCritical>

	return uxReturn;
 8002156:	693b      	ldr	r3, [r7, #16]
}
 8002158:	4618      	mov	r0, r3
 800215a:	3718      	adds	r7, #24
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <xEventGroupSetBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b08e      	sub	sp, #56	; 0x38
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800216a:	2300      	movs	r3, #0
 800216c:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8002172:	2300      	movs	r3, #0
 8002174:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d109      	bne.n	8002190 <xEventGroupSetBits+0x30>
 800217c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002180:	f383 8811 	msr	BASEPRI, r3
 8002184:	f3bf 8f6f 	isb	sy
 8002188:	f3bf 8f4f 	dsb	sy
 800218c:	613b      	str	r3, [r7, #16]
 800218e:	e7fe      	b.n	800218e <xEventGroupSetBits+0x2e>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d009      	beq.n	80021ae <xEventGroupSetBits+0x4e>
 800219a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800219e:	f383 8811 	msr	BASEPRI, r3
 80021a2:	f3bf 8f6f 	isb	sy
 80021a6:	f3bf 8f4f 	dsb	sy
 80021aa:	60fb      	str	r3, [r7, #12]
 80021ac:	e7fe      	b.n	80021ac <xEventGroupSetBits+0x4c>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80021ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021b0:	3304      	adds	r3, #4
 80021b2:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b6:	3308      	adds	r3, #8
 80021b8:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80021ba:	f001 fa5b 	bl	8003674 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80021be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80021c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	431a      	orrs	r2, r3
 80021cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ce:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80021d0:	e03c      	b.n	800224c <xEventGroupSetBits+0xec>
		{
			pxNext = listGET_NEXT( pxListItem );
 80021d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80021d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80021de:	2300      	movs	r3, #0
 80021e0:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80021e8:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80021f0:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d108      	bne.n	800220e <xEventGroupSetBits+0xae>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80021fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	4013      	ands	r3, r2
 8002204:	2b00      	cmp	r3, #0
 8002206:	d00b      	beq.n	8002220 <xEventGroupSetBits+0xc0>
				{
					xMatchFound = pdTRUE;
 8002208:	2301      	movs	r3, #1
 800220a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800220c:	e008      	b.n	8002220 <xEventGroupSetBits+0xc0>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800220e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	401a      	ands	r2, r3
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	429a      	cmp	r2, r3
 800221a:	d101      	bne.n	8002220 <xEventGroupSetBits+0xc0>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800221c:	2301      	movs	r3, #1
 800221e:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8002220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002222:	2b00      	cmp	r3, #0
 8002224:	d010      	beq.n	8002248 <xEventGroupSetBits+0xe8>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d003      	beq.n	8002238 <xEventGroupSetBits+0xd8>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8002230:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	4313      	orrs	r3, r2
 8002236:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				( void ) xTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8002238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002240:	4619      	mov	r1, r3
 8002242:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002244:	f001 fc96 	bl	8003b74 <xTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 800224c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800224e:	6a3b      	ldr	r3, [r7, #32]
 8002250:	429a      	cmp	r2, r3
 8002252:	d1be      	bne.n	80021d2 <xEventGroupSetBits+0x72>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8002254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800225a:	43db      	mvns	r3, r3
 800225c:	401a      	ands	r2, r3
 800225e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002260:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8002262:	f001 fa15 	bl	8003690 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8002266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002268:	681b      	ldr	r3, [r3, #0]
}
 800226a:	4618      	mov	r0, r3
 800226c:	3738      	adds	r7, #56	; 0x38
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8002272:	b480      	push	{r7}
 8002274:	b087      	sub	sp, #28
 8002276:	af00      	add	r7, sp, #0
 8002278:	60f8      	str	r0, [r7, #12]
 800227a:	60b9      	str	r1, [r7, #8]
 800227c:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800227e:	2300      	movs	r3, #0
 8002280:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d107      	bne.n	8002298 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8002288:	68fa      	ldr	r2, [r7, #12]
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	4013      	ands	r3, r2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d00a      	beq.n	80022a8 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8002292:	2301      	movs	r3, #1
 8002294:	617b      	str	r3, [r7, #20]
 8002296:	e007      	b.n	80022a8 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8002298:	68fa      	ldr	r2, [r7, #12]
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	401a      	ands	r2, r3
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d101      	bne.n	80022a8 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80022a4:	2301      	movs	r3, #1
 80022a6:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 80022a8:	697b      	ldr	r3, [r7, #20]
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	371c      	adds	r7, #28
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
	...

080022b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b08a      	sub	sp, #40	; 0x28
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80022c0:	2300      	movs	r3, #0
 80022c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80022c4:	f001 f9d6 	bl	8003674 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80022c8:	4b57      	ldr	r3, [pc, #348]	; (8002428 <pvPortMalloc+0x170>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d101      	bne.n	80022d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80022d0:	f000 f90c 	bl	80024ec <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80022d4:	4b55      	ldr	r3, [pc, #340]	; (800242c <pvPortMalloc+0x174>)
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	4013      	ands	r3, r2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	f040 808c 	bne.w	80023fa <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d01c      	beq.n	8002322 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80022e8:	2208      	movs	r2, #8
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4413      	add	r3, r2
 80022ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f003 0307 	and.w	r3, r3, #7
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d013      	beq.n	8002322 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f023 0307 	bic.w	r3, r3, #7
 8002300:	3308      	adds	r3, #8
 8002302:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f003 0307 	and.w	r3, r3, #7
 800230a:	2b00      	cmp	r3, #0
 800230c:	d009      	beq.n	8002322 <pvPortMalloc+0x6a>
 800230e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002312:	f383 8811 	msr	BASEPRI, r3
 8002316:	f3bf 8f6f 	isb	sy
 800231a:	f3bf 8f4f 	dsb	sy
 800231e:	617b      	str	r3, [r7, #20]
 8002320:	e7fe      	b.n	8002320 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d068      	beq.n	80023fa <pvPortMalloc+0x142>
 8002328:	4b41      	ldr	r3, [pc, #260]	; (8002430 <pvPortMalloc+0x178>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	429a      	cmp	r2, r3
 8002330:	d863      	bhi.n	80023fa <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002332:	4b40      	ldr	r3, [pc, #256]	; (8002434 <pvPortMalloc+0x17c>)
 8002334:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002336:	4b3f      	ldr	r3, [pc, #252]	; (8002434 <pvPortMalloc+0x17c>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800233c:	e004      	b.n	8002348 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800233e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002340:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234a:	685a      	ldr	r2, [r3, #4]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	429a      	cmp	r2, r3
 8002350:	d203      	bcs.n	800235a <pvPortMalloc+0xa2>
 8002352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d1f1      	bne.n	800233e <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800235a:	4b33      	ldr	r3, [pc, #204]	; (8002428 <pvPortMalloc+0x170>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002360:	429a      	cmp	r2, r3
 8002362:	d04a      	beq.n	80023fa <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002364:	6a3b      	ldr	r3, [r7, #32]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2208      	movs	r2, #8
 800236a:	4413      	add	r3, r2
 800236c:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800236e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	6a3b      	ldr	r3, [r7, #32]
 8002374:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002378:	685a      	ldr	r2, [r3, #4]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	1ad2      	subs	r2, r2, r3
 800237e:	2308      	movs	r3, #8
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	429a      	cmp	r2, r3
 8002384:	d91e      	bls.n	80023c4 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002386:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	4413      	add	r3, r2
 800238c:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800238e:	69bb      	ldr	r3, [r7, #24]
 8002390:	f003 0307 	and.w	r3, r3, #7
 8002394:	2b00      	cmp	r3, #0
 8002396:	d009      	beq.n	80023ac <pvPortMalloc+0xf4>
 8002398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800239c:	f383 8811 	msr	BASEPRI, r3
 80023a0:	f3bf 8f6f 	isb	sy
 80023a4:	f3bf 8f4f 	dsb	sy
 80023a8:	613b      	str	r3, [r7, #16]
 80023aa:	e7fe      	b.n	80023aa <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80023ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ae:	685a      	ldr	r2, [r3, #4]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	1ad2      	subs	r2, r2, r3
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80023b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80023be:	69b8      	ldr	r0, [r7, #24]
 80023c0:	f000 f8f6 	bl	80025b0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80023c4:	4b1a      	ldr	r3, [pc, #104]	; (8002430 <pvPortMalloc+0x178>)
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	4a18      	ldr	r2, [pc, #96]	; (8002430 <pvPortMalloc+0x178>)
 80023d0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80023d2:	4b17      	ldr	r3, [pc, #92]	; (8002430 <pvPortMalloc+0x178>)
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	4b18      	ldr	r3, [pc, #96]	; (8002438 <pvPortMalloc+0x180>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	429a      	cmp	r2, r3
 80023dc:	d203      	bcs.n	80023e6 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80023de:	4b14      	ldr	r3, [pc, #80]	; (8002430 <pvPortMalloc+0x178>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a15      	ldr	r2, [pc, #84]	; (8002438 <pvPortMalloc+0x180>)
 80023e4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80023e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e8:	685a      	ldr	r2, [r3, #4]
 80023ea:	4b10      	ldr	r3, [pc, #64]	; (800242c <pvPortMalloc+0x174>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	431a      	orrs	r2, r3
 80023f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80023f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f6:	2200      	movs	r2, #0
 80023f8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80023fa:	f001 f949 	bl	8003690 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	f003 0307 	and.w	r3, r3, #7
 8002404:	2b00      	cmp	r3, #0
 8002406:	d009      	beq.n	800241c <pvPortMalloc+0x164>
 8002408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800240c:	f383 8811 	msr	BASEPRI, r3
 8002410:	f3bf 8f6f 	isb	sy
 8002414:	f3bf 8f4f 	dsb	sy
 8002418:	60fb      	str	r3, [r7, #12]
 800241a:	e7fe      	b.n	800241a <pvPortMalloc+0x162>
	return pvReturn;
 800241c:	69fb      	ldr	r3, [r7, #28]
}
 800241e:	4618      	mov	r0, r3
 8002420:	3728      	adds	r7, #40	; 0x28
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	20003c44 	.word	0x20003c44
 800242c:	20003c50 	.word	0x20003c50
 8002430:	20003c48 	.word	0x20003c48
 8002434:	20003c3c 	.word	0x20003c3c
 8002438:	20003c4c 	.word	0x20003c4c

0800243c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b086      	sub	sp, #24
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d046      	beq.n	80024dc <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800244e:	2308      	movs	r3, #8
 8002450:	425b      	negs	r3, r3
 8002452:	697a      	ldr	r2, [r7, #20]
 8002454:	4413      	add	r3, r2
 8002456:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	685a      	ldr	r2, [r3, #4]
 8002460:	4b20      	ldr	r3, [pc, #128]	; (80024e4 <vPortFree+0xa8>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4013      	ands	r3, r2
 8002466:	2b00      	cmp	r3, #0
 8002468:	d109      	bne.n	800247e <vPortFree+0x42>
 800246a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800246e:	f383 8811 	msr	BASEPRI, r3
 8002472:	f3bf 8f6f 	isb	sy
 8002476:	f3bf 8f4f 	dsb	sy
 800247a:	60fb      	str	r3, [r7, #12]
 800247c:	e7fe      	b.n	800247c <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d009      	beq.n	800249a <vPortFree+0x5e>
 8002486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800248a:	f383 8811 	msr	BASEPRI, r3
 800248e:	f3bf 8f6f 	isb	sy
 8002492:	f3bf 8f4f 	dsb	sy
 8002496:	60bb      	str	r3, [r7, #8]
 8002498:	e7fe      	b.n	8002498 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	685a      	ldr	r2, [r3, #4]
 800249e:	4b11      	ldr	r3, [pc, #68]	; (80024e4 <vPortFree+0xa8>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4013      	ands	r3, r2
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d019      	beq.n	80024dc <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d115      	bne.n	80024dc <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	685a      	ldr	r2, [r3, #4]
 80024b4:	4b0b      	ldr	r3, [pc, #44]	; (80024e4 <vPortFree+0xa8>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	43db      	mvns	r3, r3
 80024ba:	401a      	ands	r2, r3
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80024c0:	f001 f8d8 	bl	8003674 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	685a      	ldr	r2, [r3, #4]
 80024c8:	4b07      	ldr	r3, [pc, #28]	; (80024e8 <vPortFree+0xac>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4413      	add	r3, r2
 80024ce:	4a06      	ldr	r2, [pc, #24]	; (80024e8 <vPortFree+0xac>)
 80024d0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80024d2:	6938      	ldr	r0, [r7, #16]
 80024d4:	f000 f86c 	bl	80025b0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80024d8:	f001 f8da 	bl	8003690 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80024dc:	bf00      	nop
 80024de:	3718      	adds	r7, #24
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	20003c50 	.word	0x20003c50
 80024e8:	20003c48 	.word	0x20003c48

080024ec <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80024ec:	b480      	push	{r7}
 80024ee:	b085      	sub	sp, #20
 80024f0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80024f2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80024f6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80024f8:	4b27      	ldr	r3, [pc, #156]	; (8002598 <prvHeapInit+0xac>)
 80024fa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f003 0307 	and.w	r3, r3, #7
 8002502:	2b00      	cmp	r3, #0
 8002504:	d00c      	beq.n	8002520 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	3307      	adds	r3, #7
 800250a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f023 0307 	bic.w	r3, r3, #7
 8002512:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002514:	68ba      	ldr	r2, [r7, #8]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	4a1f      	ldr	r2, [pc, #124]	; (8002598 <prvHeapInit+0xac>)
 800251c:	4413      	add	r3, r2
 800251e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002524:	4a1d      	ldr	r2, [pc, #116]	; (800259c <prvHeapInit+0xb0>)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800252a:	4b1c      	ldr	r3, [pc, #112]	; (800259c <prvHeapInit+0xb0>)
 800252c:	2200      	movs	r2, #0
 800252e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	4413      	add	r3, r2
 8002536:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002538:	2208      	movs	r2, #8
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	1a9b      	subs	r3, r3, r2
 800253e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f023 0307 	bic.w	r3, r3, #7
 8002546:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	4a15      	ldr	r2, [pc, #84]	; (80025a0 <prvHeapInit+0xb4>)
 800254c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800254e:	4b14      	ldr	r3, [pc, #80]	; (80025a0 <prvHeapInit+0xb4>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2200      	movs	r2, #0
 8002554:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002556:	4b12      	ldr	r3, [pc, #72]	; (80025a0 <prvHeapInit+0xb4>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2200      	movs	r2, #0
 800255c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	68fa      	ldr	r2, [r7, #12]
 8002566:	1ad2      	subs	r2, r2, r3
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800256c:	4b0c      	ldr	r3, [pc, #48]	; (80025a0 <prvHeapInit+0xb4>)
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	4a0a      	ldr	r2, [pc, #40]	; (80025a4 <prvHeapInit+0xb8>)
 800257a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	4a09      	ldr	r2, [pc, #36]	; (80025a8 <prvHeapInit+0xbc>)
 8002582:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002584:	4b09      	ldr	r3, [pc, #36]	; (80025ac <prvHeapInit+0xc0>)
 8002586:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800258a:	601a      	str	r2, [r3, #0]
}
 800258c:	bf00      	nop
 800258e:	3714      	adds	r7, #20
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr
 8002598:	2000003c 	.word	0x2000003c
 800259c:	20003c3c 	.word	0x20003c3c
 80025a0:	20003c44 	.word	0x20003c44
 80025a4:	20003c4c 	.word	0x20003c4c
 80025a8:	20003c48 	.word	0x20003c48
 80025ac:	20003c50 	.word	0x20003c50

080025b0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80025b0:	b480      	push	{r7}
 80025b2:	b085      	sub	sp, #20
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80025b8:	4b28      	ldr	r3, [pc, #160]	; (800265c <prvInsertBlockIntoFreeList+0xac>)
 80025ba:	60fb      	str	r3, [r7, #12]
 80025bc:	e002      	b.n	80025c4 <prvInsertBlockIntoFreeList+0x14>
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	60fb      	str	r3, [r7, #12]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d3f7      	bcc.n	80025be <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	68ba      	ldr	r2, [r7, #8]
 80025d8:	441a      	add	r2, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d108      	bne.n	80025f2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	685a      	ldr	r2, [r3, #4]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	441a      	add	r2, r3
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	68ba      	ldr	r2, [r7, #8]
 80025fc:	441a      	add	r2, r3
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	429a      	cmp	r2, r3
 8002604:	d118      	bne.n	8002638 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	4b15      	ldr	r3, [pc, #84]	; (8002660 <prvInsertBlockIntoFreeList+0xb0>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	429a      	cmp	r2, r3
 8002610:	d00d      	beq.n	800262e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	685a      	ldr	r2, [r3, #4]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	441a      	add	r2, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	e008      	b.n	8002640 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800262e:	4b0c      	ldr	r3, [pc, #48]	; (8002660 <prvInsertBlockIntoFreeList+0xb0>)
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	601a      	str	r2, [r3, #0]
 8002636:	e003      	b.n	8002640 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002640:	68fa      	ldr	r2, [r7, #12]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	429a      	cmp	r2, r3
 8002646:	d002      	beq.n	800264e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800264e:	bf00      	nop
 8002650:	3714      	adds	r7, #20
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	20003c3c 	.word	0x20003c3c
 8002660:	20003c44 	.word	0x20003c44

08002664 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f103 0208 	add.w	r2, r3, #8
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f04f 32ff 	mov.w	r2, #4294967295
 800267c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f103 0208 	add.w	r2, r3, #8
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f103 0208 	add.w	r2, r3, #8
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002698:	bf00      	nop
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr

080026a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80026a4:	b480      	push	{r7}
 80026a6:	b083      	sub	sp, #12
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80026b2:	bf00      	nop
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr

080026be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80026be:	b480      	push	{r7}
 80026c0:	b085      	sub	sp, #20
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
 80026c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	68fa      	ldr	r2, [r7, #12]
 80026d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	689a      	ldr	r2, [r3, #8]
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	683a      	ldr	r2, [r7, #0]
 80026e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	683a      	ldr	r2, [r7, #0]
 80026e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	1c5a      	adds	r2, r3, #1
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	601a      	str	r2, [r3, #0]
}
 80026fa:	bf00      	nop
 80026fc:	3714      	adds	r7, #20
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr

08002706 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002706:	b480      	push	{r7}
 8002708:	b085      	sub	sp, #20
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
 800270e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800271c:	d103      	bne.n	8002726 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	60fb      	str	r3, [r7, #12]
 8002724:	e00c      	b.n	8002740 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	3308      	adds	r3, #8
 800272a:	60fb      	str	r3, [r7, #12]
 800272c:	e002      	b.n	8002734 <vListInsert+0x2e>
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	60fb      	str	r3, [r7, #12]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	429a      	cmp	r2, r3
 800273e:	d9f6      	bls.n	800272e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	685a      	ldr	r2, [r3, #4]
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	683a      	ldr	r2, [r7, #0]
 800274e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	68fa      	ldr	r2, [r7, #12]
 8002754:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	683a      	ldr	r2, [r7, #0]
 800275a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	1c5a      	adds	r2, r3, #1
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	601a      	str	r2, [r3, #0]
}
 800276c:	bf00      	nop
 800276e:	3714      	adds	r7, #20
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002778:	b480      	push	{r7}
 800277a:	b085      	sub	sp, #20
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	691b      	ldr	r3, [r3, #16]
 8002784:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	6892      	ldr	r2, [r2, #8]
 800278e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	6852      	ldr	r2, [r2, #4]
 8002798:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	685a      	ldr	r2, [r3, #4]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d103      	bne.n	80027ac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	689a      	ldr	r2, [r3, #8]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	1e5a      	subs	r2, r3, #1
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3714      	adds	r7, #20
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80027cc:	b480      	push	{r7}
 80027ce:	b085      	sub	sp, #20
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	3b04      	subs	r3, #4
 80027dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80027e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	3b04      	subs	r3, #4
 80027ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	f023 0201 	bic.w	r2, r3, #1
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	3b04      	subs	r3, #4
 80027fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80027fc:	4a0c      	ldr	r2, [pc, #48]	; (8002830 <pxPortInitialiseStack+0x64>)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	3b14      	subs	r3, #20
 8002806:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	3b04      	subs	r3, #4
 8002812:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f06f 0202 	mvn.w	r2, #2
 800281a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	3b20      	subs	r3, #32
 8002820:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002822:	68fb      	ldr	r3, [r7, #12]
}
 8002824:	4618      	mov	r0, r3
 8002826:	3714      	adds	r7, #20
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr
 8002830:	08002835 	.word	0x08002835

08002834 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800283a:	4b0c      	ldr	r3, [pc, #48]	; (800286c <prvTaskExitError+0x38>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002842:	d009      	beq.n	8002858 <prvTaskExitError+0x24>
 8002844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002848:	f383 8811 	msr	BASEPRI, r3
 800284c:	f3bf 8f6f 	isb	sy
 8002850:	f3bf 8f4f 	dsb	sy
 8002854:	607b      	str	r3, [r7, #4]
 8002856:	e7fe      	b.n	8002856 <prvTaskExitError+0x22>
 8002858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800285c:	f383 8811 	msr	BASEPRI, r3
 8002860:	f3bf 8f6f 	isb	sy
 8002864:	f3bf 8f4f 	dsb	sy
 8002868:	603b      	str	r3, [r7, #0]
	portDISABLE_INTERRUPTS();
	for( ;; );
 800286a:	e7fe      	b.n	800286a <prvTaskExitError+0x36>
 800286c:	20000000 	.word	0x20000000

08002870 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002870:	4b07      	ldr	r3, [pc, #28]	; (8002890 <pxCurrentTCBConst2>)
 8002872:	6819      	ldr	r1, [r3, #0]
 8002874:	6808      	ldr	r0, [r1, #0]
 8002876:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800287a:	f380 8809 	msr	PSP, r0
 800287e:	f3bf 8f6f 	isb	sy
 8002882:	f04f 0000 	mov.w	r0, #0
 8002886:	f380 8811 	msr	BASEPRI, r0
 800288a:	4770      	bx	lr
 800288c:	f3af 8000 	nop.w

08002890 <pxCurrentTCBConst2>:
 8002890:	20003c5c 	.word	0x20003c5c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002894:	bf00      	nop
 8002896:	bf00      	nop

08002898 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8002898:	4806      	ldr	r0, [pc, #24]	; (80028b4 <prvPortStartFirstTask+0x1c>)
 800289a:	6800      	ldr	r0, [r0, #0]
 800289c:	6800      	ldr	r0, [r0, #0]
 800289e:	f380 8808 	msr	MSP, r0
 80028a2:	b662      	cpsie	i
 80028a4:	b661      	cpsie	f
 80028a6:	f3bf 8f4f 	dsb	sy
 80028aa:	f3bf 8f6f 	isb	sy
 80028ae:	df00      	svc	0
 80028b0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80028b2:	bf00      	nop
 80028b4:	e000ed08 	.word	0xe000ed08

080028b8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b086      	sub	sp, #24
 80028bc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80028be:	4b3b      	ldr	r3, [pc, #236]	; (80029ac <xPortStartScheduler+0xf4>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a3b      	ldr	r2, [pc, #236]	; (80029b0 <xPortStartScheduler+0xf8>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d109      	bne.n	80028dc <xPortStartScheduler+0x24>
 80028c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028cc:	f383 8811 	msr	BASEPRI, r3
 80028d0:	f3bf 8f6f 	isb	sy
 80028d4:	f3bf 8f4f 	dsb	sy
 80028d8:	613b      	str	r3, [r7, #16]
 80028da:	e7fe      	b.n	80028da <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80028dc:	4b33      	ldr	r3, [pc, #204]	; (80029ac <xPortStartScheduler+0xf4>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a34      	ldr	r2, [pc, #208]	; (80029b4 <xPortStartScheduler+0xfc>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d109      	bne.n	80028fa <xPortStartScheduler+0x42>
 80028e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028ea:	f383 8811 	msr	BASEPRI, r3
 80028ee:	f3bf 8f6f 	isb	sy
 80028f2:	f3bf 8f4f 	dsb	sy
 80028f6:	60fb      	str	r3, [r7, #12]
 80028f8:	e7fe      	b.n	80028f8 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80028fa:	4b2f      	ldr	r3, [pc, #188]	; (80029b8 <xPortStartScheduler+0x100>)
 80028fc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	b2db      	uxtb	r3, r3
 8002904:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	22ff      	movs	r2, #255	; 0xff
 800290a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	b2db      	uxtb	r3, r3
 8002912:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002914:	79fb      	ldrb	r3, [r7, #7]
 8002916:	b2db      	uxtb	r3, r3
 8002918:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800291c:	b2da      	uxtb	r2, r3
 800291e:	4b27      	ldr	r3, [pc, #156]	; (80029bc <xPortStartScheduler+0x104>)
 8002920:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002922:	4b27      	ldr	r3, [pc, #156]	; (80029c0 <xPortStartScheduler+0x108>)
 8002924:	2207      	movs	r2, #7
 8002926:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002928:	e009      	b.n	800293e <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800292a:	4b25      	ldr	r3, [pc, #148]	; (80029c0 <xPortStartScheduler+0x108>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	3b01      	subs	r3, #1
 8002930:	4a23      	ldr	r2, [pc, #140]	; (80029c0 <xPortStartScheduler+0x108>)
 8002932:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002934:	79fb      	ldrb	r3, [r7, #7]
 8002936:	b2db      	uxtb	r3, r3
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	b2db      	uxtb	r3, r3
 800293c:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800293e:	79fb      	ldrb	r3, [r7, #7]
 8002940:	b2db      	uxtb	r3, r3
 8002942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002946:	2b80      	cmp	r3, #128	; 0x80
 8002948:	d0ef      	beq.n	800292a <xPortStartScheduler+0x72>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800294a:	4b1d      	ldr	r3, [pc, #116]	; (80029c0 <xPortStartScheduler+0x108>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	021b      	lsls	r3, r3, #8
 8002950:	4a1b      	ldr	r2, [pc, #108]	; (80029c0 <xPortStartScheduler+0x108>)
 8002952:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002954:	4b1a      	ldr	r3, [pc, #104]	; (80029c0 <xPortStartScheduler+0x108>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800295c:	4a18      	ldr	r2, [pc, #96]	; (80029c0 <xPortStartScheduler+0x108>)
 800295e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	b2da      	uxtb	r2, r3
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002968:	4a16      	ldr	r2, [pc, #88]	; (80029c4 <xPortStartScheduler+0x10c>)
 800296a:	4b16      	ldr	r3, [pc, #88]	; (80029c4 <xPortStartScheduler+0x10c>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002972:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002974:	4a13      	ldr	r2, [pc, #76]	; (80029c4 <xPortStartScheduler+0x10c>)
 8002976:	4b13      	ldr	r3, [pc, #76]	; (80029c4 <xPortStartScheduler+0x10c>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800297e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002980:	f000 f8d2 	bl	8002b28 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002984:	4b10      	ldr	r3, [pc, #64]	; (80029c8 <xPortStartScheduler+0x110>)
 8002986:	2200      	movs	r2, #0
 8002988:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800298a:	f000 f8e9 	bl	8002b60 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800298e:	4a0f      	ldr	r2, [pc, #60]	; (80029cc <xPortStartScheduler+0x114>)
 8002990:	4b0e      	ldr	r3, [pc, #56]	; (80029cc <xPortStartScheduler+0x114>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002998:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800299a:	f7ff ff7d 	bl	8002898 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 800299e:	f7ff ff49 	bl	8002834 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80029a2:	2300      	movs	r3, #0
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3718      	adds	r7, #24
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	e000ed00 	.word	0xe000ed00
 80029b0:	410fc271 	.word	0x410fc271
 80029b4:	410fc270 	.word	0x410fc270
 80029b8:	e000e400 	.word	0xe000e400
 80029bc:	20003c54 	.word	0x20003c54
 80029c0:	20003c58 	.word	0x20003c58
 80029c4:	e000ed20 	.word	0xe000ed20
 80029c8:	20000000 	.word	0x20000000
 80029cc:	e000ef34 	.word	0xe000ef34

080029d0 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029da:	f383 8811 	msr	BASEPRI, r3
 80029de:	f3bf 8f6f 	isb	sy
 80029e2:	f3bf 8f4f 	dsb	sy
 80029e6:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80029e8:	4b0e      	ldr	r3, [pc, #56]	; (8002a24 <vPortEnterCritical+0x54>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	3301      	adds	r3, #1
 80029ee:	4a0d      	ldr	r2, [pc, #52]	; (8002a24 <vPortEnterCritical+0x54>)
 80029f0:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80029f2:	4b0c      	ldr	r3, [pc, #48]	; (8002a24 <vPortEnterCritical+0x54>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d10e      	bne.n	8002a18 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80029fa:	4b0b      	ldr	r3, [pc, #44]	; (8002a28 <vPortEnterCritical+0x58>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d009      	beq.n	8002a18 <vPortEnterCritical+0x48>
 8002a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a08:	f383 8811 	msr	BASEPRI, r3
 8002a0c:	f3bf 8f6f 	isb	sy
 8002a10:	f3bf 8f4f 	dsb	sy
 8002a14:	603b      	str	r3, [r7, #0]
 8002a16:	e7fe      	b.n	8002a16 <vPortEnterCritical+0x46>
	}
}
 8002a18:	bf00      	nop
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a22:	4770      	bx	lr
 8002a24:	20000000 	.word	0x20000000
 8002a28:	e000ed04 	.word	0xe000ed04

08002a2c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002a32:	4b11      	ldr	r3, [pc, #68]	; (8002a78 <vPortExitCritical+0x4c>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d109      	bne.n	8002a4e <vPortExitCritical+0x22>
 8002a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a3e:	f383 8811 	msr	BASEPRI, r3
 8002a42:	f3bf 8f6f 	isb	sy
 8002a46:	f3bf 8f4f 	dsb	sy
 8002a4a:	607b      	str	r3, [r7, #4]
 8002a4c:	e7fe      	b.n	8002a4c <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8002a4e:	4b0a      	ldr	r3, [pc, #40]	; (8002a78 <vPortExitCritical+0x4c>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	3b01      	subs	r3, #1
 8002a54:	4a08      	ldr	r2, [pc, #32]	; (8002a78 <vPortExitCritical+0x4c>)
 8002a56:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002a58:	4b07      	ldr	r3, [pc, #28]	; (8002a78 <vPortExitCritical+0x4c>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d104      	bne.n	8002a6a <vPortExitCritical+0x3e>
 8002a60:	2300      	movs	r3, #0
 8002a62:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8002a6a:	bf00      	nop
 8002a6c:	370c      	adds	r7, #12
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	20000000 	.word	0x20000000
 8002a7c:	00000000 	.word	0x00000000

08002a80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002a80:	f3ef 8009 	mrs	r0, PSP
 8002a84:	f3bf 8f6f 	isb	sy
 8002a88:	4b15      	ldr	r3, [pc, #84]	; (8002ae0 <pxCurrentTCBConst>)
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	f01e 0f10 	tst.w	lr, #16
 8002a90:	bf08      	it	eq
 8002a92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002a96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a9a:	6010      	str	r0, [r2, #0]
 8002a9c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8002aa0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002aa4:	f380 8811 	msr	BASEPRI, r0
 8002aa8:	f3bf 8f4f 	dsb	sy
 8002aac:	f3bf 8f6f 	isb	sy
 8002ab0:	f000 ff46 	bl	8003940 <vTaskSwitchContext>
 8002ab4:	f04f 0000 	mov.w	r0, #0
 8002ab8:	f380 8811 	msr	BASEPRI, r0
 8002abc:	bc08      	pop	{r3}
 8002abe:	6819      	ldr	r1, [r3, #0]
 8002ac0:	6808      	ldr	r0, [r1, #0]
 8002ac2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ac6:	f01e 0f10 	tst.w	lr, #16
 8002aca:	bf08      	it	eq
 8002acc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002ad0:	f380 8809 	msr	PSP, r0
 8002ad4:	f3bf 8f6f 	isb	sy
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	f3af 8000 	nop.w

08002ae0 <pxCurrentTCBConst>:
 8002ae0:	20003c5c 	.word	0x20003c5c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002ae4:	bf00      	nop
 8002ae6:	bf00      	nop

08002ae8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
	__asm volatile
 8002aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002af2:	f383 8811 	msr	BASEPRI, r3
 8002af6:	f3bf 8f6f 	isb	sy
 8002afa:	f3bf 8f4f 	dsb	sy
 8002afe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002b00:	f000 fe62 	bl	80037c8 <xTaskIncrementTick>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d003      	beq.n	8002b12 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002b0a:	4b06      	ldr	r3, [pc, #24]	; (8002b24 <xPortSysTickHandler+0x3c>)
 8002b0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b10:	601a      	str	r2, [r3, #0]
 8002b12:	2300      	movs	r3, #0
 8002b14:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8002b1c:	bf00      	nop
 8002b1e:	3708      	adds	r7, #8
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	e000ed04 	.word	0xe000ed04

08002b28 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002b28:	b480      	push	{r7}
 8002b2a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002b2c:	4a08      	ldr	r2, [pc, #32]	; (8002b50 <vPortSetupTimerInterrupt+0x28>)
 8002b2e:	4b09      	ldr	r3, [pc, #36]	; (8002b54 <vPortSetupTimerInterrupt+0x2c>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4909      	ldr	r1, [pc, #36]	; (8002b58 <vPortSetupTimerInterrupt+0x30>)
 8002b34:	fba1 1303 	umull	r1, r3, r1, r3
 8002b38:	099b      	lsrs	r3, r3, #6
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002b3e:	4b07      	ldr	r3, [pc, #28]	; (8002b5c <vPortSetupTimerInterrupt+0x34>)
 8002b40:	2207      	movs	r2, #7
 8002b42:	601a      	str	r2, [r3, #0]
}
 8002b44:	bf00      	nop
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	e000e014 	.word	0xe000e014
 8002b54:	20000004 	.word	0x20000004
 8002b58:	10624dd3 	.word	0x10624dd3
 8002b5c:	e000e010 	.word	0xe000e010

08002b60 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002b60:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002b70 <vPortEnableVFP+0x10>
 8002b64:	6801      	ldr	r1, [r0, #0]
 8002b66:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002b6a:	6001      	str	r1, [r0, #0]
 8002b6c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8002b6e:	bf00      	nop
 8002b70:	e000ed88 	.word	0xe000ed88

08002b74 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d109      	bne.n	8002b9c <xQueueGenericReset+0x28>
	__asm volatile
 8002b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b8c:	f383 8811 	msr	BASEPRI, r3
 8002b90:	f3bf 8f6f 	isb	sy
 8002b94:	f3bf 8f4f 	dsb	sy
 8002b98:	60bb      	str	r3, [r7, #8]
 8002b9a:	e7fe      	b.n	8002b9a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8002b9c:	f7ff ff18 	bl	80029d0 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ba8:	68f9      	ldr	r1, [r7, #12]
 8002baa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002bac:	fb01 f303 	mul.w	r3, r1, r3
 8002bb0:	441a      	add	r2, r3
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bcc:	3b01      	subs	r3, #1
 8002bce:	68f9      	ldr	r1, [r7, #12]
 8002bd0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002bd2:	fb01 f303 	mul.w	r3, r1, r3
 8002bd6:	441a      	add	r2, r3
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	22ff      	movs	r2, #255	; 0xff
 8002be0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	22ff      	movs	r2, #255	; 0xff
 8002be8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d114      	bne.n	8002c1c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d01a      	beq.n	8002c30 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	3310      	adds	r3, #16
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f000 ff56 	bl	8003ab0 <xTaskRemoveFromEventList>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d012      	beq.n	8002c30 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002c0a:	4b0d      	ldr	r3, [pc, #52]	; (8002c40 <xQueueGenericReset+0xcc>)
 8002c0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c10:	601a      	str	r2, [r3, #0]
 8002c12:	f3bf 8f4f 	dsb	sy
 8002c16:	f3bf 8f6f 	isb	sy
 8002c1a:	e009      	b.n	8002c30 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	3310      	adds	r3, #16
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7ff fd1f 	bl	8002664 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	3324      	adds	r3, #36	; 0x24
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f7ff fd1a 	bl	8002664 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002c30:	f7ff fefc 	bl	8002a2c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002c34:	2301      	movs	r3, #1
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3710      	adds	r7, #16
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	e000ed04 	.word	0xe000ed04

08002c44 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b08a      	sub	sp, #40	; 0x28
 8002c48:	af02      	add	r7, sp, #8
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	4613      	mov	r3, r2
 8002c50:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d109      	bne.n	8002c6c <xQueueGenericCreate+0x28>
 8002c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c5c:	f383 8811 	msr	BASEPRI, r3
 8002c60:	f3bf 8f6f 	isb	sy
 8002c64:	f3bf 8f4f 	dsb	sy
 8002c68:	613b      	str	r3, [r7, #16]
 8002c6a:	e7fe      	b.n	8002c6a <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d102      	bne.n	8002c78 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002c72:	2300      	movs	r3, #0
 8002c74:	61fb      	str	r3, [r7, #28]
 8002c76:	e004      	b.n	8002c82 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	68ba      	ldr	r2, [r7, #8]
 8002c7c:	fb02 f303 	mul.w	r3, r2, r3
 8002c80:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	3348      	adds	r3, #72	; 0x48
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7ff fb16 	bl	80022b8 <pvPortMalloc>
 8002c8c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d00b      	beq.n	8002cac <xQueueGenericCreate+0x68>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	3348      	adds	r3, #72	; 0x48
 8002c98:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002c9a:	79fa      	ldrb	r2, [r7, #7]
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	9300      	str	r3, [sp, #0]
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	697a      	ldr	r2, [r7, #20]
 8002ca4:	68b9      	ldr	r1, [r7, #8]
 8002ca6:	68f8      	ldr	r0, [r7, #12]
 8002ca8:	f000 f805 	bl	8002cb6 <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 8002cac:	69bb      	ldr	r3, [r7, #24]
	}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3720      	adds	r7, #32
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	b084      	sub	sp, #16
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	60f8      	str	r0, [r7, #12]
 8002cbe:	60b9      	str	r1, [r7, #8]
 8002cc0:	607a      	str	r2, [r7, #4]
 8002cc2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d103      	bne.n	8002cd2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	601a      	str	r2, [r3, #0]
 8002cd0:	e002      	b.n	8002cd8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	68fa      	ldr	r2, [r7, #12]
 8002cdc:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002cde:	69bb      	ldr	r3, [r7, #24]
 8002ce0:	68ba      	ldr	r2, [r7, #8]
 8002ce2:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002ce4:	2101      	movs	r1, #1
 8002ce6:	69b8      	ldr	r0, [r7, #24]
 8002ce8:	f7ff ff44 	bl	8002b74 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002cec:	bf00      	nop
 8002cee:	3710      	adds	r7, #16
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b08e      	sub	sp, #56	; 0x38
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	607a      	str	r2, [r7, #4]
 8002d00:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002d02:	2300      	movs	r3, #0
 8002d04:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d109      	bne.n	8002d24 <xQueueGenericSend+0x30>
 8002d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d14:	f383 8811 	msr	BASEPRI, r3
 8002d18:	f3bf 8f6f 	isb	sy
 8002d1c:	f3bf 8f4f 	dsb	sy
 8002d20:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d22:	e7fe      	b.n	8002d22 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d103      	bne.n	8002d32 <xQueueGenericSend+0x3e>
 8002d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d101      	bne.n	8002d36 <xQueueGenericSend+0x42>
 8002d32:	2301      	movs	r3, #1
 8002d34:	e000      	b.n	8002d38 <xQueueGenericSend+0x44>
 8002d36:	2300      	movs	r3, #0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d109      	bne.n	8002d50 <xQueueGenericSend+0x5c>
 8002d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d40:	f383 8811 	msr	BASEPRI, r3
 8002d44:	f3bf 8f6f 	isb	sy
 8002d48:	f3bf 8f4f 	dsb	sy
 8002d4c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d4e:	e7fe      	b.n	8002d4e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d103      	bne.n	8002d5e <xQueueGenericSend+0x6a>
 8002d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d101      	bne.n	8002d62 <xQueueGenericSend+0x6e>
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e000      	b.n	8002d64 <xQueueGenericSend+0x70>
 8002d62:	2300      	movs	r3, #0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d109      	bne.n	8002d7c <xQueueGenericSend+0x88>
 8002d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d6c:	f383 8811 	msr	BASEPRI, r3
 8002d70:	f3bf 8f6f 	isb	sy
 8002d74:	f3bf 8f4f 	dsb	sy
 8002d78:	623b      	str	r3, [r7, #32]
 8002d7a:	e7fe      	b.n	8002d7a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002d7c:	f001 f8b8 	bl	8003ef0 <xTaskGetSchedulerState>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d102      	bne.n	8002d8c <xQueueGenericSend+0x98>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d101      	bne.n	8002d90 <xQueueGenericSend+0x9c>
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e000      	b.n	8002d92 <xQueueGenericSend+0x9e>
 8002d90:	2300      	movs	r3, #0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d109      	bne.n	8002daa <xQueueGenericSend+0xb6>
 8002d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d9a:	f383 8811 	msr	BASEPRI, r3
 8002d9e:	f3bf 8f6f 	isb	sy
 8002da2:	f3bf 8f4f 	dsb	sy
 8002da6:	61fb      	str	r3, [r7, #28]
 8002da8:	e7fe      	b.n	8002da8 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002daa:	f7ff fe11 	bl	80029d0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d302      	bcc.n	8002dc0 <xQueueGenericSend+0xcc>
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d129      	bne.n	8002e14 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002dc0:	683a      	ldr	r2, [r7, #0]
 8002dc2:	68b9      	ldr	r1, [r7, #8]
 8002dc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002dc6:	f000 f9a1 	bl	800310c <prvCopyDataToQueue>
 8002dca:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d010      	beq.n	8002df6 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd6:	3324      	adds	r3, #36	; 0x24
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f000 fe69 	bl	8003ab0 <xTaskRemoveFromEventList>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d013      	beq.n	8002e0c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002de4:	4b3f      	ldr	r3, [pc, #252]	; (8002ee4 <xQueueGenericSend+0x1f0>)
 8002de6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dea:	601a      	str	r2, [r3, #0]
 8002dec:	f3bf 8f4f 	dsb	sy
 8002df0:	f3bf 8f6f 	isb	sy
 8002df4:	e00a      	b.n	8002e0c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d007      	beq.n	8002e0c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002dfc:	4b39      	ldr	r3, [pc, #228]	; (8002ee4 <xQueueGenericSend+0x1f0>)
 8002dfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e02:	601a      	str	r2, [r3, #0]
 8002e04:	f3bf 8f4f 	dsb	sy
 8002e08:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002e0c:	f7ff fe0e 	bl	8002a2c <vPortExitCritical>
				return pdPASS;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e063      	b.n	8002edc <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d103      	bne.n	8002e22 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002e1a:	f7ff fe07 	bl	8002a2c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	e05c      	b.n	8002edc <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d106      	bne.n	8002e36 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8002e28:	f107 0314 	add.w	r3, r7, #20
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f000 ff07 	bl	8003c40 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002e32:	2301      	movs	r3, #1
 8002e34:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002e36:	f7ff fdf9 	bl	8002a2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002e3a:	f000 fc1b 	bl	8003674 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002e3e:	f7ff fdc7 	bl	80029d0 <vPortEnterCritical>
 8002e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e48:	b25b      	sxtb	r3, r3
 8002e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e4e:	d103      	bne.n	8002e58 <xQueueGenericSend+0x164>
 8002e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e5e:	b25b      	sxtb	r3, r3
 8002e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e64:	d103      	bne.n	8002e6e <xQueueGenericSend+0x17a>
 8002e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e6e:	f7ff fddd 	bl	8002a2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e72:	1d3a      	adds	r2, r7, #4
 8002e74:	f107 0314 	add.w	r3, r7, #20
 8002e78:	4611      	mov	r1, r2
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f000 ff04 	bl	8003c88 <xTaskCheckForTimeOut>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d124      	bne.n	8002ed0 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002e86:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e88:	f000 fa38 	bl	80032fc <prvIsQueueFull>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d018      	beq.n	8002ec4 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e94:	3310      	adds	r3, #16
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	4611      	mov	r1, r2
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f000 fdaa 	bl	80039f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002ea0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ea2:	f000 f9c3 	bl	800322c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002ea6:	f000 fbf3 	bl	8003690 <xTaskResumeAll>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	f47f af7c 	bne.w	8002daa <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8002eb2:	4b0c      	ldr	r3, [pc, #48]	; (8002ee4 <xQueueGenericSend+0x1f0>)
 8002eb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002eb8:	601a      	str	r2, [r3, #0]
 8002eba:	f3bf 8f4f 	dsb	sy
 8002ebe:	f3bf 8f6f 	isb	sy
 8002ec2:	e772      	b.n	8002daa <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002ec4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ec6:	f000 f9b1 	bl	800322c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002eca:	f000 fbe1 	bl	8003690 <xTaskResumeAll>
 8002ece:	e76c      	b.n	8002daa <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002ed0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ed2:	f000 f9ab 	bl	800322c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002ed6:	f000 fbdb 	bl	8003690 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002eda:	2300      	movs	r3, #0
		}
	}
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3738      	adds	r7, #56	; 0x38
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	e000ed04 	.word	0xe000ed04

08002ee8 <xQueueGenericReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b08e      	sub	sp, #56	; 0x38
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]
 8002ef4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d109      	bne.n	8002f18 <xQueueGenericReceive+0x30>
 8002f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f08:	f383 8811 	msr	BASEPRI, r3
 8002f0c:	f3bf 8f6f 	isb	sy
 8002f10:	f3bf 8f4f 	dsb	sy
 8002f14:	627b      	str	r3, [r7, #36]	; 0x24
 8002f16:	e7fe      	b.n	8002f16 <xQueueGenericReceive+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d103      	bne.n	8002f26 <xQueueGenericReceive+0x3e>
 8002f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d101      	bne.n	8002f2a <xQueueGenericReceive+0x42>
 8002f26:	2301      	movs	r3, #1
 8002f28:	e000      	b.n	8002f2c <xQueueGenericReceive+0x44>
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d109      	bne.n	8002f44 <xQueueGenericReceive+0x5c>
 8002f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f34:	f383 8811 	msr	BASEPRI, r3
 8002f38:	f3bf 8f6f 	isb	sy
 8002f3c:	f3bf 8f4f 	dsb	sy
 8002f40:	623b      	str	r3, [r7, #32]
 8002f42:	e7fe      	b.n	8002f42 <xQueueGenericReceive+0x5a>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f44:	f000 ffd4 	bl	8003ef0 <xTaskGetSchedulerState>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d102      	bne.n	8002f54 <xQueueGenericReceive+0x6c>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d101      	bne.n	8002f58 <xQueueGenericReceive+0x70>
 8002f54:	2301      	movs	r3, #1
 8002f56:	e000      	b.n	8002f5a <xQueueGenericReceive+0x72>
 8002f58:	2300      	movs	r3, #0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d109      	bne.n	8002f72 <xQueueGenericReceive+0x8a>
 8002f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f62:	f383 8811 	msr	BASEPRI, r3
 8002f66:	f3bf 8f6f 	isb	sy
 8002f6a:	f3bf 8f4f 	dsb	sy
 8002f6e:	61fb      	str	r3, [r7, #28]
 8002f70:	e7fe      	b.n	8002f70 <xQueueGenericReceive+0x88>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002f72:	f7ff fd2d 	bl	80029d0 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f7a:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d046      	beq.n	8003010 <xQueueGenericReceive+0x128>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 8002f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002f88:	68b9      	ldr	r1, [r7, #8]
 8002f8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f8c:	f000 f928 	bl	80031e0 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d121      	bne.n	8002fda <xQueueGenericReceive+0xf2>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8002f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f98:	1e5a      	subs	r2, r3, #1
 8002f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f9c:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d104      	bne.n	8002fb0 <xQueueGenericReceive+0xc8>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8002fa6:	f001 f8d3 	bl	8004150 <pvTaskIncrementMutexHeldCount>
 8002faa:	4602      	mov	r2, r0
 8002fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fae:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb2:	691b      	ldr	r3, [r3, #16]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d027      	beq.n	8003008 <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fba:	3310      	adds	r3, #16
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f000 fd77 	bl	8003ab0 <xTaskRemoveFromEventList>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d01f      	beq.n	8003008 <xQueueGenericReceive+0x120>
						{
							queueYIELD_IF_USING_PREEMPTION();
 8002fc8:	4b4f      	ldr	r3, [pc, #316]	; (8003108 <xQueueGenericReceive+0x220>)
 8002fca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fce:	601a      	str	r2, [r3, #0]
 8002fd0:	f3bf 8f4f 	dsb	sy
 8002fd4:	f3bf 8f6f 	isb	sy
 8002fd8:	e016      	b.n	8003008 <xQueueGenericReceive+0x120>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8002fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fde:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d00f      	beq.n	8003008 <xQueueGenericReceive+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fea:	3324      	adds	r3, #36	; 0x24
 8002fec:	4618      	mov	r0, r3
 8002fee:	f000 fd5f 	bl	8003ab0 <xTaskRemoveFromEventList>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d007      	beq.n	8003008 <xQueueGenericReceive+0x120>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 8002ff8:	4b43      	ldr	r3, [pc, #268]	; (8003108 <xQueueGenericReceive+0x220>)
 8002ffa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ffe:	601a      	str	r2, [r3, #0]
 8003000:	f3bf 8f4f 	dsb	sy
 8003004:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 8003008:	f7ff fd10 	bl	8002a2c <vPortExitCritical>
				return pdPASS;
 800300c:	2301      	movs	r3, #1
 800300e:	e077      	b.n	8003100 <xQueueGenericReceive+0x218>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d103      	bne.n	800301e <xQueueGenericReceive+0x136>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003016:	f7ff fd09 	bl	8002a2c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800301a:	2300      	movs	r3, #0
 800301c:	e070      	b.n	8003100 <xQueueGenericReceive+0x218>
				}
				else if( xEntryTimeSet == pdFALSE )
 800301e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003020:	2b00      	cmp	r3, #0
 8003022:	d106      	bne.n	8003032 <xQueueGenericReceive+0x14a>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 8003024:	f107 0314 	add.w	r3, r7, #20
 8003028:	4618      	mov	r0, r3
 800302a:	f000 fe09 	bl	8003c40 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800302e:	2301      	movs	r3, #1
 8003030:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003032:	f7ff fcfb 	bl	8002a2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003036:	f000 fb1d 	bl	8003674 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800303a:	f7ff fcc9 	bl	80029d0 <vPortEnterCritical>
 800303e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003040:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003044:	b25b      	sxtb	r3, r3
 8003046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800304a:	d103      	bne.n	8003054 <xQueueGenericReceive+0x16c>
 800304c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800304e:	2200      	movs	r2, #0
 8003050:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003056:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800305a:	b25b      	sxtb	r3, r3
 800305c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003060:	d103      	bne.n	800306a <xQueueGenericReceive+0x182>
 8003062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003064:	2200      	movs	r2, #0
 8003066:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800306a:	f7ff fcdf 	bl	8002a2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800306e:	1d3a      	adds	r2, r7, #4
 8003070:	f107 0314 	add.w	r3, r7, #20
 8003074:	4611      	mov	r1, r2
 8003076:	4618      	mov	r0, r3
 8003078:	f000 fe06 	bl	8003c88 <xTaskCheckForTimeOut>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d131      	bne.n	80030e6 <xQueueGenericReceive+0x1fe>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003082:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003084:	f000 f924 	bl	80032d0 <prvIsQueueEmpty>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d025      	beq.n	80030da <xQueueGenericReceive+0x1f2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800308e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d108      	bne.n	80030a8 <xQueueGenericReceive+0x1c0>
					{
						taskENTER_CRITICAL();
 8003096:	f7ff fc9b 	bl	80029d0 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800309a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	4618      	mov	r0, r3
 80030a0:	f000 ff44 	bl	8003f2c <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 80030a4:	f7ff fcc2 	bl	8002a2c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80030a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030aa:	3324      	adds	r3, #36	; 0x24
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	4611      	mov	r1, r2
 80030b0:	4618      	mov	r0, r3
 80030b2:	f000 fc9f 	bl	80039f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80030b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030b8:	f000 f8b8 	bl	800322c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80030bc:	f000 fae8 	bl	8003690 <xTaskResumeAll>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	f47f af55 	bne.w	8002f72 <xQueueGenericReceive+0x8a>
				{
					portYIELD_WITHIN_API();
 80030c8:	4b0f      	ldr	r3, [pc, #60]	; (8003108 <xQueueGenericReceive+0x220>)
 80030ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030ce:	601a      	str	r2, [r3, #0]
 80030d0:	f3bf 8f4f 	dsb	sy
 80030d4:	f3bf 8f6f 	isb	sy
 80030d8:	e74b      	b.n	8002f72 <xQueueGenericReceive+0x8a>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80030da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030dc:	f000 f8a6 	bl	800322c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80030e0:	f000 fad6 	bl	8003690 <xTaskResumeAll>
 80030e4:	e745      	b.n	8002f72 <xQueueGenericReceive+0x8a>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 80030e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030e8:	f000 f8a0 	bl	800322c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80030ec:	f000 fad0 	bl	8003690 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80030f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030f2:	f000 f8ed 	bl	80032d0 <prvIsQueueEmpty>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	f43f af3a 	beq.w	8002f72 <xQueueGenericReceive+0x8a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80030fe:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003100:	4618      	mov	r0, r3
 8003102:	3738      	adds	r7, #56	; 0x38
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	e000ed04 	.word	0xe000ed04

0800310c <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b086      	sub	sp, #24
 8003110:	af00      	add	r7, sp, #0
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	60b9      	str	r1, [r7, #8]
 8003116:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003118:	2300      	movs	r3, #0
 800311a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003120:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003126:	2b00      	cmp	r3, #0
 8003128:	d10d      	bne.n	8003146 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d14d      	bne.n	80031ce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	4618      	mov	r0, r3
 8003138:	f000 ff6e 	bl	8004018 <xTaskPriorityDisinherit>
 800313c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2200      	movs	r2, #0
 8003142:	605a      	str	r2, [r3, #4]
 8003144:	e043      	b.n	80031ce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d119      	bne.n	8003180 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6898      	ldr	r0, [r3, #8]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003154:	461a      	mov	r2, r3
 8003156:	68b9      	ldr	r1, [r7, #8]
 8003158:	f001 fb2c 	bl	80047b4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	689a      	ldr	r2, [r3, #8]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003164:	441a      	add	r2, r3
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	689a      	ldr	r2, [r3, #8]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	429a      	cmp	r2, r3
 8003174:	d32b      	bcc.n	80031ce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	609a      	str	r2, [r3, #8]
 800317e:	e026      	b.n	80031ce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	68d8      	ldr	r0, [r3, #12]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003188:	461a      	mov	r2, r3
 800318a:	68b9      	ldr	r1, [r7, #8]
 800318c:	f001 fb12 	bl	80047b4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	68da      	ldr	r2, [r3, #12]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003198:	425b      	negs	r3, r3
 800319a:	441a      	add	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	68da      	ldr	r2, [r3, #12]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d207      	bcs.n	80031bc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	685a      	ldr	r2, [r3, #4]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b4:	425b      	negs	r3, r3
 80031b6:	441a      	add	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d105      	bne.n	80031ce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d002      	beq.n	80031ce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	3b01      	subs	r3, #1
 80031cc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	1c5a      	adds	r2, r3, #1
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80031d6:	697b      	ldr	r3, [r7, #20]
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3718      	adds	r7, #24
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}

080031e0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d018      	beq.n	8003224 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	68da      	ldr	r2, [r3, #12]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fa:	441a      	add	r2, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	68da      	ldr	r2, [r3, #12]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	429a      	cmp	r2, r3
 800320a:	d303      	bcc.n	8003214 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	68d9      	ldr	r1, [r3, #12]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321c:	461a      	mov	r2, r3
 800321e:	6838      	ldr	r0, [r7, #0]
 8003220:	f001 fac8 	bl	80047b4 <memcpy>
	}
}
 8003224:	bf00      	nop
 8003226:	3708      	adds	r7, #8
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}

0800322c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003234:	f7ff fbcc 	bl	80029d0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800323e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003240:	e011      	b.n	8003266 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003246:	2b00      	cmp	r3, #0
 8003248:	d012      	beq.n	8003270 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	3324      	adds	r3, #36	; 0x24
 800324e:	4618      	mov	r0, r3
 8003250:	f000 fc2e 	bl	8003ab0 <xTaskRemoveFromEventList>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d001      	beq.n	800325e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800325a:	f000 fd73 	bl	8003d44 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800325e:	7bfb      	ldrb	r3, [r7, #15]
 8003260:	3b01      	subs	r3, #1
 8003262:	b2db      	uxtb	r3, r3
 8003264:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003266:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800326a:	2b00      	cmp	r3, #0
 800326c:	dce9      	bgt.n	8003242 <prvUnlockQueue+0x16>
 800326e:	e000      	b.n	8003272 <prvUnlockQueue+0x46>
					break;
 8003270:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	22ff      	movs	r2, #255	; 0xff
 8003276:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800327a:	f7ff fbd7 	bl	8002a2c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800327e:	f7ff fba7 	bl	80029d0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003288:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800328a:	e011      	b.n	80032b0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	691b      	ldr	r3, [r3, #16]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d012      	beq.n	80032ba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	3310      	adds	r3, #16
 8003298:	4618      	mov	r0, r3
 800329a:	f000 fc09 	bl	8003ab0 <xTaskRemoveFromEventList>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d001      	beq.n	80032a8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80032a4:	f000 fd4e 	bl	8003d44 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80032a8:	7bbb      	ldrb	r3, [r7, #14]
 80032aa:	3b01      	subs	r3, #1
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80032b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	dce9      	bgt.n	800328c <prvUnlockQueue+0x60>
 80032b8:	e000      	b.n	80032bc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80032ba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	22ff      	movs	r2, #255	; 0xff
 80032c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80032c4:	f7ff fbb2 	bl	8002a2c <vPortExitCritical>
}
 80032c8:	bf00      	nop
 80032ca:	3710      	adds	r7, #16
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80032d8:	f7ff fb7a 	bl	80029d0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d102      	bne.n	80032ea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80032e4:	2301      	movs	r3, #1
 80032e6:	60fb      	str	r3, [r7, #12]
 80032e8:	e001      	b.n	80032ee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80032ea:	2300      	movs	r3, #0
 80032ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80032ee:	f7ff fb9d 	bl	8002a2c <vPortExitCritical>

	return xReturn;
 80032f2:	68fb      	ldr	r3, [r7, #12]
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3710      	adds	r7, #16
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}

080032fc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003304:	f7ff fb64 	bl	80029d0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003310:	429a      	cmp	r2, r3
 8003312:	d102      	bne.n	800331a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003314:	2301      	movs	r3, #1
 8003316:	60fb      	str	r3, [r7, #12]
 8003318:	e001      	b.n	800331e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800331a:	2300      	movs	r3, #0
 800331c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800331e:	f7ff fb85 	bl	8002a2c <vPortExitCritical>

	return xReturn;
 8003322:	68fb      	ldr	r3, [r7, #12]
}
 8003324:	4618      	mov	r0, r3
 8003326:	3710      	adds	r7, #16
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}

0800332c <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800332c:	b580      	push	{r7, lr}
 800332e:	b08c      	sub	sp, #48	; 0x30
 8003330:	af04      	add	r7, sp, #16
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	60b9      	str	r1, [r7, #8]
 8003336:	603b      	str	r3, [r7, #0]
 8003338:	4613      	mov	r3, r2
 800333a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800333c:	88fb      	ldrh	r3, [r7, #6]
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	4618      	mov	r0, r3
 8003342:	f7fe ffb9 	bl	80022b8 <pvPortMalloc>
 8003346:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d00e      	beq.n	800336c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800334e:	2078      	movs	r0, #120	; 0x78
 8003350:	f7fe ffb2 	bl	80022b8 <pvPortMalloc>
 8003354:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d003      	beq.n	8003364 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	697a      	ldr	r2, [r7, #20]
 8003360:	631a      	str	r2, [r3, #48]	; 0x30
 8003362:	e005      	b.n	8003370 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003364:	6978      	ldr	r0, [r7, #20]
 8003366:	f7ff f869 	bl	800243c <vPortFree>
 800336a:	e001      	b.n	8003370 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800336c:	2300      	movs	r3, #0
 800336e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d013      	beq.n	800339e <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003376:	88fa      	ldrh	r2, [r7, #6]
 8003378:	2300      	movs	r3, #0
 800337a:	9303      	str	r3, [sp, #12]
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	9302      	str	r3, [sp, #8]
 8003380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003382:	9301      	str	r3, [sp, #4]
 8003384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003386:	9300      	str	r3, [sp, #0]
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	68b9      	ldr	r1, [r7, #8]
 800338c:	68f8      	ldr	r0, [r7, #12]
 800338e:	f000 f80e 	bl	80033ae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003392:	69f8      	ldr	r0, [r7, #28]
 8003394:	f000 f88a 	bl	80034ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003398:	2301      	movs	r3, #1
 800339a:	61bb      	str	r3, [r7, #24]
 800339c:	e002      	b.n	80033a4 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800339e:	f04f 33ff 	mov.w	r3, #4294967295
 80033a2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80033a4:	69bb      	ldr	r3, [r7, #24]
	}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3720      	adds	r7, #32
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}

080033ae <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 80033ae:	b580      	push	{r7, lr}
 80033b0:	b088      	sub	sp, #32
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	60f8      	str	r0, [r7, #12]
 80033b6:	60b9      	str	r1, [r7, #8]
 80033b8:	607a      	str	r2, [r7, #4]
 80033ba:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80033bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80033c6:	3b01      	subs	r3, #1
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	4413      	add	r3, r2
 80033cc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	f023 0307 	bic.w	r3, r3, #7
 80033d4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	f003 0307 	and.w	r3, r3, #7
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d009      	beq.n	80033f4 <prvInitialiseNewTask+0x46>
 80033e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e4:	f383 8811 	msr	BASEPRI, r3
 80033e8:	f3bf 8f6f 	isb	sy
 80033ec:	f3bf 8f4f 	dsb	sy
 80033f0:	617b      	str	r3, [r7, #20]
 80033f2:	e7fe      	b.n	80033f2 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80033f4:	2300      	movs	r3, #0
 80033f6:	61fb      	str	r3, [r7, #28]
 80033f8:	e012      	b.n	8003420 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80033fa:	68ba      	ldr	r2, [r7, #8]
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	4413      	add	r3, r2
 8003400:	7819      	ldrb	r1, [r3, #0]
 8003402:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	4413      	add	r3, r2
 8003408:	3334      	adds	r3, #52	; 0x34
 800340a:	460a      	mov	r2, r1
 800340c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800340e:	68ba      	ldr	r2, [r7, #8]
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	4413      	add	r3, r2
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d006      	beq.n	8003428 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	3301      	adds	r3, #1
 800341e:	61fb      	str	r3, [r7, #28]
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	2b31      	cmp	r3, #49	; 0x31
 8003424:	d9e9      	bls.n	80033fa <prvInitialiseNewTask+0x4c>
 8003426:	e000      	b.n	800342a <prvInitialiseNewTask+0x7c>
		{
			break;
 8003428:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800342a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800342c:	2200      	movs	r2, #0
 800342e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003434:	2b0b      	cmp	r3, #11
 8003436:	d901      	bls.n	800343c <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003438:	230b      	movs	r3, #11
 800343a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800343c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800343e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003440:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003444:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003446:	669a      	str	r2, [r3, #104]	; 0x68
		pxNewTCB->uxMutexesHeld = 0;
 8003448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800344a:	2200      	movs	r2, #0
 800344c:	66da      	str	r2, [r3, #108]	; 0x6c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800344e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003450:	3304      	adds	r3, #4
 8003452:	4618      	mov	r0, r3
 8003454:	f7ff f926 	bl	80026a4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800345a:	3318      	adds	r3, #24
 800345c:	4618      	mov	r0, r3
 800345e:	f7ff f921 	bl	80026a4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003464:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003466:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800346a:	f1c3 020c 	rsb	r2, r3, #12
 800346e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003470:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003474:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003476:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800347a:	2200      	movs	r2, #0
 800347c:	671a      	str	r2, [r3, #112]	; 0x70
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800347e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003480:	2200      	movs	r2, #0
 8003482:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003486:	683a      	ldr	r2, [r7, #0]
 8003488:	68f9      	ldr	r1, [r7, #12]
 800348a:	69b8      	ldr	r0, [r7, #24]
 800348c:	f7ff f99e 	bl	80027cc <pxPortInitialiseStack>
 8003490:	4602      	mov	r2, r0
 8003492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003494:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003498:	2b00      	cmp	r3, #0
 800349a:	d002      	beq.n	80034a2 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800349c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800349e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80034a2:	bf00      	nop
 80034a4:	3720      	adds	r7, #32
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
	...

080034ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80034b4:	f7ff fa8c 	bl	80029d0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80034b8:	4b2a      	ldr	r3, [pc, #168]	; (8003564 <prvAddNewTaskToReadyList+0xb8>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	3301      	adds	r3, #1
 80034be:	4a29      	ldr	r2, [pc, #164]	; (8003564 <prvAddNewTaskToReadyList+0xb8>)
 80034c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80034c2:	4b29      	ldr	r3, [pc, #164]	; (8003568 <prvAddNewTaskToReadyList+0xbc>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d109      	bne.n	80034de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80034ca:	4a27      	ldr	r2, [pc, #156]	; (8003568 <prvAddNewTaskToReadyList+0xbc>)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80034d0:	4b24      	ldr	r3, [pc, #144]	; (8003564 <prvAddNewTaskToReadyList+0xb8>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d110      	bne.n	80034fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80034d8:	f000 fc58 	bl	8003d8c <prvInitialiseTaskLists>
 80034dc:	e00d      	b.n	80034fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80034de:	4b23      	ldr	r3, [pc, #140]	; (800356c <prvAddNewTaskToReadyList+0xc0>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d109      	bne.n	80034fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80034e6:	4b20      	ldr	r3, [pc, #128]	; (8003568 <prvAddNewTaskToReadyList+0xbc>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d802      	bhi.n	80034fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80034f4:	4a1c      	ldr	r2, [pc, #112]	; (8003568 <prvAddNewTaskToReadyList+0xbc>)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80034fa:	4b1d      	ldr	r3, [pc, #116]	; (8003570 <prvAddNewTaskToReadyList+0xc4>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	3301      	adds	r3, #1
 8003500:	4a1b      	ldr	r2, [pc, #108]	; (8003570 <prvAddNewTaskToReadyList+0xc4>)
 8003502:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003508:	2201      	movs	r2, #1
 800350a:	409a      	lsls	r2, r3
 800350c:	4b19      	ldr	r3, [pc, #100]	; (8003574 <prvAddNewTaskToReadyList+0xc8>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4313      	orrs	r3, r2
 8003512:	4a18      	ldr	r2, [pc, #96]	; (8003574 <prvAddNewTaskToReadyList+0xc8>)
 8003514:	6013      	str	r3, [r2, #0]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800351a:	4613      	mov	r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	4413      	add	r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	4a15      	ldr	r2, [pc, #84]	; (8003578 <prvAddNewTaskToReadyList+0xcc>)
 8003524:	441a      	add	r2, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	3304      	adds	r3, #4
 800352a:	4619      	mov	r1, r3
 800352c:	4610      	mov	r0, r2
 800352e:	f7ff f8c6 	bl	80026be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003532:	f7ff fa7b 	bl	8002a2c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003536:	4b0d      	ldr	r3, [pc, #52]	; (800356c <prvAddNewTaskToReadyList+0xc0>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d00e      	beq.n	800355c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800353e:	4b0a      	ldr	r3, [pc, #40]	; (8003568 <prvAddNewTaskToReadyList+0xbc>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003548:	429a      	cmp	r2, r3
 800354a:	d207      	bcs.n	800355c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800354c:	4b0b      	ldr	r3, [pc, #44]	; (800357c <prvAddNewTaskToReadyList+0xd0>)
 800354e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003552:	601a      	str	r2, [r3, #0]
 8003554:	f3bf 8f4f 	dsb	sy
 8003558:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800355c:	bf00      	nop
 800355e:	3708      	adds	r7, #8
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	20003dc0 	.word	0x20003dc0
 8003568:	20003c5c 	.word	0x20003c5c
 800356c:	20003dcc 	.word	0x20003dcc
 8003570:	20003ddc 	.word	0x20003ddc
 8003574:	20003dc8 	.word	0x20003dc8
 8003578:	20003c60 	.word	0x20003c60
 800357c:	e000ed04 	.word	0xe000ed04

08003580 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003588:	2300      	movs	r3, #0
 800358a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d016      	beq.n	80035c0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003592:	4b13      	ldr	r3, [pc, #76]	; (80035e0 <vTaskDelay+0x60>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d009      	beq.n	80035ae <vTaskDelay+0x2e>
 800359a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800359e:	f383 8811 	msr	BASEPRI, r3
 80035a2:	f3bf 8f6f 	isb	sy
 80035a6:	f3bf 8f4f 	dsb	sy
 80035aa:	60bb      	str	r3, [r7, #8]
 80035ac:	e7fe      	b.n	80035ac <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80035ae:	f000 f861 	bl	8003674 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80035b2:	2100      	movs	r1, #0
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f000 fddf 	bl	8004178 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80035ba:	f000 f869 	bl	8003690 <xTaskResumeAll>
 80035be:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d107      	bne.n	80035d6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80035c6:	4b07      	ldr	r3, [pc, #28]	; (80035e4 <vTaskDelay+0x64>)
 80035c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035cc:	601a      	str	r2, [r3, #0]
 80035ce:	f3bf 8f4f 	dsb	sy
 80035d2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80035d6:	bf00      	nop
 80035d8:	3710      	adds	r7, #16
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	20003de8 	.word	0x20003de8
 80035e4:	e000ed04 	.word	0xe000ed04

080035e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b086      	sub	sp, #24
 80035ec:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80035ee:	4b1b      	ldr	r3, [pc, #108]	; (800365c <vTaskStartScheduler+0x74>)
 80035f0:	9301      	str	r3, [sp, #4]
 80035f2:	2300      	movs	r3, #0
 80035f4:	9300      	str	r3, [sp, #0]
 80035f6:	2300      	movs	r3, #0
 80035f8:	2280      	movs	r2, #128	; 0x80
 80035fa:	4919      	ldr	r1, [pc, #100]	; (8003660 <vTaskStartScheduler+0x78>)
 80035fc:	4819      	ldr	r0, [pc, #100]	; (8003664 <vTaskStartScheduler+0x7c>)
 80035fe:	f7ff fe95 	bl	800332c <xTaskCreate>
 8003602:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2b01      	cmp	r3, #1
 8003608:	d115      	bne.n	8003636 <vTaskStartScheduler+0x4e>
 800360a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800360e:	f383 8811 	msr	BASEPRI, r3
 8003612:	f3bf 8f6f 	isb	sy
 8003616:	f3bf 8f4f 	dsb	sy
 800361a:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800361c:	4b12      	ldr	r3, [pc, #72]	; (8003668 <vTaskStartScheduler+0x80>)
 800361e:	f04f 32ff 	mov.w	r2, #4294967295
 8003622:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003624:	4b11      	ldr	r3, [pc, #68]	; (800366c <vTaskStartScheduler+0x84>)
 8003626:	2201      	movs	r2, #1
 8003628:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800362a:	4b11      	ldr	r3, [pc, #68]	; (8003670 <vTaskStartScheduler+0x88>)
 800362c:	2200      	movs	r2, #0
 800362e:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003630:	f7ff f942 	bl	80028b8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003634:	e00d      	b.n	8003652 <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800363c:	d109      	bne.n	8003652 <vTaskStartScheduler+0x6a>
 800363e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003642:	f383 8811 	msr	BASEPRI, r3
 8003646:	f3bf 8f6f 	isb	sy
 800364a:	f3bf 8f4f 	dsb	sy
 800364e:	607b      	str	r3, [r7, #4]
 8003650:	e7fe      	b.n	8003650 <vTaskStartScheduler+0x68>
}
 8003652:	bf00      	nop
 8003654:	3710      	adds	r7, #16
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	20003de4 	.word	0x20003de4
 8003660:	080048ac 	.word	0x080048ac
 8003664:	08003d5d 	.word	0x08003d5d
 8003668:	20003de0 	.word	0x20003de0
 800366c:	20003dcc 	.word	0x20003dcc
 8003670:	20003dc4 	.word	0x20003dc4

08003674 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003674:	b480      	push	{r7}
 8003676:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003678:	4b04      	ldr	r3, [pc, #16]	; (800368c <vTaskSuspendAll+0x18>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	3301      	adds	r3, #1
 800367e:	4a03      	ldr	r2, [pc, #12]	; (800368c <vTaskSuspendAll+0x18>)
 8003680:	6013      	str	r3, [r2, #0]
}
 8003682:	bf00      	nop
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr
 800368c:	20003de8 	.word	0x20003de8

08003690 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003696:	2300      	movs	r3, #0
 8003698:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800369a:	2300      	movs	r3, #0
 800369c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800369e:	4b41      	ldr	r3, [pc, #260]	; (80037a4 <xTaskResumeAll+0x114>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d109      	bne.n	80036ba <xTaskResumeAll+0x2a>
 80036a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036aa:	f383 8811 	msr	BASEPRI, r3
 80036ae:	f3bf 8f6f 	isb	sy
 80036b2:	f3bf 8f4f 	dsb	sy
 80036b6:	603b      	str	r3, [r7, #0]
 80036b8:	e7fe      	b.n	80036b8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80036ba:	f7ff f989 	bl	80029d0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80036be:	4b39      	ldr	r3, [pc, #228]	; (80037a4 <xTaskResumeAll+0x114>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	3b01      	subs	r3, #1
 80036c4:	4a37      	ldr	r2, [pc, #220]	; (80037a4 <xTaskResumeAll+0x114>)
 80036c6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036c8:	4b36      	ldr	r3, [pc, #216]	; (80037a4 <xTaskResumeAll+0x114>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d161      	bne.n	8003794 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80036d0:	4b35      	ldr	r3, [pc, #212]	; (80037a8 <xTaskResumeAll+0x118>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d05d      	beq.n	8003794 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80036d8:	e02e      	b.n	8003738 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80036da:	4b34      	ldr	r3, [pc, #208]	; (80037ac <xTaskResumeAll+0x11c>)
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	3318      	adds	r3, #24
 80036e6:	4618      	mov	r0, r3
 80036e8:	f7ff f846 	bl	8002778 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	3304      	adds	r3, #4
 80036f0:	4618      	mov	r0, r3
 80036f2:	f7ff f841 	bl	8002778 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fa:	2201      	movs	r2, #1
 80036fc:	409a      	lsls	r2, r3
 80036fe:	4b2c      	ldr	r3, [pc, #176]	; (80037b0 <xTaskResumeAll+0x120>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4313      	orrs	r3, r2
 8003704:	4a2a      	ldr	r2, [pc, #168]	; (80037b0 <xTaskResumeAll+0x120>)
 8003706:	6013      	str	r3, [r2, #0]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800370c:	4613      	mov	r3, r2
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	4413      	add	r3, r2
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	4a27      	ldr	r2, [pc, #156]	; (80037b4 <xTaskResumeAll+0x124>)
 8003716:	441a      	add	r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	3304      	adds	r3, #4
 800371c:	4619      	mov	r1, r3
 800371e:	4610      	mov	r0, r2
 8003720:	f7fe ffcd 	bl	80026be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003728:	4b23      	ldr	r3, [pc, #140]	; (80037b8 <xTaskResumeAll+0x128>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372e:	429a      	cmp	r2, r3
 8003730:	d302      	bcc.n	8003738 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8003732:	4b22      	ldr	r3, [pc, #136]	; (80037bc <xTaskResumeAll+0x12c>)
 8003734:	2201      	movs	r2, #1
 8003736:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003738:	4b1c      	ldr	r3, [pc, #112]	; (80037ac <xTaskResumeAll+0x11c>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d1cc      	bne.n	80036da <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d001      	beq.n	800374a <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003746:	f000 fbad 	bl	8003ea4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800374a:	4b1d      	ldr	r3, [pc, #116]	; (80037c0 <xTaskResumeAll+0x130>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d010      	beq.n	8003778 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003756:	f000 f837 	bl	80037c8 <xTaskIncrementTick>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d002      	beq.n	8003766 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8003760:	4b16      	ldr	r3, [pc, #88]	; (80037bc <xTaskResumeAll+0x12c>)
 8003762:	2201      	movs	r2, #1
 8003764:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	3b01      	subs	r3, #1
 800376a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d1f1      	bne.n	8003756 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8003772:	4b13      	ldr	r3, [pc, #76]	; (80037c0 <xTaskResumeAll+0x130>)
 8003774:	2200      	movs	r2, #0
 8003776:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003778:	4b10      	ldr	r3, [pc, #64]	; (80037bc <xTaskResumeAll+0x12c>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d009      	beq.n	8003794 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003780:	2301      	movs	r3, #1
 8003782:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003784:	4b0f      	ldr	r3, [pc, #60]	; (80037c4 <xTaskResumeAll+0x134>)
 8003786:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800378a:	601a      	str	r2, [r3, #0]
 800378c:	f3bf 8f4f 	dsb	sy
 8003790:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003794:	f7ff f94a 	bl	8002a2c <vPortExitCritical>

	return xAlreadyYielded;
 8003798:	68bb      	ldr	r3, [r7, #8]
}
 800379a:	4618      	mov	r0, r3
 800379c:	3710      	adds	r7, #16
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	20003de8 	.word	0x20003de8
 80037a8:	20003dc0 	.word	0x20003dc0
 80037ac:	20003d80 	.word	0x20003d80
 80037b0:	20003dc8 	.word	0x20003dc8
 80037b4:	20003c60 	.word	0x20003c60
 80037b8:	20003c5c 	.word	0x20003c5c
 80037bc:	20003dd4 	.word	0x20003dd4
 80037c0:	20003dd0 	.word	0x20003dd0
 80037c4:	e000ed04 	.word	0xe000ed04

080037c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b086      	sub	sp, #24
 80037cc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80037ce:	2300      	movs	r3, #0
 80037d0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037d2:	4b50      	ldr	r3, [pc, #320]	; (8003914 <xTaskIncrementTick+0x14c>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	f040 808c 	bne.w	80038f4 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 80037dc:	4b4e      	ldr	r3, [pc, #312]	; (8003918 <xTaskIncrementTick+0x150>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	3301      	adds	r3, #1
 80037e2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80037e4:	4a4c      	ldr	r2, [pc, #304]	; (8003918 <xTaskIncrementTick+0x150>)
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d11f      	bne.n	8003830 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80037f0:	4b4a      	ldr	r3, [pc, #296]	; (800391c <xTaskIncrementTick+0x154>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d009      	beq.n	800380e <xTaskIncrementTick+0x46>
 80037fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037fe:	f383 8811 	msr	BASEPRI, r3
 8003802:	f3bf 8f6f 	isb	sy
 8003806:	f3bf 8f4f 	dsb	sy
 800380a:	603b      	str	r3, [r7, #0]
 800380c:	e7fe      	b.n	800380c <xTaskIncrementTick+0x44>
 800380e:	4b43      	ldr	r3, [pc, #268]	; (800391c <xTaskIncrementTick+0x154>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	60fb      	str	r3, [r7, #12]
 8003814:	4b42      	ldr	r3, [pc, #264]	; (8003920 <xTaskIncrementTick+0x158>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a40      	ldr	r2, [pc, #256]	; (800391c <xTaskIncrementTick+0x154>)
 800381a:	6013      	str	r3, [r2, #0]
 800381c:	4a40      	ldr	r2, [pc, #256]	; (8003920 <xTaskIncrementTick+0x158>)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6013      	str	r3, [r2, #0]
 8003822:	4b40      	ldr	r3, [pc, #256]	; (8003924 <xTaskIncrementTick+0x15c>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	3301      	adds	r3, #1
 8003828:	4a3e      	ldr	r2, [pc, #248]	; (8003924 <xTaskIncrementTick+0x15c>)
 800382a:	6013      	str	r3, [r2, #0]
 800382c:	f000 fb3a 	bl	8003ea4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003830:	4b3d      	ldr	r3, [pc, #244]	; (8003928 <xTaskIncrementTick+0x160>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	693a      	ldr	r2, [r7, #16]
 8003836:	429a      	cmp	r2, r3
 8003838:	d34d      	bcc.n	80038d6 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800383a:	4b38      	ldr	r3, [pc, #224]	; (800391c <xTaskIncrementTick+0x154>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d101      	bne.n	8003848 <xTaskIncrementTick+0x80>
 8003844:	2301      	movs	r3, #1
 8003846:	e000      	b.n	800384a <xTaskIncrementTick+0x82>
 8003848:	2300      	movs	r3, #0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d004      	beq.n	8003858 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800384e:	4b36      	ldr	r3, [pc, #216]	; (8003928 <xTaskIncrementTick+0x160>)
 8003850:	f04f 32ff 	mov.w	r2, #4294967295
 8003854:	601a      	str	r2, [r3, #0]
					break;
 8003856:	e03e      	b.n	80038d6 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003858:	4b30      	ldr	r3, [pc, #192]	; (800391c <xTaskIncrementTick+0x154>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003868:	693a      	ldr	r2, [r7, #16]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	429a      	cmp	r2, r3
 800386e:	d203      	bcs.n	8003878 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003870:	4a2d      	ldr	r2, [pc, #180]	; (8003928 <xTaskIncrementTick+0x160>)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6013      	str	r3, [r2, #0]
						break;
 8003876:	e02e      	b.n	80038d6 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	3304      	adds	r3, #4
 800387c:	4618      	mov	r0, r3
 800387e:	f7fe ff7b 	bl	8002778 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003886:	2b00      	cmp	r3, #0
 8003888:	d004      	beq.n	8003894 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	3318      	adds	r3, #24
 800388e:	4618      	mov	r0, r3
 8003890:	f7fe ff72 	bl	8002778 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003898:	2201      	movs	r2, #1
 800389a:	409a      	lsls	r2, r3
 800389c:	4b23      	ldr	r3, [pc, #140]	; (800392c <xTaskIncrementTick+0x164>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	4a22      	ldr	r2, [pc, #136]	; (800392c <xTaskIncrementTick+0x164>)
 80038a4:	6013      	str	r3, [r2, #0]
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038aa:	4613      	mov	r3, r2
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	4413      	add	r3, r2
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	4a1f      	ldr	r2, [pc, #124]	; (8003930 <xTaskIncrementTick+0x168>)
 80038b4:	441a      	add	r2, r3
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	3304      	adds	r3, #4
 80038ba:	4619      	mov	r1, r3
 80038bc:	4610      	mov	r0, r2
 80038be:	f7fe fefe 	bl	80026be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038c6:	4b1b      	ldr	r3, [pc, #108]	; (8003934 <xTaskIncrementTick+0x16c>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d3b4      	bcc.n	800383a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80038d0:	2301      	movs	r3, #1
 80038d2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80038d4:	e7b1      	b.n	800383a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80038d6:	4b17      	ldr	r3, [pc, #92]	; (8003934 <xTaskIncrementTick+0x16c>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038dc:	4914      	ldr	r1, [pc, #80]	; (8003930 <xTaskIncrementTick+0x168>)
 80038de:	4613      	mov	r3, r2
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	4413      	add	r3, r2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	440b      	add	r3, r1
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d907      	bls.n	80038fe <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80038ee:	2301      	movs	r3, #1
 80038f0:	617b      	str	r3, [r7, #20]
 80038f2:	e004      	b.n	80038fe <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80038f4:	4b10      	ldr	r3, [pc, #64]	; (8003938 <xTaskIncrementTick+0x170>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	3301      	adds	r3, #1
 80038fa:	4a0f      	ldr	r2, [pc, #60]	; (8003938 <xTaskIncrementTick+0x170>)
 80038fc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80038fe:	4b0f      	ldr	r3, [pc, #60]	; (800393c <xTaskIncrementTick+0x174>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d001      	beq.n	800390a <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8003906:	2301      	movs	r3, #1
 8003908:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800390a:	697b      	ldr	r3, [r7, #20]
}
 800390c:	4618      	mov	r0, r3
 800390e:	3718      	adds	r7, #24
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}
 8003914:	20003de8 	.word	0x20003de8
 8003918:	20003dc4 	.word	0x20003dc4
 800391c:	20003d78 	.word	0x20003d78
 8003920:	20003d7c 	.word	0x20003d7c
 8003924:	20003dd8 	.word	0x20003dd8
 8003928:	20003de0 	.word	0x20003de0
 800392c:	20003dc8 	.word	0x20003dc8
 8003930:	20003c60 	.word	0x20003c60
 8003934:	20003c5c 	.word	0x20003c5c
 8003938:	20003dd0 	.word	0x20003dd0
 800393c:	20003dd4 	.word	0x20003dd4

08003940 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003940:	b480      	push	{r7}
 8003942:	b087      	sub	sp, #28
 8003944:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003946:	4b26      	ldr	r3, [pc, #152]	; (80039e0 <vTaskSwitchContext+0xa0>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d003      	beq.n	8003956 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800394e:	4b25      	ldr	r3, [pc, #148]	; (80039e4 <vTaskSwitchContext+0xa4>)
 8003950:	2201      	movs	r2, #1
 8003952:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003954:	e03e      	b.n	80039d4 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8003956:	4b23      	ldr	r3, [pc, #140]	; (80039e4 <vTaskSwitchContext+0xa4>)
 8003958:	2200      	movs	r2, #0
 800395a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800395c:	4b22      	ldr	r3, [pc, #136]	; (80039e8 <vTaskSwitchContext+0xa8>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	fab3 f383 	clz	r3, r3
 8003968:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800396a:	7afb      	ldrb	r3, [r7, #11]
 800396c:	f1c3 031f 	rsb	r3, r3, #31
 8003970:	617b      	str	r3, [r7, #20]
 8003972:	491e      	ldr	r1, [pc, #120]	; (80039ec <vTaskSwitchContext+0xac>)
 8003974:	697a      	ldr	r2, [r7, #20]
 8003976:	4613      	mov	r3, r2
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	4413      	add	r3, r2
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	440b      	add	r3, r1
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d109      	bne.n	800399a <vTaskSwitchContext+0x5a>
	__asm volatile
 8003986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800398a:	f383 8811 	msr	BASEPRI, r3
 800398e:	f3bf 8f6f 	isb	sy
 8003992:	f3bf 8f4f 	dsb	sy
 8003996:	607b      	str	r3, [r7, #4]
 8003998:	e7fe      	b.n	8003998 <vTaskSwitchContext+0x58>
 800399a:	697a      	ldr	r2, [r7, #20]
 800399c:	4613      	mov	r3, r2
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	4413      	add	r3, r2
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	4a11      	ldr	r2, [pc, #68]	; (80039ec <vTaskSwitchContext+0xac>)
 80039a6:	4413      	add	r3, r2
 80039a8:	613b      	str	r3, [r7, #16]
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	685a      	ldr	r2, [r3, #4]
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	605a      	str	r2, [r3, #4]
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	685a      	ldr	r2, [r3, #4]
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	3308      	adds	r3, #8
 80039bc:	429a      	cmp	r2, r3
 80039be:	d104      	bne.n	80039ca <vTaskSwitchContext+0x8a>
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	685a      	ldr	r2, [r3, #4]
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	605a      	str	r2, [r3, #4]
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	4a07      	ldr	r2, [pc, #28]	; (80039f0 <vTaskSwitchContext+0xb0>)
 80039d2:	6013      	str	r3, [r2, #0]
}
 80039d4:	bf00      	nop
 80039d6:	371c      	adds	r7, #28
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr
 80039e0:	20003de8 	.word	0x20003de8
 80039e4:	20003dd4 	.word	0x20003dd4
 80039e8:	20003dc8 	.word	0x20003dc8
 80039ec:	20003c60 	.word	0x20003c60
 80039f0:	20003c5c 	.word	0x20003c5c

080039f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d109      	bne.n	8003a18 <vTaskPlaceOnEventList+0x24>
 8003a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a08:	f383 8811 	msr	BASEPRI, r3
 8003a0c:	f3bf 8f6f 	isb	sy
 8003a10:	f3bf 8f4f 	dsb	sy
 8003a14:	60fb      	str	r3, [r7, #12]
 8003a16:	e7fe      	b.n	8003a16 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003a18:	4b07      	ldr	r3, [pc, #28]	; (8003a38 <vTaskPlaceOnEventList+0x44>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	3318      	adds	r3, #24
 8003a1e:	4619      	mov	r1, r3
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f7fe fe70 	bl	8002706 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003a26:	2101      	movs	r1, #1
 8003a28:	6838      	ldr	r0, [r7, #0]
 8003a2a:	f000 fba5 	bl	8004178 <prvAddCurrentTaskToDelayedList>
}
 8003a2e:	bf00      	nop
 8003a30:	3710      	adds	r7, #16
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	20003c5c 	.word	0x20003c5c

08003a3c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b086      	sub	sp, #24
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d109      	bne.n	8003a62 <vTaskPlaceOnUnorderedEventList+0x26>
 8003a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a52:	f383 8811 	msr	BASEPRI, r3
 8003a56:	f3bf 8f6f 	isb	sy
 8003a5a:	f3bf 8f4f 	dsb	sy
 8003a5e:	617b      	str	r3, [r7, #20]
 8003a60:	e7fe      	b.n	8003a60 <vTaskPlaceOnUnorderedEventList+0x24>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8003a62:	4b11      	ldr	r3, [pc, #68]	; (8003aa8 <vTaskPlaceOnUnorderedEventList+0x6c>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d109      	bne.n	8003a7e <vTaskPlaceOnUnorderedEventList+0x42>
 8003a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a6e:	f383 8811 	msr	BASEPRI, r3
 8003a72:	f3bf 8f6f 	isb	sy
 8003a76:	f3bf 8f4f 	dsb	sy
 8003a7a:	613b      	str	r3, [r7, #16]
 8003a7c:	e7fe      	b.n	8003a7c <vTaskPlaceOnUnorderedEventList+0x40>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8003a7e:	4b0b      	ldr	r3, [pc, #44]	; (8003aac <vTaskPlaceOnUnorderedEventList+0x70>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	68ba      	ldr	r2, [r7, #8]
 8003a84:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003a88:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003a8a:	4b08      	ldr	r3, [pc, #32]	; (8003aac <vTaskPlaceOnUnorderedEventList+0x70>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	3318      	adds	r3, #24
 8003a90:	4619      	mov	r1, r3
 8003a92:	68f8      	ldr	r0, [r7, #12]
 8003a94:	f7fe fe13 	bl	80026be <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003a98:	2101      	movs	r1, #1
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f000 fb6c 	bl	8004178 <prvAddCurrentTaskToDelayedList>
}
 8003aa0:	bf00      	nop
 8003aa2:	3718      	adds	r7, #24
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	20003de8 	.word	0x20003de8
 8003aac:	20003c5c 	.word	0x20003c5c

08003ab0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b086      	sub	sp, #24
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d109      	bne.n	8003ada <xTaskRemoveFromEventList+0x2a>
 8003ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aca:	f383 8811 	msr	BASEPRI, r3
 8003ace:	f3bf 8f6f 	isb	sy
 8003ad2:	f3bf 8f4f 	dsb	sy
 8003ad6:	60fb      	str	r3, [r7, #12]
 8003ad8:	e7fe      	b.n	8003ad8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	3318      	adds	r3, #24
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f7fe fe4a 	bl	8002778 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ae4:	4b1d      	ldr	r3, [pc, #116]	; (8003b5c <xTaskRemoveFromEventList+0xac>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d11c      	bne.n	8003b26 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	3304      	adds	r3, #4
 8003af0:	4618      	mov	r0, r3
 8003af2:	f7fe fe41 	bl	8002778 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003afa:	2201      	movs	r2, #1
 8003afc:	409a      	lsls	r2, r3
 8003afe:	4b18      	ldr	r3, [pc, #96]	; (8003b60 <xTaskRemoveFromEventList+0xb0>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	4a16      	ldr	r2, [pc, #88]	; (8003b60 <xTaskRemoveFromEventList+0xb0>)
 8003b06:	6013      	str	r3, [r2, #0]
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	4413      	add	r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	4a13      	ldr	r2, [pc, #76]	; (8003b64 <xTaskRemoveFromEventList+0xb4>)
 8003b16:	441a      	add	r2, r3
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	3304      	adds	r3, #4
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	4610      	mov	r0, r2
 8003b20:	f7fe fdcd 	bl	80026be <vListInsertEnd>
 8003b24:	e005      	b.n	8003b32 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	3318      	adds	r3, #24
 8003b2a:	4619      	mov	r1, r3
 8003b2c:	480e      	ldr	r0, [pc, #56]	; (8003b68 <xTaskRemoveFromEventList+0xb8>)
 8003b2e:	f7fe fdc6 	bl	80026be <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b36:	4b0d      	ldr	r3, [pc, #52]	; (8003b6c <xTaskRemoveFromEventList+0xbc>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d905      	bls.n	8003b4c <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003b40:	2301      	movs	r3, #1
 8003b42:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003b44:	4b0a      	ldr	r3, [pc, #40]	; (8003b70 <xTaskRemoveFromEventList+0xc0>)
 8003b46:	2201      	movs	r2, #1
 8003b48:	601a      	str	r2, [r3, #0]
 8003b4a:	e001      	b.n	8003b50 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003b50:	697b      	ldr	r3, [r7, #20]
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3718      	adds	r7, #24
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	20003de8 	.word	0x20003de8
 8003b60:	20003dc8 	.word	0x20003dc8
 8003b64:	20003c60 	.word	0x20003c60
 8003b68:	20003d80 	.word	0x20003d80
 8003b6c:	20003c5c 	.word	0x20003c5c
 8003b70:	20003dd4 	.word	0x20003dd4

08003b74 <xTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b086      	sub	sp, #24
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;
BaseType_t xReturn;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8003b7e:	4b2b      	ldr	r3, [pc, #172]	; (8003c2c <xTaskRemoveFromUnorderedEventList+0xb8>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d109      	bne.n	8003b9a <xTaskRemoveFromUnorderedEventList+0x26>
 8003b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b8a:	f383 8811 	msr	BASEPRI, r3
 8003b8e:	f3bf 8f6f 	isb	sy
 8003b92:	f3bf 8f4f 	dsb	sy
 8003b96:	60fb      	str	r3, [r7, #12]
 8003b98:	e7fe      	b.n	8003b98 <xTaskRemoveFromUnorderedEventList+0x24>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d109      	bne.n	8003bc4 <xTaskRemoveFromUnorderedEventList+0x50>
 8003bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb4:	f383 8811 	msr	BASEPRI, r3
 8003bb8:	f3bf 8f6f 	isb	sy
 8003bbc:	f3bf 8f4f 	dsb	sy
 8003bc0:	60bb      	str	r3, [r7, #8]
 8003bc2:	e7fe      	b.n	8003bc2 <xTaskRemoveFromUnorderedEventList+0x4e>
	( void ) uxListRemove( pxEventListItem );
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f7fe fdd7 	bl	8002778 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	3304      	adds	r3, #4
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f7fe fdd2 	bl	8002778 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd8:	2201      	movs	r2, #1
 8003bda:	409a      	lsls	r2, r3
 8003bdc:	4b14      	ldr	r3, [pc, #80]	; (8003c30 <xTaskRemoveFromUnorderedEventList+0xbc>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	4a13      	ldr	r2, [pc, #76]	; (8003c30 <xTaskRemoveFromUnorderedEventList+0xbc>)
 8003be4:	6013      	str	r3, [r2, #0]
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bea:	4613      	mov	r3, r2
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	4413      	add	r3, r2
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	4a10      	ldr	r2, [pc, #64]	; (8003c34 <xTaskRemoveFromUnorderedEventList+0xc0>)
 8003bf4:	441a      	add	r2, r3
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	3304      	adds	r3, #4
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	4610      	mov	r0, r2
 8003bfe:	f7fe fd5e 	bl	80026be <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c06:	4b0c      	ldr	r3, [pc, #48]	; (8003c38 <xTaskRemoveFromUnorderedEventList+0xc4>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d905      	bls.n	8003c1c <xTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
 8003c10:	2301      	movs	r3, #1
 8003c12:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003c14:	4b09      	ldr	r3, [pc, #36]	; (8003c3c <xTaskRemoveFromUnorderedEventList+0xc8>)
 8003c16:	2201      	movs	r2, #1
 8003c18:	601a      	str	r2, [r3, #0]
 8003c1a:	e001      	b.n	8003c20 <xTaskRemoveFromUnorderedEventList+0xac>
	}
	else
	{
		xReturn = pdFALSE;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003c20:	697b      	ldr	r3, [r7, #20]
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3718      	adds	r7, #24
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	20003de8 	.word	0x20003de8
 8003c30:	20003dc8 	.word	0x20003dc8
 8003c34:	20003c60 	.word	0x20003c60
 8003c38:	20003c5c 	.word	0x20003c5c
 8003c3c:	20003dd4 	.word	0x20003dd4

08003c40 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003c40:	b480      	push	{r7}
 8003c42:	b085      	sub	sp, #20
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d109      	bne.n	8003c62 <vTaskSetTimeOutState+0x22>
 8003c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c52:	f383 8811 	msr	BASEPRI, r3
 8003c56:	f3bf 8f6f 	isb	sy
 8003c5a:	f3bf 8f4f 	dsb	sy
 8003c5e:	60fb      	str	r3, [r7, #12]
 8003c60:	e7fe      	b.n	8003c60 <vTaskSetTimeOutState+0x20>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003c62:	4b07      	ldr	r3, [pc, #28]	; (8003c80 <vTaskSetTimeOutState+0x40>)
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003c6a:	4b06      	ldr	r3, [pc, #24]	; (8003c84 <vTaskSetTimeOutState+0x44>)
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	605a      	str	r2, [r3, #4]
}
 8003c72:	bf00      	nop
 8003c74:	3714      	adds	r7, #20
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop
 8003c80:	20003dd8 	.word	0x20003dd8
 8003c84:	20003dc4 	.word	0x20003dc4

08003c88 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b086      	sub	sp, #24
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d109      	bne.n	8003cac <xTaskCheckForTimeOut+0x24>
 8003c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c9c:	f383 8811 	msr	BASEPRI, r3
 8003ca0:	f3bf 8f6f 	isb	sy
 8003ca4:	f3bf 8f4f 	dsb	sy
 8003ca8:	60fb      	str	r3, [r7, #12]
 8003caa:	e7fe      	b.n	8003caa <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d109      	bne.n	8003cc6 <xTaskCheckForTimeOut+0x3e>
 8003cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb6:	f383 8811 	msr	BASEPRI, r3
 8003cba:	f3bf 8f6f 	isb	sy
 8003cbe:	f3bf 8f4f 	dsb	sy
 8003cc2:	60bb      	str	r3, [r7, #8]
 8003cc4:	e7fe      	b.n	8003cc4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8003cc6:	f7fe fe83 	bl	80029d0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003cca:	4b1c      	ldr	r3, [pc, #112]	; (8003d3c <xTaskCheckForTimeOut+0xb4>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	613b      	str	r3, [r7, #16]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cd8:	d102      	bne.n	8003ce0 <xTaskCheckForTimeOut+0x58>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	617b      	str	r3, [r7, #20]
 8003cde:	e026      	b.n	8003d2e <xTaskCheckForTimeOut+0xa6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	4b16      	ldr	r3, [pc, #88]	; (8003d40 <xTaskCheckForTimeOut+0xb8>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d007      	beq.n	8003cfc <xTaskCheckForTimeOut+0x74>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	685a      	ldr	r2, [r3, #4]
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d802      	bhi.n	8003cfc <xTaskCheckForTimeOut+0x74>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	617b      	str	r3, [r7, #20]
 8003cfa:	e018      	b.n	8003d2e <xTaskCheckForTimeOut+0xa6>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	693a      	ldr	r2, [r7, #16]
 8003d02:	1ad2      	subs	r2, r2, r3
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d20e      	bcs.n	8003d2a <xTaskCheckForTimeOut+0xa2>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6859      	ldr	r1, [r3, #4]
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	1acb      	subs	r3, r1, r3
 8003d18:	441a      	add	r2, r3
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f7ff ff8e 	bl	8003c40 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8003d24:	2300      	movs	r3, #0
 8003d26:	617b      	str	r3, [r7, #20]
 8003d28:	e001      	b.n	8003d2e <xTaskCheckForTimeOut+0xa6>
		}
		else
		{
			xReturn = pdTRUE;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8003d2e:	f7fe fe7d 	bl	8002a2c <vPortExitCritical>

	return xReturn;
 8003d32:	697b      	ldr	r3, [r7, #20]
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3718      	adds	r7, #24
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	20003dc4 	.word	0x20003dc4
 8003d40:	20003dd8 	.word	0x20003dd8

08003d44 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003d44:	b480      	push	{r7}
 8003d46:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003d48:	4b03      	ldr	r3, [pc, #12]	; (8003d58 <vTaskMissedYield+0x14>)
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	601a      	str	r2, [r3, #0]
}
 8003d4e:	bf00      	nop
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr
 8003d58:	20003dd4 	.word	0x20003dd4

08003d5c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b082      	sub	sp, #8
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003d64:	f000 f852 	bl	8003e0c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003d68:	4b06      	ldr	r3, [pc, #24]	; (8003d84 <prvIdleTask+0x28>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d9f9      	bls.n	8003d64 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003d70:	4b05      	ldr	r3, [pc, #20]	; (8003d88 <prvIdleTask+0x2c>)
 8003d72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d76:	601a      	str	r2, [r3, #0]
 8003d78:	f3bf 8f4f 	dsb	sy
 8003d7c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003d80:	e7f0      	b.n	8003d64 <prvIdleTask+0x8>
 8003d82:	bf00      	nop
 8003d84:	20003c60 	.word	0x20003c60
 8003d88:	e000ed04 	.word	0xe000ed04

08003d8c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b082      	sub	sp, #8
 8003d90:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d92:	2300      	movs	r3, #0
 8003d94:	607b      	str	r3, [r7, #4]
 8003d96:	e00c      	b.n	8003db2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	4413      	add	r3, r2
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	4a12      	ldr	r2, [pc, #72]	; (8003dec <prvInitialiseTaskLists+0x60>)
 8003da4:	4413      	add	r3, r2
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7fe fc5c 	bl	8002664 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	3301      	adds	r3, #1
 8003db0:	607b      	str	r3, [r7, #4]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2b0b      	cmp	r3, #11
 8003db6:	d9ef      	bls.n	8003d98 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003db8:	480d      	ldr	r0, [pc, #52]	; (8003df0 <prvInitialiseTaskLists+0x64>)
 8003dba:	f7fe fc53 	bl	8002664 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003dbe:	480d      	ldr	r0, [pc, #52]	; (8003df4 <prvInitialiseTaskLists+0x68>)
 8003dc0:	f7fe fc50 	bl	8002664 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003dc4:	480c      	ldr	r0, [pc, #48]	; (8003df8 <prvInitialiseTaskLists+0x6c>)
 8003dc6:	f7fe fc4d 	bl	8002664 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003dca:	480c      	ldr	r0, [pc, #48]	; (8003dfc <prvInitialiseTaskLists+0x70>)
 8003dcc:	f7fe fc4a 	bl	8002664 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003dd0:	480b      	ldr	r0, [pc, #44]	; (8003e00 <prvInitialiseTaskLists+0x74>)
 8003dd2:	f7fe fc47 	bl	8002664 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003dd6:	4b0b      	ldr	r3, [pc, #44]	; (8003e04 <prvInitialiseTaskLists+0x78>)
 8003dd8:	4a05      	ldr	r2, [pc, #20]	; (8003df0 <prvInitialiseTaskLists+0x64>)
 8003dda:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003ddc:	4b0a      	ldr	r3, [pc, #40]	; (8003e08 <prvInitialiseTaskLists+0x7c>)
 8003dde:	4a05      	ldr	r2, [pc, #20]	; (8003df4 <prvInitialiseTaskLists+0x68>)
 8003de0:	601a      	str	r2, [r3, #0]
}
 8003de2:	bf00      	nop
 8003de4:	3708      	adds	r7, #8
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	20003c60 	.word	0x20003c60
 8003df0:	20003d50 	.word	0x20003d50
 8003df4:	20003d64 	.word	0x20003d64
 8003df8:	20003d80 	.word	0x20003d80
 8003dfc:	20003d94 	.word	0x20003d94
 8003e00:	20003dac 	.word	0x20003dac
 8003e04:	20003d78 	.word	0x20003d78
 8003e08:	20003d7c 	.word	0x20003d7c

08003e0c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b082      	sub	sp, #8
 8003e10:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003e12:	e028      	b.n	8003e66 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 8003e14:	f7ff fc2e 	bl	8003674 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8003e18:	4b17      	ldr	r3, [pc, #92]	; (8003e78 <prvCheckTasksWaitingTermination+0x6c>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	bf0c      	ite	eq
 8003e20:	2301      	moveq	r3, #1
 8003e22:	2300      	movne	r3, #0
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 8003e28:	f7ff fc32 	bl	8003690 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d119      	bne.n	8003e66 <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 8003e32:	f7fe fdcd 	bl	80029d0 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003e36:	4b10      	ldr	r3, [pc, #64]	; (8003e78 <prvCheckTasksWaitingTermination+0x6c>)
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	3304      	adds	r3, #4
 8003e42:	4618      	mov	r0, r3
 8003e44:	f7fe fc98 	bl	8002778 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8003e48:	4b0c      	ldr	r3, [pc, #48]	; (8003e7c <prvCheckTasksWaitingTermination+0x70>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	3b01      	subs	r3, #1
 8003e4e:	4a0b      	ldr	r2, [pc, #44]	; (8003e7c <prvCheckTasksWaitingTermination+0x70>)
 8003e50:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8003e52:	4b0b      	ldr	r3, [pc, #44]	; (8003e80 <prvCheckTasksWaitingTermination+0x74>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	3b01      	subs	r3, #1
 8003e58:	4a09      	ldr	r2, [pc, #36]	; (8003e80 <prvCheckTasksWaitingTermination+0x74>)
 8003e5a:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 8003e5c:	f7fe fde6 	bl	8002a2c <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8003e60:	6838      	ldr	r0, [r7, #0]
 8003e62:	f000 f80f 	bl	8003e84 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003e66:	4b06      	ldr	r3, [pc, #24]	; (8003e80 <prvCheckTasksWaitingTermination+0x74>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d1d2      	bne.n	8003e14 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003e6e:	bf00      	nop
 8003e70:	3708      	adds	r7, #8
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	20003d94 	.word	0x20003d94
 8003e7c:	20003dc0 	.word	0x20003dc0
 8003e80:	20003da8 	.word	0x20003da8

08003e84 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b082      	sub	sp, #8
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e90:	4618      	mov	r0, r3
 8003e92:	f7fe fad3 	bl	800243c <vPortFree>
			vPortFree( pxTCB );
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f7fe fad0 	bl	800243c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003e9c:	bf00      	nop
 8003e9e:	3708      	adds	r7, #8
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}

08003ea4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003eaa:	4b0f      	ldr	r3, [pc, #60]	; (8003ee8 <prvResetNextTaskUnblockTime+0x44>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d101      	bne.n	8003eb8 <prvResetNextTaskUnblockTime+0x14>
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e000      	b.n	8003eba <prvResetNextTaskUnblockTime+0x16>
 8003eb8:	2300      	movs	r3, #0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d004      	beq.n	8003ec8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003ebe:	4b0b      	ldr	r3, [pc, #44]	; (8003eec <prvResetNextTaskUnblockTime+0x48>)
 8003ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ec4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003ec6:	e008      	b.n	8003eda <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003ec8:	4b07      	ldr	r3, [pc, #28]	; (8003ee8 <prvResetNextTaskUnblockTime+0x44>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	4a05      	ldr	r2, [pc, #20]	; (8003eec <prvResetNextTaskUnblockTime+0x48>)
 8003ed8:	6013      	str	r3, [r2, #0]
}
 8003eda:	bf00      	nop
 8003edc:	370c      	adds	r7, #12
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr
 8003ee6:	bf00      	nop
 8003ee8:	20003d78 	.word	0x20003d78
 8003eec:	20003de0 	.word	0x20003de0

08003ef0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003ef6:	4b0b      	ldr	r3, [pc, #44]	; (8003f24 <xTaskGetSchedulerState+0x34>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d102      	bne.n	8003f04 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003efe:	2301      	movs	r3, #1
 8003f00:	607b      	str	r3, [r7, #4]
 8003f02:	e008      	b.n	8003f16 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f04:	4b08      	ldr	r3, [pc, #32]	; (8003f28 <xTaskGetSchedulerState+0x38>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d102      	bne.n	8003f12 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003f0c:	2302      	movs	r3, #2
 8003f0e:	607b      	str	r3, [r7, #4]
 8003f10:	e001      	b.n	8003f16 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003f12:	2300      	movs	r3, #0
 8003f14:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003f16:	687b      	ldr	r3, [r7, #4]
	}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	370c      	adds	r7, #12
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr
 8003f24:	20003dcc 	.word	0x20003dcc
 8003f28:	20003de8 	.word	0x20003de8

08003f2c <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b084      	sub	sp, #16
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d062      	beq.n	8004004 <vTaskPriorityInherit+0xd8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f42:	4b32      	ldr	r3, [pc, #200]	; (800400c <vTaskPriorityInherit+0xe0>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d25b      	bcs.n	8004004 <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	699b      	ldr	r3, [r3, #24]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	db06      	blt.n	8003f62 <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f54:	4b2d      	ldr	r3, [pc, #180]	; (800400c <vTaskPriorityInherit+0xe0>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f5a:	f1c3 020c 	rsb	r2, r3, #12
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6959      	ldr	r1, [r3, #20]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	4413      	add	r3, r2
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	4a27      	ldr	r2, [pc, #156]	; (8004010 <vTaskPriorityInherit+0xe4>)
 8003f74:	4413      	add	r3, r2
 8003f76:	4299      	cmp	r1, r3
 8003f78:	d101      	bne.n	8003f7e <vTaskPriorityInherit+0x52>
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e000      	b.n	8003f80 <vTaskPriorityInherit+0x54>
 8003f7e:	2300      	movs	r3, #0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d03a      	beq.n	8003ffa <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	3304      	adds	r3, #4
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f7fe fbf5 	bl	8002778 <uxListRemove>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d115      	bne.n	8003fc0 <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f98:	491d      	ldr	r1, [pc, #116]	; (8004010 <vTaskPriorityInherit+0xe4>)
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	4413      	add	r3, r2
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	440b      	add	r3, r1
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d10a      	bne.n	8003fc0 <vTaskPriorityInherit+0x94>
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fae:	2201      	movs	r2, #1
 8003fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb4:	43da      	mvns	r2, r3
 8003fb6:	4b17      	ldr	r3, [pc, #92]	; (8004014 <vTaskPriorityInherit+0xe8>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4013      	ands	r3, r2
 8003fbc:	4a15      	ldr	r2, [pc, #84]	; (8004014 <vTaskPriorityInherit+0xe8>)
 8003fbe:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003fc0:	4b12      	ldr	r3, [pc, #72]	; (800400c <vTaskPriorityInherit+0xe0>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fce:	2201      	movs	r2, #1
 8003fd0:	409a      	lsls	r2, r3
 8003fd2:	4b10      	ldr	r3, [pc, #64]	; (8004014 <vTaskPriorityInherit+0xe8>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	4a0e      	ldr	r2, [pc, #56]	; (8004014 <vTaskPriorityInherit+0xe8>)
 8003fda:	6013      	str	r3, [r2, #0]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	4413      	add	r3, r2
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	4a09      	ldr	r2, [pc, #36]	; (8004010 <vTaskPriorityInherit+0xe4>)
 8003fea:	441a      	add	r2, r3
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	3304      	adds	r3, #4
 8003ff0:	4619      	mov	r1, r3
 8003ff2:	4610      	mov	r0, r2
 8003ff4:	f7fe fb63 	bl	80026be <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003ff8:	e004      	b.n	8004004 <vTaskPriorityInherit+0xd8>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003ffa:	4b04      	ldr	r3, [pc, #16]	; (800400c <vTaskPriorityInherit+0xe0>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 8004004:	bf00      	nop
 8004006:	3710      	adds	r7, #16
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}
 800400c:	20003c5c 	.word	0x20003c5c
 8004010:	20003c60 	.word	0x20003c60
 8004014:	20003dc8 	.word	0x20003dc8

08004018 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004018:	b580      	push	{r7, lr}
 800401a:	b086      	sub	sp, #24
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004024:	2300      	movs	r3, #0
 8004026:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d06c      	beq.n	8004108 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800402e:	4b39      	ldr	r3, [pc, #228]	; (8004114 <xTaskPriorityDisinherit+0xfc>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	693a      	ldr	r2, [r7, #16]
 8004034:	429a      	cmp	r2, r3
 8004036:	d009      	beq.n	800404c <xTaskPriorityDisinherit+0x34>
 8004038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800403c:	f383 8811 	msr	BASEPRI, r3
 8004040:	f3bf 8f6f 	isb	sy
 8004044:	f3bf 8f4f 	dsb	sy
 8004048:	60fb      	str	r3, [r7, #12]
 800404a:	e7fe      	b.n	800404a <xTaskPriorityDisinherit+0x32>

			configASSERT( pxTCB->uxMutexesHeld );
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004050:	2b00      	cmp	r3, #0
 8004052:	d109      	bne.n	8004068 <xTaskPriorityDisinherit+0x50>
 8004054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004058:	f383 8811 	msr	BASEPRI, r3
 800405c:	f3bf 8f6f 	isb	sy
 8004060:	f3bf 8f4f 	dsb	sy
 8004064:	60bb      	str	r3, [r7, #8]
 8004066:	e7fe      	b.n	8004066 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800406c:	1e5a      	subs	r2, r3, #1
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	66da      	str	r2, [r3, #108]	; 0x6c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800407a:	429a      	cmp	r2, r3
 800407c:	d044      	beq.n	8004108 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004082:	2b00      	cmp	r3, #0
 8004084:	d140      	bne.n	8004108 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	3304      	adds	r3, #4
 800408a:	4618      	mov	r0, r3
 800408c:	f7fe fb74 	bl	8002778 <uxListRemove>
 8004090:	4603      	mov	r3, r0
 8004092:	2b00      	cmp	r3, #0
 8004094:	d115      	bne.n	80040c2 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800409a:	491f      	ldr	r1, [pc, #124]	; (8004118 <xTaskPriorityDisinherit+0x100>)
 800409c:	4613      	mov	r3, r2
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	4413      	add	r3, r2
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	440b      	add	r3, r1
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d10a      	bne.n	80040c2 <xTaskPriorityDisinherit+0xaa>
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b0:	2201      	movs	r2, #1
 80040b2:	fa02 f303 	lsl.w	r3, r2, r3
 80040b6:	43da      	mvns	r2, r3
 80040b8:	4b18      	ldr	r3, [pc, #96]	; (800411c <xTaskPriorityDisinherit+0x104>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4013      	ands	r3, r2
 80040be:	4a17      	ldr	r2, [pc, #92]	; (800411c <xTaskPriorityDisinherit+0x104>)
 80040c0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ce:	f1c3 020c 	rsb	r2, r3, #12
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040da:	2201      	movs	r2, #1
 80040dc:	409a      	lsls	r2, r3
 80040de:	4b0f      	ldr	r3, [pc, #60]	; (800411c <xTaskPriorityDisinherit+0x104>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	4a0d      	ldr	r2, [pc, #52]	; (800411c <xTaskPriorityDisinherit+0x104>)
 80040e6:	6013      	str	r3, [r2, #0]
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040ec:	4613      	mov	r3, r2
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	4413      	add	r3, r2
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	4a08      	ldr	r2, [pc, #32]	; (8004118 <xTaskPriorityDisinherit+0x100>)
 80040f6:	441a      	add	r2, r3
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	3304      	adds	r3, #4
 80040fc:	4619      	mov	r1, r3
 80040fe:	4610      	mov	r0, r2
 8004100:	f7fe fadd 	bl	80026be <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004104:	2301      	movs	r3, #1
 8004106:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004108:	697b      	ldr	r3, [r7, #20]
	}
 800410a:	4618      	mov	r0, r3
 800410c:	3718      	adds	r7, #24
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	20003c5c 	.word	0x20003c5c
 8004118:	20003c60 	.word	0x20003c60
 800411c:	20003dc8 	.word	0x20003dc8

08004120 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8004126:	4b09      	ldr	r3, [pc, #36]	; (800414c <uxTaskResetEventItemValue+0x2c>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	699b      	ldr	r3, [r3, #24]
 800412c:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800412e:	4b07      	ldr	r3, [pc, #28]	; (800414c <uxTaskResetEventItemValue+0x2c>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a06      	ldr	r2, [pc, #24]	; (800414c <uxTaskResetEventItemValue+0x2c>)
 8004134:	6812      	ldr	r2, [r2, #0]
 8004136:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004138:	f1c2 020c 	rsb	r2, r2, #12
 800413c:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800413e:	687b      	ldr	r3, [r7, #4]
}
 8004140:	4618      	mov	r0, r3
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr
 800414c:	20003c5c 	.word	0x20003c5c

08004150 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8004150:	b480      	push	{r7}
 8004152:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004154:	4b07      	ldr	r3, [pc, #28]	; (8004174 <pvTaskIncrementMutexHeldCount+0x24>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d004      	beq.n	8004166 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800415c:	4b05      	ldr	r3, [pc, #20]	; (8004174 <pvTaskIncrementMutexHeldCount+0x24>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004162:	3201      	adds	r2, #1
 8004164:	66da      	str	r2, [r3, #108]	; 0x6c
		}

		return pxCurrentTCB;
 8004166:	4b03      	ldr	r3, [pc, #12]	; (8004174 <pvTaskIncrementMutexHeldCount+0x24>)
 8004168:	681b      	ldr	r3, [r3, #0]
	}
 800416a:	4618      	mov	r0, r3
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr
 8004174:	20003c5c 	.word	0x20003c5c

08004178 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004182:	4b29      	ldr	r3, [pc, #164]	; (8004228 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004188:	4b28      	ldr	r3, [pc, #160]	; (800422c <prvAddCurrentTaskToDelayedList+0xb4>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	3304      	adds	r3, #4
 800418e:	4618      	mov	r0, r3
 8004190:	f7fe faf2 	bl	8002778 <uxListRemove>
 8004194:	4603      	mov	r3, r0
 8004196:	2b00      	cmp	r3, #0
 8004198:	d10b      	bne.n	80041b2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800419a:	4b24      	ldr	r3, [pc, #144]	; (800422c <prvAddCurrentTaskToDelayedList+0xb4>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a0:	2201      	movs	r2, #1
 80041a2:	fa02 f303 	lsl.w	r3, r2, r3
 80041a6:	43da      	mvns	r2, r3
 80041a8:	4b21      	ldr	r3, [pc, #132]	; (8004230 <prvAddCurrentTaskToDelayedList+0xb8>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4013      	ands	r3, r2
 80041ae:	4a20      	ldr	r2, [pc, #128]	; (8004230 <prvAddCurrentTaskToDelayedList+0xb8>)
 80041b0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041b8:	d10a      	bne.n	80041d0 <prvAddCurrentTaskToDelayedList+0x58>
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d007      	beq.n	80041d0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80041c0:	4b1a      	ldr	r3, [pc, #104]	; (800422c <prvAddCurrentTaskToDelayedList+0xb4>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	3304      	adds	r3, #4
 80041c6:	4619      	mov	r1, r3
 80041c8:	481a      	ldr	r0, [pc, #104]	; (8004234 <prvAddCurrentTaskToDelayedList+0xbc>)
 80041ca:	f7fe fa78 	bl	80026be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80041ce:	e026      	b.n	800421e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80041d0:	68fa      	ldr	r2, [r7, #12]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4413      	add	r3, r2
 80041d6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80041d8:	4b14      	ldr	r3, [pc, #80]	; (800422c <prvAddCurrentTaskToDelayedList+0xb4>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	68ba      	ldr	r2, [r7, #8]
 80041de:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80041e0:	68ba      	ldr	r2, [r7, #8]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d209      	bcs.n	80041fc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80041e8:	4b13      	ldr	r3, [pc, #76]	; (8004238 <prvAddCurrentTaskToDelayedList+0xc0>)
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	4b0f      	ldr	r3, [pc, #60]	; (800422c <prvAddCurrentTaskToDelayedList+0xb4>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	3304      	adds	r3, #4
 80041f2:	4619      	mov	r1, r3
 80041f4:	4610      	mov	r0, r2
 80041f6:	f7fe fa86 	bl	8002706 <vListInsert>
}
 80041fa:	e010      	b.n	800421e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80041fc:	4b0f      	ldr	r3, [pc, #60]	; (800423c <prvAddCurrentTaskToDelayedList+0xc4>)
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	4b0a      	ldr	r3, [pc, #40]	; (800422c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	3304      	adds	r3, #4
 8004206:	4619      	mov	r1, r3
 8004208:	4610      	mov	r0, r2
 800420a:	f7fe fa7c 	bl	8002706 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800420e:	4b0c      	ldr	r3, [pc, #48]	; (8004240 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	68ba      	ldr	r2, [r7, #8]
 8004214:	429a      	cmp	r2, r3
 8004216:	d202      	bcs.n	800421e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004218:	4a09      	ldr	r2, [pc, #36]	; (8004240 <prvAddCurrentTaskToDelayedList+0xc8>)
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	6013      	str	r3, [r2, #0]
}
 800421e:	bf00      	nop
 8004220:	3710      	adds	r7, #16
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	20003dc4 	.word	0x20003dc4
 800422c:	20003c5c 	.word	0x20003c5c
 8004230:	20003dc8 	.word	0x20003dc8
 8004234:	20003dac 	.word	0x20003dac
 8004238:	20003d7c 	.word	0x20003d7c
 800423c:	20003d78 	.word	0x20003d78
 8004240:	20003de0 	.word	0x20003de0

08004244 <delayMs>:
 *  Created on: Nov 5, 2020
 *      Author: MahmoudH
 */
#include "delay.h"

void delayMs(uint32_t delay_ms){
 8004244:	b480      	push	{r7}
 8004246:	b085      	sub	sp, #20
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
	uint32_t ind1 = 0;
 800424c:	2300      	movs	r3, #0
 800424e:	60fb      	str	r3, [r7, #12]
	uint32_t ind2 = 0;
 8004250:	2300      	movs	r3, #0
 8004252:	60bb      	str	r3, [r7, #8]
	for (ind1 = 0; ind1 < delay_ms; ++ind1) {
 8004254:	2300      	movs	r3, #0
 8004256:	60fb      	str	r3, [r7, #12]
 8004258:	e00e      	b.n	8004278 <delayMs+0x34>
		for (ind2 = 0; ind2 < 1250; ++ind2) {
 800425a:	2300      	movs	r3, #0
 800425c:	60bb      	str	r3, [r7, #8]
 800425e:	e003      	b.n	8004268 <delayMs+0x24>
			asm("nop");
 8004260:	bf00      	nop
		for (ind2 = 0; ind2 < 1250; ++ind2) {
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	3301      	adds	r3, #1
 8004266:	60bb      	str	r3, [r7, #8]
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800426e:	4293      	cmp	r3, r2
 8004270:	d9f6      	bls.n	8004260 <delayMs+0x1c>
	for (ind1 = 0; ind1 < delay_ms; ++ind1) {
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	3301      	adds	r3, #1
 8004276:	60fb      	str	r3, [r7, #12]
 8004278:	68fa      	ldr	r2, [r7, #12]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	429a      	cmp	r2, r3
 800427e:	d3ec      	bcc.n	800425a <delayMs+0x16>
		}
	}
}
 8004280:	bf00      	nop
 8004282:	3714      	adds	r7, #20
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <main>:




int main(void)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	af00      	add	r7, sp, #0
	System_Init();
 8004290:	f7fc fd50 	bl	8000d34 <System_Init>

	Task_Init();
 8004294:	f7fc fd78 	bl	8000d88 <Task_Init>

	while(1)
 8004298:	e7fe      	b.n	8004298 <main+0xc>
	...

0800429c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800429c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80042d4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80042a0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80042a2:	e003      	b.n	80042ac <LoopCopyDataInit>

080042a4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80042a4:	4b0c      	ldr	r3, [pc, #48]	; (80042d8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80042a6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80042a8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80042aa:	3104      	adds	r1, #4

080042ac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80042ac:	480b      	ldr	r0, [pc, #44]	; (80042dc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80042ae:	4b0c      	ldr	r3, [pc, #48]	; (80042e0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80042b0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80042b2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80042b4:	d3f6      	bcc.n	80042a4 <CopyDataInit>
  ldr  r2, =_sbss
 80042b6:	4a0b      	ldr	r2, [pc, #44]	; (80042e4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80042b8:	e002      	b.n	80042c0 <LoopFillZerobss>

080042ba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80042ba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80042bc:	f842 3b04 	str.w	r3, [r2], #4

080042c0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80042c0:	4b09      	ldr	r3, [pc, #36]	; (80042e8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80042c2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80042c4:	d3f9      	bcc.n	80042ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80042c6:	f000 f82d 	bl	8004324 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80042ca:	f000 fa4f 	bl	800476c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80042ce:	f7ff ffdd 	bl	800428c <main>
  bx  lr    
 80042d2:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80042d4:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80042d8:	080048bc 	.word	0x080048bc
  ldr  r0, =_sdata
 80042dc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80042e0:	20000018 	.word	0x20000018
  ldr  r2, =_sbss
 80042e4:	20000018 	.word	0x20000018
  ldr  r3, = _ebss
 80042e8:	20003e18 	.word	0x20003e18

080042ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80042ec:	e7fe      	b.n	80042ec <ADC_IRQHandler>

080042ee <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80042ee:	b480      	push	{r7}
 80042f0:	af00      	add	r7, sp, #0
}
 80042f2:	bf00      	nop
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80042fc:	b480      	push	{r7}
 80042fe:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8004300:	e7fe      	b.n	8004300 <HardFault_Handler+0x4>

08004302 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8004302:	b480      	push	{r7}
 8004304:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8004306:	e7fe      	b.n	8004306 <MemManage_Handler+0x4>

08004308 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8004308:	b480      	push	{r7}
 800430a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800430c:	e7fe      	b.n	800430c <BusFault_Handler+0x4>

0800430e <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800430e:	b480      	push	{r7}
 8004310:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8004312:	e7fe      	b.n	8004312 <UsageFault_Handler+0x4>

08004314 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8004314:	b480      	push	{r7}
 8004316:	af00      	add	r7, sp, #0
}
 8004318:	bf00      	nop
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr
	...

08004324 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004328:	4a16      	ldr	r2, [pc, #88]	; (8004384 <SystemInit+0x60>)
 800432a:	4b16      	ldr	r3, [pc, #88]	; (8004384 <SystemInit+0x60>)
 800432c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004330:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004334:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004338:	4a13      	ldr	r2, [pc, #76]	; (8004388 <SystemInit+0x64>)
 800433a:	4b13      	ldr	r3, [pc, #76]	; (8004388 <SystemInit+0x64>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f043 0301 	orr.w	r3, r3, #1
 8004342:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004344:	4b10      	ldr	r3, [pc, #64]	; (8004388 <SystemInit+0x64>)
 8004346:	2200      	movs	r2, #0
 8004348:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800434a:	4a0f      	ldr	r2, [pc, #60]	; (8004388 <SystemInit+0x64>)
 800434c:	4b0e      	ldr	r3, [pc, #56]	; (8004388 <SystemInit+0x64>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004354:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004358:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800435a:	4b0b      	ldr	r3, [pc, #44]	; (8004388 <SystemInit+0x64>)
 800435c:	4a0b      	ldr	r2, [pc, #44]	; (800438c <SystemInit+0x68>)
 800435e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004360:	4a09      	ldr	r2, [pc, #36]	; (8004388 <SystemInit+0x64>)
 8004362:	4b09      	ldr	r3, [pc, #36]	; (8004388 <SystemInit+0x64>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800436a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800436c:	4b06      	ldr	r3, [pc, #24]	; (8004388 <SystemInit+0x64>)
 800436e:	2200      	movs	r2, #0
 8004370:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8004372:	f000 f889 	bl	8004488 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004376:	4b03      	ldr	r3, [pc, #12]	; (8004384 <SystemInit+0x60>)
 8004378:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800437c:	609a      	str	r2, [r3, #8]
#endif
}
 800437e:	bf00      	nop
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	e000ed00 	.word	0xe000ed00
 8004388:	40023800 	.word	0x40023800
 800438c:	24003010 	.word	0x24003010

08004390 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8004390:	b480      	push	{r7}
 8004392:	b087      	sub	sp, #28
 8004394:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8004396:	2300      	movs	r3, #0
 8004398:	613b      	str	r3, [r7, #16]
 800439a:	2300      	movs	r3, #0
 800439c:	617b      	str	r3, [r7, #20]
 800439e:	2302      	movs	r3, #2
 80043a0:	60fb      	str	r3, [r7, #12]
 80043a2:	2300      	movs	r3, #0
 80043a4:	60bb      	str	r3, [r7, #8]
 80043a6:	2302      	movs	r3, #2
 80043a8:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80043aa:	4b32      	ldr	r3, [pc, #200]	; (8004474 <SystemCoreClockUpdate+0xe4>)
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f003 030c 	and.w	r3, r3, #12
 80043b2:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	2b04      	cmp	r3, #4
 80043b8:	d007      	beq.n	80043ca <SystemCoreClockUpdate+0x3a>
 80043ba:	2b08      	cmp	r3, #8
 80043bc:	d009      	beq.n	80043d2 <SystemCoreClockUpdate+0x42>
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d13d      	bne.n	800443e <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80043c2:	4b2d      	ldr	r3, [pc, #180]	; (8004478 <SystemCoreClockUpdate+0xe8>)
 80043c4:	4a2d      	ldr	r2, [pc, #180]	; (800447c <SystemCoreClockUpdate+0xec>)
 80043c6:	601a      	str	r2, [r3, #0]
      break;
 80043c8:	e03d      	b.n	8004446 <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80043ca:	4b2b      	ldr	r3, [pc, #172]	; (8004478 <SystemCoreClockUpdate+0xe8>)
 80043cc:	4a2c      	ldr	r2, [pc, #176]	; (8004480 <SystemCoreClockUpdate+0xf0>)
 80043ce:	601a      	str	r2, [r3, #0]
      break;
 80043d0:	e039      	b.n	8004446 <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80043d2:	4b28      	ldr	r3, [pc, #160]	; (8004474 <SystemCoreClockUpdate+0xe4>)
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	0d9b      	lsrs	r3, r3, #22
 80043d8:	f003 0301 	and.w	r3, r3, #1
 80043dc:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043de:	4b25      	ldr	r3, [pc, #148]	; (8004474 <SystemCoreClockUpdate+0xe4>)
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043e6:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d00c      	beq.n	8004408 <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80043ee:	4a24      	ldr	r2, [pc, #144]	; (8004480 <SystemCoreClockUpdate+0xf0>)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80043f6:	4a1f      	ldr	r2, [pc, #124]	; (8004474 <SystemCoreClockUpdate+0xe4>)
 80043f8:	6852      	ldr	r2, [r2, #4]
 80043fa:	0992      	lsrs	r2, r2, #6
 80043fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004400:	fb02 f303 	mul.w	r3, r2, r3
 8004404:	617b      	str	r3, [r7, #20]
 8004406:	e00b      	b.n	8004420 <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8004408:	4a1c      	ldr	r2, [pc, #112]	; (800447c <SystemCoreClockUpdate+0xec>)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004410:	4a18      	ldr	r2, [pc, #96]	; (8004474 <SystemCoreClockUpdate+0xe4>)
 8004412:	6852      	ldr	r2, [r2, #4]
 8004414:	0992      	lsrs	r2, r2, #6
 8004416:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800441a:	fb02 f303 	mul.w	r3, r2, r3
 800441e:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8004420:	4b14      	ldr	r3, [pc, #80]	; (8004474 <SystemCoreClockUpdate+0xe4>)
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	0c1b      	lsrs	r3, r3, #16
 8004426:	f003 0303 	and.w	r3, r3, #3
 800442a:	3301      	adds	r3, #1
 800442c:	005b      	lsls	r3, r3, #1
 800442e:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8004430:	697a      	ldr	r2, [r7, #20]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	fbb2 f3f3 	udiv	r3, r2, r3
 8004438:	4a0f      	ldr	r2, [pc, #60]	; (8004478 <SystemCoreClockUpdate+0xe8>)
 800443a:	6013      	str	r3, [r2, #0]
      break;
 800443c:	e003      	b.n	8004446 <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 800443e:	4b0e      	ldr	r3, [pc, #56]	; (8004478 <SystemCoreClockUpdate+0xe8>)
 8004440:	4a0e      	ldr	r2, [pc, #56]	; (800447c <SystemCoreClockUpdate+0xec>)
 8004442:	601a      	str	r2, [r3, #0]
      break;
 8004444:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8004446:	4b0b      	ldr	r3, [pc, #44]	; (8004474 <SystemCoreClockUpdate+0xe4>)
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	091b      	lsrs	r3, r3, #4
 800444c:	f003 030f 	and.w	r3, r3, #15
 8004450:	4a0c      	ldr	r2, [pc, #48]	; (8004484 <SystemCoreClockUpdate+0xf4>)
 8004452:	5cd3      	ldrb	r3, [r2, r3]
 8004454:	b2db      	uxtb	r3, r3
 8004456:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8004458:	4b07      	ldr	r3, [pc, #28]	; (8004478 <SystemCoreClockUpdate+0xe8>)
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	fa22 f303 	lsr.w	r3, r2, r3
 8004462:	4a05      	ldr	r2, [pc, #20]	; (8004478 <SystemCoreClockUpdate+0xe8>)
 8004464:	6013      	str	r3, [r2, #0]
}
 8004466:	bf00      	nop
 8004468:	371c      	adds	r7, #28
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr
 8004472:	bf00      	nop
 8004474:	40023800 	.word	0x40023800
 8004478:	20000004 	.word	0x20000004
 800447c:	00f42400 	.word	0x00f42400
 8004480:	017d7840 	.word	0x017d7840
 8004484:	20000008 	.word	0x20000008

08004488 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800448e:	2300      	movs	r3, #0
 8004490:	607b      	str	r3, [r7, #4]
 8004492:	2300      	movs	r3, #0
 8004494:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8004496:	4a36      	ldr	r2, [pc, #216]	; (8004570 <SetSysClock+0xe8>)
 8004498:	4b35      	ldr	r3, [pc, #212]	; (8004570 <SetSysClock+0xe8>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044a0:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80044a2:	4b33      	ldr	r3, [pc, #204]	; (8004570 <SetSysClock+0xe8>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044aa:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	3301      	adds	r3, #1
 80044b0:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d103      	bne.n	80044c0 <SetSysClock+0x38>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80044be:	d1f0      	bne.n	80044a2 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80044c0:	4b2b      	ldr	r3, [pc, #172]	; (8004570 <SetSysClock+0xe8>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d002      	beq.n	80044d2 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80044cc:	2301      	movs	r3, #1
 80044ce:	603b      	str	r3, [r7, #0]
 80044d0:	e001      	b.n	80044d6 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80044d2:	2300      	movs	r3, #0
 80044d4:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d142      	bne.n	8004562 <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80044dc:	4a24      	ldr	r2, [pc, #144]	; (8004570 <SetSysClock+0xe8>)
 80044de:	4b24      	ldr	r3, [pc, #144]	; (8004570 <SetSysClock+0xe8>)
 80044e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044e6:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80044e8:	4a22      	ldr	r2, [pc, #136]	; (8004574 <SetSysClock+0xec>)
 80044ea:	4b22      	ldr	r3, [pc, #136]	; (8004574 <SetSysClock+0xec>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80044f2:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80044f4:	4a1e      	ldr	r2, [pc, #120]	; (8004570 <SetSysClock+0xe8>)
 80044f6:	4b1e      	ldr	r3, [pc, #120]	; (8004570 <SetSysClock+0xe8>)
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80044fc:	4a1c      	ldr	r2, [pc, #112]	; (8004570 <SetSysClock+0xe8>)
 80044fe:	4b1c      	ldr	r3, [pc, #112]	; (8004570 <SetSysClock+0xe8>)
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004506:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8004508:	4a19      	ldr	r2, [pc, #100]	; (8004570 <SetSysClock+0xe8>)
 800450a:	4b19      	ldr	r3, [pc, #100]	; (8004570 <SetSysClock+0xe8>)
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8004512:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8004514:	4b16      	ldr	r3, [pc, #88]	; (8004570 <SetSysClock+0xe8>)
 8004516:	4a18      	ldr	r2, [pc, #96]	; (8004578 <SetSysClock+0xf0>)
 8004518:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800451a:	4a15      	ldr	r2, [pc, #84]	; (8004570 <SetSysClock+0xe8>)
 800451c:	4b14      	ldr	r3, [pc, #80]	; (8004570 <SetSysClock+0xe8>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004524:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8004526:	bf00      	nop
 8004528:	4b11      	ldr	r3, [pc, #68]	; (8004570 <SetSysClock+0xe8>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d0f9      	beq.n	8004528 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8004534:	4b11      	ldr	r3, [pc, #68]	; (800457c <SetSysClock+0xf4>)
 8004536:	f240 7205 	movw	r2, #1797	; 0x705
 800453a:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800453c:	4a0c      	ldr	r2, [pc, #48]	; (8004570 <SetSysClock+0xe8>)
 800453e:	4b0c      	ldr	r3, [pc, #48]	; (8004570 <SetSysClock+0xe8>)
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	f023 0303 	bic.w	r3, r3, #3
 8004546:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8004548:	4a09      	ldr	r2, [pc, #36]	; (8004570 <SetSysClock+0xe8>)
 800454a:	4b09      	ldr	r3, [pc, #36]	; (8004570 <SetSysClock+0xe8>)
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	f043 0302 	orr.w	r3, r3, #2
 8004552:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8004554:	bf00      	nop
 8004556:	4b06      	ldr	r3, [pc, #24]	; (8004570 <SetSysClock+0xe8>)
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	f003 030c 	and.w	r3, r3, #12
 800455e:	2b08      	cmp	r3, #8
 8004560:	d1f9      	bne.n	8004556 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8004562:	bf00      	nop
 8004564:	370c      	adds	r7, #12
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr
 800456e:	bf00      	nop
 8004570:	40023800 	.word	0x40023800
 8004574:	40007000 	.word	0x40007000
 8004578:	07405419 	.word	0x07405419
 800457c:	40023c00 	.word	0x40023c00

08004580 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 8004580:	b480      	push	{r7}
 8004582:	b087      	sub	sp, #28
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	607a      	str	r2, [r7, #4]
	int div = 1;
 800458c:	2301      	movs	r3, #1
 800458e:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8004590:	e004      	b.n	800459c <ts_itoa+0x1c>
		div *= base;
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	fb02 f303 	mul.w	r3, r2, r3
 800459a:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	68ba      	ldr	r2, [r7, #8]
 80045a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d2f3      	bcs.n	8004592 <ts_itoa+0x12>

	while (div != 0)
 80045aa:	e029      	b.n	8004600 <ts_itoa+0x80>
	{
		int num = d/div;
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	68ba      	ldr	r2, [r7, #8]
 80045b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045b4:	613b      	str	r3, [r7, #16]
		d = d%div;
 80045b6:	697a      	ldr	r2, [r7, #20]
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	fbb3 f1f2 	udiv	r1, r3, r2
 80045be:	fb02 f201 	mul.w	r2, r2, r1
 80045c2:	1a9b      	subs	r3, r3, r2
 80045c4:	60bb      	str	r3, [r7, #8]
		div /= base;
 80045c6:	697a      	ldr	r2, [r7, #20]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	fb92 f3f3 	sdiv	r3, r2, r3
 80045ce:	617b      	str	r3, [r7, #20]
		if (num > 9)
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	2b09      	cmp	r3, #9
 80045d4:	dd0a      	ble.n	80045ec <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	1c59      	adds	r1, r3, #1
 80045dc:	68fa      	ldr	r2, [r7, #12]
 80045de:	6011      	str	r1, [r2, #0]
 80045e0:	693a      	ldr	r2, [r7, #16]
 80045e2:	b2d2      	uxtb	r2, r2
 80045e4:	3237      	adds	r2, #55	; 0x37
 80045e6:	b2d2      	uxtb	r2, r2
 80045e8:	701a      	strb	r2, [r3, #0]
 80045ea:	e009      	b.n	8004600 <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	1c59      	adds	r1, r3, #1
 80045f2:	68fa      	ldr	r2, [r7, #12]
 80045f4:	6011      	str	r1, [r2, #0]
 80045f6:	693a      	ldr	r2, [r7, #16]
 80045f8:	b2d2      	uxtb	r2, r2
 80045fa:	3230      	adds	r2, #48	; 0x30
 80045fc:	b2d2      	uxtb	r2, r2
 80045fe:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d1d2      	bne.n	80045ac <ts_itoa+0x2c>
	}
}
 8004606:	bf00      	nop
 8004608:	371c      	adds	r7, #28
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr

08004612 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 8004612:	b580      	push	{r7, lr}
 8004614:	b088      	sub	sp, #32
 8004616:	af00      	add	r7, sp, #0
 8004618:	60f8      	str	r0, [r7, #12]
 800461a:	60b9      	str	r1, [r7, #8]
 800461c:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	617b      	str	r3, [r7, #20]
	while(*fmt)
 8004622:	e07d      	b.n	8004720 <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	2b25      	cmp	r3, #37	; 0x25
 800462a:	d171      	bne.n	8004710 <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	3301      	adds	r3, #1
 8004630:	60bb      	str	r3, [r7, #8]
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	2b64      	cmp	r3, #100	; 0x64
 8004638:	d01e      	beq.n	8004678 <ts_formatstring+0x66>
 800463a:	2b64      	cmp	r3, #100	; 0x64
 800463c:	dc06      	bgt.n	800464c <ts_formatstring+0x3a>
 800463e:	2b58      	cmp	r3, #88	; 0x58
 8004640:	d050      	beq.n	80046e4 <ts_formatstring+0xd2>
 8004642:	2b63      	cmp	r3, #99	; 0x63
 8004644:	d00e      	beq.n	8004664 <ts_formatstring+0x52>
 8004646:	2b25      	cmp	r3, #37	; 0x25
 8004648:	d058      	beq.n	80046fc <ts_formatstring+0xea>
 800464a:	e05d      	b.n	8004708 <ts_formatstring+0xf6>
 800464c:	2b73      	cmp	r3, #115	; 0x73
 800464e:	d02b      	beq.n	80046a8 <ts_formatstring+0x96>
 8004650:	2b73      	cmp	r3, #115	; 0x73
 8004652:	dc02      	bgt.n	800465a <ts_formatstring+0x48>
 8004654:	2b69      	cmp	r3, #105	; 0x69
 8004656:	d00f      	beq.n	8004678 <ts_formatstring+0x66>
 8004658:	e056      	b.n	8004708 <ts_formatstring+0xf6>
 800465a:	2b75      	cmp	r3, #117	; 0x75
 800465c:	d037      	beq.n	80046ce <ts_formatstring+0xbc>
 800465e:	2b78      	cmp	r3, #120	; 0x78
 8004660:	d040      	beq.n	80046e4 <ts_formatstring+0xd2>
 8004662:	e051      	b.n	8004708 <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	1c5a      	adds	r2, r3, #1
 8004668:	60fa      	str	r2, [r7, #12]
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	1d11      	adds	r1, r2, #4
 800466e:	6079      	str	r1, [r7, #4]
 8004670:	6812      	ldr	r2, [r2, #0]
 8004672:	b2d2      	uxtb	r2, r2
 8004674:	701a      	strb	r2, [r3, #0]
				break;
 8004676:	e047      	b.n	8004708 <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	1d1a      	adds	r2, r3, #4
 800467c:	607a      	str	r2, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	2b00      	cmp	r3, #0
 8004686:	da07      	bge.n	8004698 <ts_formatstring+0x86>
					{
						val *= -1;
 8004688:	69fb      	ldr	r3, [r7, #28]
 800468a:	425b      	negs	r3, r3
 800468c:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	1c5a      	adds	r2, r3, #1
 8004692:	60fa      	str	r2, [r7, #12]
 8004694:	222d      	movs	r2, #45	; 0x2d
 8004696:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 8004698:	69f9      	ldr	r1, [r7, #28]
 800469a:	f107 030c 	add.w	r3, r7, #12
 800469e:	220a      	movs	r2, #10
 80046a0:	4618      	mov	r0, r3
 80046a2:	f7ff ff6d 	bl	8004580 <ts_itoa>
				}
				break;
 80046a6:	e02f      	b.n	8004708 <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	1d1a      	adds	r2, r3, #4
 80046ac:	607a      	str	r2, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	61bb      	str	r3, [r7, #24]
					while (*arg)
 80046b2:	e007      	b.n	80046c4 <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	1c5a      	adds	r2, r3, #1
 80046b8:	60fa      	str	r2, [r7, #12]
 80046ba:	69ba      	ldr	r2, [r7, #24]
 80046bc:	1c51      	adds	r1, r2, #1
 80046be:	61b9      	str	r1, [r7, #24]
 80046c0:	7812      	ldrb	r2, [r2, #0]
 80046c2:	701a      	strb	r2, [r3, #0]
					while (*arg)
 80046c4:	69bb      	ldr	r3, [r7, #24]
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d1f3      	bne.n	80046b4 <ts_formatstring+0xa2>
					}
				}
				break;
 80046cc:	e01c      	b.n	8004708 <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	1d1a      	adds	r2, r3, #4
 80046d2:	607a      	str	r2, [r7, #4]
 80046d4:	6819      	ldr	r1, [r3, #0]
 80046d6:	f107 030c 	add.w	r3, r7, #12
 80046da:	220a      	movs	r2, #10
 80046dc:	4618      	mov	r0, r3
 80046de:	f7ff ff4f 	bl	8004580 <ts_itoa>
				break;
 80046e2:	e011      	b.n	8004708 <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	1d1a      	adds	r2, r3, #4
 80046e8:	607a      	str	r2, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4619      	mov	r1, r3
 80046ee:	f107 030c 	add.w	r3, r7, #12
 80046f2:	2210      	movs	r2, #16
 80046f4:	4618      	mov	r0, r3
 80046f6:	f7ff ff43 	bl	8004580 <ts_itoa>
				break;
 80046fa:	e005      	b.n	8004708 <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	1c5a      	adds	r2, r3, #1
 8004700:	60fa      	str	r2, [r7, #12]
 8004702:	2225      	movs	r2, #37	; 0x25
 8004704:	701a      	strb	r2, [r3, #0]
				  break;
 8004706:	bf00      	nop
			}
			fmt++;
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	3301      	adds	r3, #1
 800470c:	60bb      	str	r3, [r7, #8]
 800470e:	e007      	b.n	8004720 <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	1c5a      	adds	r2, r3, #1
 8004714:	60fa      	str	r2, [r7, #12]
 8004716:	68ba      	ldr	r2, [r7, #8]
 8004718:	1c51      	adds	r1, r2, #1
 800471a:	60b9      	str	r1, [r7, #8]
 800471c:	7812      	ldrb	r2, [r2, #0]
 800471e:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	2b00      	cmp	r3, #0
 8004726:	f47f af7d 	bne.w	8004624 <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2200      	movs	r2, #0
 800472e:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	461a      	mov	r2, r3
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	1ad3      	subs	r3, r2, r3
}
 8004738:	4618      	mov	r0, r3
 800473a:	3720      	adds	r7, #32
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}

08004740 <siprintf>:
**            given character string according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int siprintf(char *buf, const char *fmt, ...)
{
 8004740:	b40e      	push	{r1, r2, r3}
 8004742:	b580      	push	{r7, lr}
 8004744:	b085      	sub	sp, #20
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
	int length;
	va_list va;
	va_start(va, fmt);
 800474a:	f107 0320 	add.w	r3, r7, #32
 800474e:	60bb      	str	r3, [r7, #8]
	length = ts_formatstring(buf, fmt, va);
 8004750:	68ba      	ldr	r2, [r7, #8]
 8004752:	69f9      	ldr	r1, [r7, #28]
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f7ff ff5c 	bl	8004612 <ts_formatstring>
 800475a:	60f8      	str	r0, [r7, #12]
	va_end(va);
	return length;
 800475c:	68fb      	ldr	r3, [r7, #12]
}
 800475e:	4618      	mov	r0, r3
 8004760:	3714      	adds	r7, #20
 8004762:	46bd      	mov	sp, r7
 8004764:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004768:	b003      	add	sp, #12
 800476a:	4770      	bx	lr

0800476c <__libc_init_array>:
 800476c:	b570      	push	{r4, r5, r6, lr}
 800476e:	4e0d      	ldr	r6, [pc, #52]	; (80047a4 <__libc_init_array+0x38>)
 8004770:	4c0d      	ldr	r4, [pc, #52]	; (80047a8 <__libc_init_array+0x3c>)
 8004772:	1ba4      	subs	r4, r4, r6
 8004774:	10a4      	asrs	r4, r4, #2
 8004776:	2500      	movs	r5, #0
 8004778:	42a5      	cmp	r5, r4
 800477a:	d109      	bne.n	8004790 <__libc_init_array+0x24>
 800477c:	4e0b      	ldr	r6, [pc, #44]	; (80047ac <__libc_init_array+0x40>)
 800477e:	4c0c      	ldr	r4, [pc, #48]	; (80047b0 <__libc_init_array+0x44>)
 8004780:	f000 f824 	bl	80047cc <_init>
 8004784:	1ba4      	subs	r4, r4, r6
 8004786:	10a4      	asrs	r4, r4, #2
 8004788:	2500      	movs	r5, #0
 800478a:	42a5      	cmp	r5, r4
 800478c:	d105      	bne.n	800479a <__libc_init_array+0x2e>
 800478e:	bd70      	pop	{r4, r5, r6, pc}
 8004790:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004794:	4798      	blx	r3
 8004796:	3501      	adds	r5, #1
 8004798:	e7ee      	b.n	8004778 <__libc_init_array+0xc>
 800479a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800479e:	4798      	blx	r3
 80047a0:	3501      	adds	r5, #1
 80047a2:	e7f2      	b.n	800478a <__libc_init_array+0x1e>
 80047a4:	080048b4 	.word	0x080048b4
 80047a8:	080048b4 	.word	0x080048b4
 80047ac:	080048b4 	.word	0x080048b4
 80047b0:	080048b8 	.word	0x080048b8

080047b4 <memcpy>:
 80047b4:	b510      	push	{r4, lr}
 80047b6:	1e43      	subs	r3, r0, #1
 80047b8:	440a      	add	r2, r1
 80047ba:	4291      	cmp	r1, r2
 80047bc:	d100      	bne.n	80047c0 <memcpy+0xc>
 80047be:	bd10      	pop	{r4, pc}
 80047c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80047c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80047c8:	e7f7      	b.n	80047ba <memcpy+0x6>
	...

080047cc <_init>:
 80047cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ce:	bf00      	nop
 80047d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047d2:	bc08      	pop	{r3}
 80047d4:	469e      	mov	lr, r3
 80047d6:	4770      	bx	lr

080047d8 <_fini>:
 80047d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047da:	bf00      	nop
 80047dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047de:	bc08      	pop	{r3}
 80047e0:	469e      	mov	lr, r3
 80047e2:	4770      	bx	lr
